
Zombie.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005360  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000144  08005610  08005610  00015610  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08005754  08005754  00015754  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08005758  08005758  00015758  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000078  24000000  0800575c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00004ae8  24000078  080057d4  00020078  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24004b60  080057d4  00024b60  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
  9 .debug_info   000185be  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002dab  00000000  00000000  00038664  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000013e8  00000000  00000000  0003b410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 000012c0  00000000  00000000  0003c7f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00003624  00000000  00000000  0003dab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001519c  00000000  00000000  000410dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00141342  00000000  00000000  00056278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001975ba  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000570c  00000000  00000000  0019760c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000078 	.word	0x24000078
 80002cc:	00000000 	.word	0x00000000
 80002d0:	080055f8 	.word	0x080055f8

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	2400007c 	.word	0x2400007c
 80002ec:	080055f8 	.word	0x080055f8

080002f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	HAL_GPIO_WritePin(GPIOF,GPIO_PIN_7,GPIO_PIN_SET);
 80002f4:	2201      	movs	r2, #1
 80002f6:	2180      	movs	r1, #128	; 0x80
 80002f8:	4823      	ldr	r0, [pc, #140]	; (8000388 <main+0x98>)
 80002fa:	f000 ff9f 	bl	800123c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_RESET);
 80002fe:	2200      	movs	r2, #0
 8000300:	2110      	movs	r1, #16
 8000302:	4822      	ldr	r0, [pc, #136]	; (800038c <main+0x9c>)
 8000304:	f000 ff9a 	bl	800123c <HAL_GPIO_WritePin>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000308:	f000 fc36 	bl	8000b78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800030c:	f000 f85e 	bl	80003cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000310:	f000 f974 	bl	80005fc <MX_GPIO_Init>
  MX_TIM1_Init();
 8000314:	f000 f8d0 	bl	80004b8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000318:	f000 f922 	bl	8000560 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 800031c:	481c      	ldr	r0, [pc, #112]	; (8000390 <main+0xa0>)
 800031e:	f001 ff8d 	bl	800223c <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim2);
 8000322:	481c      	ldr	r0, [pc, #112]	; (8000394 <main+0xa4>)
 8000324:	f001 ff8a 	bl	800223c <HAL_TIM_Base_Start>
  HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 8000328:	2200      	movs	r2, #0
 800032a:	2101      	movs	r1, #1
 800032c:	4817      	ldr	r0, [pc, #92]	; (800038c <main+0x9c>)
 800032e:	f000 ff85 	bl	800123c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0, GPIO_PIN_SET);
 8000332:	2201      	movs	r2, #1
 8000334:	2101      	movs	r1, #1
 8000336:	4818      	ldr	r0, [pc, #96]	; (8000398 <main+0xa8>)
 8000338:	f000 ff80 	bl	800123c <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800033c:	f002 fae0 	bl	8002900 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000340:	4a16      	ldr	r2, [pc, #88]	; (800039c <main+0xac>)
 8000342:	2100      	movs	r1, #0
 8000344:	4816      	ldr	r0, [pc, #88]	; (80003a0 <main+0xb0>)
 8000346:	f002 fb25 	bl	8002994 <osThreadNew>
 800034a:	4603      	mov	r3, r0
 800034c:	4a15      	ldr	r2, [pc, #84]	; (80003a4 <main+0xb4>)
 800034e:	6013      	str	r3, [r2, #0]

  /* creation of MSUTrigger */
  MSUTriggerHandle = osThreadNew(TaskTrigger, NULL, &MSUTrigger_attributes);
 8000350:	4a15      	ldr	r2, [pc, #84]	; (80003a8 <main+0xb8>)
 8000352:	2100      	movs	r1, #0
 8000354:	4815      	ldr	r0, [pc, #84]	; (80003ac <main+0xbc>)
 8000356:	f002 fb1d 	bl	8002994 <osThreadNew>
 800035a:	4603      	mov	r3, r0
 800035c:	4a14      	ldr	r2, [pc, #80]	; (80003b0 <main+0xc0>)
 800035e:	6013      	str	r3, [r2, #0]

  /* creation of MSUReadEcho */
  MSUReadEchoHandle = osThreadNew(TaskECHO, NULL, &MSUReadEcho_attributes);
 8000360:	4a14      	ldr	r2, [pc, #80]	; (80003b4 <main+0xc4>)
 8000362:	2100      	movs	r1, #0
 8000364:	4814      	ldr	r0, [pc, #80]	; (80003b8 <main+0xc8>)
 8000366:	f002 fb15 	bl	8002994 <osThreadNew>
 800036a:	4603      	mov	r3, r0
 800036c:	4a13      	ldr	r2, [pc, #76]	; (80003bc <main+0xcc>)
 800036e:	6013      	str	r3, [r2, #0]

  /* creation of BUTTON */
  BUTTONHandle = osThreadNew(TaskButton, NULL, &BUTTON_attributes);
 8000370:	4a13      	ldr	r2, [pc, #76]	; (80003c0 <main+0xd0>)
 8000372:	2100      	movs	r1, #0
 8000374:	4813      	ldr	r0, [pc, #76]	; (80003c4 <main+0xd4>)
 8000376:	f002 fb0d 	bl	8002994 <osThreadNew>
 800037a:	4603      	mov	r3, r0
 800037c:	4a12      	ldr	r2, [pc, #72]	; (80003c8 <main+0xd8>)
 800037e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000380:	f002 fae2 	bl	8002948 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000384:	e7fe      	b.n	8000384 <main+0x94>
 8000386:	bf00      	nop
 8000388:	58021400 	.word	0x58021400
 800038c:	58020400 	.word	0x58020400
 8000390:	24000094 	.word	0x24000094
 8000394:	240000e0 	.word	0x240000e0
 8000398:	58021000 	.word	0x58021000
 800039c:	08005654 	.word	0x08005654
 80003a0:	080007dd 	.word	0x080007dd
 80003a4:	2400012c 	.word	0x2400012c
 80003a8:	08005678 	.word	0x08005678
 80003ac:	080007ed 	.word	0x080007ed
 80003b0:	24000130 	.word	0x24000130
 80003b4:	0800569c 	.word	0x0800569c
 80003b8:	08000821 	.word	0x08000821
 80003bc:	24000134 	.word	0x24000134
 80003c0:	080056c0 	.word	0x080056c0
 80003c4:	080008c1 	.word	0x080008c1
 80003c8:	24000138 	.word	0x24000138

080003cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b09c      	sub	sp, #112	; 0x70
 80003d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80003d6:	224c      	movs	r2, #76	; 0x4c
 80003d8:	2100      	movs	r1, #0
 80003da:	4618      	mov	r0, r3
 80003dc:	f005 f842 	bl	8005464 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003e0:	1d3b      	adds	r3, r7, #4
 80003e2:	2220      	movs	r2, #32
 80003e4:	2100      	movs	r1, #0
 80003e6:	4618      	mov	r0, r3
 80003e8:	f005 f83c 	bl	8005464 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 80003ec:	4b30      	ldr	r3, [pc, #192]	; (80004b0 <SystemClock_Config+0xe4>)
 80003ee:	f04f 32ff 	mov.w	r2, #4294967295
 80003f2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80003f6:	2004      	movs	r0, #4
 80003f8:	f000 ff3a 	bl	8001270 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80003fc:	2300      	movs	r3, #0
 80003fe:	603b      	str	r3, [r7, #0]
 8000400:	4b2c      	ldr	r3, [pc, #176]	; (80004b4 <SystemClock_Config+0xe8>)
 8000402:	699b      	ldr	r3, [r3, #24]
 8000404:	4a2b      	ldr	r2, [pc, #172]	; (80004b4 <SystemClock_Config+0xe8>)
 8000406:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800040a:	6193      	str	r3, [r2, #24]
 800040c:	4b29      	ldr	r3, [pc, #164]	; (80004b4 <SystemClock_Config+0xe8>)
 800040e:	699b      	ldr	r3, [r3, #24]
 8000410:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000414:	603b      	str	r3, [r7, #0]
 8000416:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000418:	bf00      	nop
 800041a:	4b26      	ldr	r3, [pc, #152]	; (80004b4 <SystemClock_Config+0xe8>)
 800041c:	699b      	ldr	r3, [r3, #24]
 800041e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000422:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000426:	d1f8      	bne.n	800041a <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000428:	2302      	movs	r3, #2
 800042a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800042c:	2301      	movs	r3, #1
 800042e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000430:	2340      	movs	r3, #64	; 0x40
 8000432:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000434:	2302      	movs	r3, #2
 8000436:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000438:	2300      	movs	r3, #0
 800043a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800043c:	2304      	movs	r3, #4
 800043e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 9;
 8000440:	2309      	movs	r3, #9
 8000442:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000444:	2302      	movs	r3, #2
 8000446:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000448:	2302      	movs	r3, #2
 800044a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800044c:	2302      	movs	r3, #2
 800044e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000450:	230c      	movs	r3, #12
 8000452:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000454:	2300      	movs	r3, #0
 8000456:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000458:	2300      	movs	r3, #0
 800045a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800045c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000460:	4618      	mov	r0, r3
 8000462:	f000 ff5f 	bl	8001324 <HAL_RCC_OscConfig>
 8000466:	4603      	mov	r3, r0
 8000468:	2b00      	cmp	r3, #0
 800046a:	d001      	beq.n	8000470 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 800046c:	f000 fa62 	bl	8000934 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000470:	233f      	movs	r3, #63	; 0x3f
 8000472:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000474:	2303      	movs	r3, #3
 8000476:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000478:	2300      	movs	r3, #0
 800047a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800047c:	2300      	movs	r3, #0
 800047e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000480:	2340      	movs	r3, #64	; 0x40
 8000482:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000484:	2340      	movs	r3, #64	; 0x40
 8000486:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000488:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800048c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800048e:	2340      	movs	r3, #64	; 0x40
 8000490:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000492:	1d3b      	adds	r3, r7, #4
 8000494:	2103      	movs	r1, #3
 8000496:	4618      	mov	r0, r3
 8000498:	f001 fb48 	bl	8001b2c <HAL_RCC_ClockConfig>
 800049c:	4603      	mov	r3, r0
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d001      	beq.n	80004a6 <SystemClock_Config+0xda>
  {
    Error_Handler();
 80004a2:	f000 fa47 	bl	8000934 <Error_Handler>
  }
}
 80004a6:	bf00      	nop
 80004a8:	3770      	adds	r7, #112	; 0x70
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bd80      	pop	{r7, pc}
 80004ae:	bf00      	nop
 80004b0:	58024400 	.word	0x58024400
 80004b4:	58024800 	.word	0x58024800

080004b8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b088      	sub	sp, #32
 80004bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004be:	f107 0310 	add.w	r3, r7, #16
 80004c2:	2200      	movs	r2, #0
 80004c4:	601a      	str	r2, [r3, #0]
 80004c6:	605a      	str	r2, [r3, #4]
 80004c8:	609a      	str	r2, [r3, #8]
 80004ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004cc:	1d3b      	adds	r3, r7, #4
 80004ce:	2200      	movs	r2, #0
 80004d0:	601a      	str	r2, [r3, #0]
 80004d2:	605a      	str	r2, [r3, #4]
 80004d4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80004d6:	4b20      	ldr	r3, [pc, #128]	; (8000558 <MX_TIM1_Init+0xa0>)
 80004d8:	4a20      	ldr	r2, [pc, #128]	; (800055c <MX_TIM1_Init+0xa4>)
 80004da:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 80004dc:	4b1e      	ldr	r3, [pc, #120]	; (8000558 <MX_TIM1_Init+0xa0>)
 80004de:	2247      	movs	r2, #71	; 0x47
 80004e0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004e2:	4b1d      	ldr	r3, [pc, #116]	; (8000558 <MX_TIM1_Init+0xa0>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80004e8:	4b1b      	ldr	r3, [pc, #108]	; (8000558 <MX_TIM1_Init+0xa0>)
 80004ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80004ee:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004f0:	4b19      	ldr	r3, [pc, #100]	; (8000558 <MX_TIM1_Init+0xa0>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80004f6:	4b18      	ldr	r3, [pc, #96]	; (8000558 <MX_TIM1_Init+0xa0>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004fc:	4b16      	ldr	r3, [pc, #88]	; (8000558 <MX_TIM1_Init+0xa0>)
 80004fe:	2200      	movs	r2, #0
 8000500:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000502:	4815      	ldr	r0, [pc, #84]	; (8000558 <MX_TIM1_Init+0xa0>)
 8000504:	f001 fe42 	bl	800218c <HAL_TIM_Base_Init>
 8000508:	4603      	mov	r3, r0
 800050a:	2b00      	cmp	r3, #0
 800050c:	d001      	beq.n	8000512 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800050e:	f000 fa11 	bl	8000934 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000512:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000516:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000518:	f107 0310 	add.w	r3, r7, #16
 800051c:	4619      	mov	r1, r3
 800051e:	480e      	ldr	r0, [pc, #56]	; (8000558 <MX_TIM1_Init+0xa0>)
 8000520:	f001 fefc 	bl	800231c <HAL_TIM_ConfigClockSource>
 8000524:	4603      	mov	r3, r0
 8000526:	2b00      	cmp	r3, #0
 8000528:	d001      	beq.n	800052e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800052a:	f000 fa03 	bl	8000934 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800052e:	2300      	movs	r3, #0
 8000530:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000532:	2300      	movs	r3, #0
 8000534:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000536:	2300      	movs	r3, #0
 8000538:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800053a:	1d3b      	adds	r3, r7, #4
 800053c:	4619      	mov	r1, r3
 800053e:	4806      	ldr	r0, [pc, #24]	; (8000558 <MX_TIM1_Init+0xa0>)
 8000540:	f002 f91c 	bl	800277c <HAL_TIMEx_MasterConfigSynchronization>
 8000544:	4603      	mov	r3, r0
 8000546:	2b00      	cmp	r3, #0
 8000548:	d001      	beq.n	800054e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800054a:	f000 f9f3 	bl	8000934 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800054e:	bf00      	nop
 8000550:	3720      	adds	r7, #32
 8000552:	46bd      	mov	sp, r7
 8000554:	bd80      	pop	{r7, pc}
 8000556:	bf00      	nop
 8000558:	24000094 	.word	0x24000094
 800055c:	40010000 	.word	0x40010000

08000560 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b088      	sub	sp, #32
 8000564:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000566:	f107 0310 	add.w	r3, r7, #16
 800056a:	2200      	movs	r2, #0
 800056c:	601a      	str	r2, [r3, #0]
 800056e:	605a      	str	r2, [r3, #4]
 8000570:	609a      	str	r2, [r3, #8]
 8000572:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000574:	1d3b      	adds	r3, r7, #4
 8000576:	2200      	movs	r2, #0
 8000578:	601a      	str	r2, [r3, #0]
 800057a:	605a      	str	r2, [r3, #4]
 800057c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800057e:	4b1e      	ldr	r3, [pc, #120]	; (80005f8 <MX_TIM2_Init+0x98>)
 8000580:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000584:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8000586:	4b1c      	ldr	r3, [pc, #112]	; (80005f8 <MX_TIM2_Init+0x98>)
 8000588:	2247      	movs	r2, #71	; 0x47
 800058a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800058c:	4b1a      	ldr	r3, [pc, #104]	; (80005f8 <MX_TIM2_Init+0x98>)
 800058e:	2200      	movs	r2, #0
 8000590:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000592:	4b19      	ldr	r3, [pc, #100]	; (80005f8 <MX_TIM2_Init+0x98>)
 8000594:	f04f 32ff 	mov.w	r2, #4294967295
 8000598:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800059a:	4b17      	ldr	r3, [pc, #92]	; (80005f8 <MX_TIM2_Init+0x98>)
 800059c:	2200      	movs	r2, #0
 800059e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005a0:	4b15      	ldr	r3, [pc, #84]	; (80005f8 <MX_TIM2_Init+0x98>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80005a6:	4814      	ldr	r0, [pc, #80]	; (80005f8 <MX_TIM2_Init+0x98>)
 80005a8:	f001 fdf0 	bl	800218c <HAL_TIM_Base_Init>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d001      	beq.n	80005b6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80005b2:	f000 f9bf 	bl	8000934 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005ba:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80005bc:	f107 0310 	add.w	r3, r7, #16
 80005c0:	4619      	mov	r1, r3
 80005c2:	480d      	ldr	r0, [pc, #52]	; (80005f8 <MX_TIM2_Init+0x98>)
 80005c4:	f001 feaa 	bl	800231c <HAL_TIM_ConfigClockSource>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80005ce:	f000 f9b1 	bl	8000934 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005d2:	2300      	movs	r3, #0
 80005d4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005d6:	2300      	movs	r3, #0
 80005d8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80005da:	1d3b      	adds	r3, r7, #4
 80005dc:	4619      	mov	r1, r3
 80005de:	4806      	ldr	r0, [pc, #24]	; (80005f8 <MX_TIM2_Init+0x98>)
 80005e0:	f002 f8cc 	bl	800277c <HAL_TIMEx_MasterConfigSynchronization>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80005ea:	f000 f9a3 	bl	8000934 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80005ee:	bf00      	nop
 80005f0:	3720      	adds	r7, #32
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	240000e0 	.word	0x240000e0

080005fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b08c      	sub	sp, #48	; 0x30
 8000600:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000602:	f107 031c 	add.w	r3, r7, #28
 8000606:	2200      	movs	r2, #0
 8000608:	601a      	str	r2, [r3, #0]
 800060a:	605a      	str	r2, [r3, #4]
 800060c:	609a      	str	r2, [r3, #8]
 800060e:	60da      	str	r2, [r3, #12]
 8000610:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000612:	4b6b      	ldr	r3, [pc, #428]	; (80007c0 <MX_GPIO_Init+0x1c4>)
 8000614:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000618:	4a69      	ldr	r2, [pc, #420]	; (80007c0 <MX_GPIO_Init+0x1c4>)
 800061a:	f043 0310 	orr.w	r3, r3, #16
 800061e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000622:	4b67      	ldr	r3, [pc, #412]	; (80007c0 <MX_GPIO_Init+0x1c4>)
 8000624:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000628:	f003 0310 	and.w	r3, r3, #16
 800062c:	61bb      	str	r3, [r7, #24]
 800062e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000630:	4b63      	ldr	r3, [pc, #396]	; (80007c0 <MX_GPIO_Init+0x1c4>)
 8000632:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000636:	4a62      	ldr	r2, [pc, #392]	; (80007c0 <MX_GPIO_Init+0x1c4>)
 8000638:	f043 0304 	orr.w	r3, r3, #4
 800063c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000640:	4b5f      	ldr	r3, [pc, #380]	; (80007c0 <MX_GPIO_Init+0x1c4>)
 8000642:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000646:	f003 0304 	and.w	r3, r3, #4
 800064a:	617b      	str	r3, [r7, #20]
 800064c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800064e:	4b5c      	ldr	r3, [pc, #368]	; (80007c0 <MX_GPIO_Init+0x1c4>)
 8000650:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000654:	4a5a      	ldr	r2, [pc, #360]	; (80007c0 <MX_GPIO_Init+0x1c4>)
 8000656:	f043 0320 	orr.w	r3, r3, #32
 800065a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800065e:	4b58      	ldr	r3, [pc, #352]	; (80007c0 <MX_GPIO_Init+0x1c4>)
 8000660:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000664:	f003 0320 	and.w	r3, r3, #32
 8000668:	613b      	str	r3, [r7, #16]
 800066a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800066c:	4b54      	ldr	r3, [pc, #336]	; (80007c0 <MX_GPIO_Init+0x1c4>)
 800066e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000672:	4a53      	ldr	r2, [pc, #332]	; (80007c0 <MX_GPIO_Init+0x1c4>)
 8000674:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000678:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800067c:	4b50      	ldr	r3, [pc, #320]	; (80007c0 <MX_GPIO_Init+0x1c4>)
 800067e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000682:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000686:	60fb      	str	r3, [r7, #12]
 8000688:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800068a:	4b4d      	ldr	r3, [pc, #308]	; (80007c0 <MX_GPIO_Init+0x1c4>)
 800068c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000690:	4a4b      	ldr	r2, [pc, #300]	; (80007c0 <MX_GPIO_Init+0x1c4>)
 8000692:	f043 0301 	orr.w	r3, r3, #1
 8000696:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800069a:	4b49      	ldr	r3, [pc, #292]	; (80007c0 <MX_GPIO_Init+0x1c4>)
 800069c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006a0:	f003 0301 	and.w	r3, r3, #1
 80006a4:	60bb      	str	r3, [r7, #8]
 80006a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006a8:	4b45      	ldr	r3, [pc, #276]	; (80007c0 <MX_GPIO_Init+0x1c4>)
 80006aa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006ae:	4a44      	ldr	r2, [pc, #272]	; (80007c0 <MX_GPIO_Init+0x1c4>)
 80006b0:	f043 0302 	orr.w	r3, r3, #2
 80006b4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80006b8:	4b41      	ldr	r3, [pc, #260]	; (80007c0 <MX_GPIO_Init+0x1c4>)
 80006ba:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006be:	f003 0302 	and.w	r3, r3, #2
 80006c2:	607b      	str	r3, [r7, #4]
 80006c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006c6:	4b3e      	ldr	r3, [pc, #248]	; (80007c0 <MX_GPIO_Init+0x1c4>)
 80006c8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006cc:	4a3c      	ldr	r2, [pc, #240]	; (80007c0 <MX_GPIO_Init+0x1c4>)
 80006ce:	f043 0308 	orr.w	r3, r3, #8
 80006d2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80006d6:	4b3a      	ldr	r3, [pc, #232]	; (80007c0 <MX_GPIO_Init+0x1c4>)
 80006d8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006dc:	f003 0308 	and.w	r3, r3, #8
 80006e0:	603b      	str	r3, [r7, #0]
 80006e2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, TEST_Pin|LED_YELLOW_Pin, GPIO_PIN_RESET);
 80006e4:	2200      	movs	r2, #0
 80006e6:	2106      	movs	r1, #6
 80006e8:	4836      	ldr	r0, [pc, #216]	; (80007c4 <MX_GPIO_Init+0x1c8>)
 80006ea:	f000 fda7 	bl	800123c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7, GPIO_PIN_RESET);
 80006ee:	2200      	movs	r2, #0
 80006f0:	2180      	movs	r1, #128	; 0x80
 80006f2:	4835      	ldr	r0, [pc, #212]	; (80007c8 <MX_GPIO_Init+0x1cc>)
 80006f4:	f000 fda2 	bl	800123c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TRIG_Pin|LED_RED_Pin|sortie_pascrame__Pin, GPIO_PIN_RESET);
 80006f8:	2200      	movs	r2, #0
 80006fa:	f244 0111 	movw	r1, #16401	; 0x4011
 80006fe:	4833      	ldr	r0, [pc, #204]	; (80007cc <MX_GPIO_Init+0x1d0>)
 8000700:	f000 fd9c 	bl	800123c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
 8000704:	2200      	movs	r2, #0
 8000706:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800070a:	4831      	ldr	r0, [pc, #196]	; (80007d0 <MX_GPIO_Init+0x1d4>)
 800070c:	f000 fd96 	bl	800123c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : TEST_Pin LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = TEST_Pin|LED_YELLOW_Pin;
 8000710:	2306      	movs	r3, #6
 8000712:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000714:	2301      	movs	r3, #1
 8000716:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000718:	2300      	movs	r3, #0
 800071a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800071c:	2300      	movs	r3, #0
 800071e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000720:	f107 031c 	add.w	r3, r7, #28
 8000724:	4619      	mov	r1, r3
 8000726:	4827      	ldr	r0, [pc, #156]	; (80007c4 <MX_GPIO_Init+0x1c8>)
 8000728:	f000 fbc0 	bl	8000eac <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 800072c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000730:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000732:	2300      	movs	r3, #0
 8000734:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000736:	2300      	movs	r3, #0
 8000738:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 800073a:	f107 031c 	add.w	r3, r7, #28
 800073e:	4619      	mov	r1, r3
 8000740:	4824      	ldr	r0, [pc, #144]	; (80007d4 <MX_GPIO_Init+0x1d8>)
 8000742:	f000 fbb3 	bl	8000eac <HAL_GPIO_Init>

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000746:	2380      	movs	r3, #128	; 0x80
 8000748:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800074a:	2301      	movs	r3, #1
 800074c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074e:	2300      	movs	r3, #0
 8000750:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000752:	2300      	movs	r3, #0
 8000754:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000756:	f107 031c 	add.w	r3, r7, #28
 800075a:	4619      	mov	r1, r3
 800075c:	481a      	ldr	r0, [pc, #104]	; (80007c8 <MX_GPIO_Init+0x1cc>)
 800075e:	f000 fba5 	bl	8000eac <HAL_GPIO_Init>

  /*Configure GPIO pin : Echo_Pin */
  GPIO_InitStruct.Pin = Echo_Pin;
 8000762:	2301      	movs	r3, #1
 8000764:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000766:	2300      	movs	r3, #0
 8000768:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076a:	2300      	movs	r3, #0
 800076c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Echo_GPIO_Port, &GPIO_InitStruct);
 800076e:	f107 031c 	add.w	r3, r7, #28
 8000772:	4619      	mov	r1, r3
 8000774:	4818      	ldr	r0, [pc, #96]	; (80007d8 <MX_GPIO_Init+0x1dc>)
 8000776:	f000 fb99 	bl	8000eac <HAL_GPIO_Init>

  /*Configure GPIO pins : TRIG_Pin LED_RED_Pin sortie_pascrame__Pin */
  GPIO_InitStruct.Pin = TRIG_Pin|LED_RED_Pin|sortie_pascrame__Pin;
 800077a:	f244 0311 	movw	r3, #16401	; 0x4011
 800077e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000780:	2301      	movs	r3, #1
 8000782:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000784:	2300      	movs	r3, #0
 8000786:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000788:	2300      	movs	r3, #0
 800078a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800078c:	f107 031c 	add.w	r3, r7, #28
 8000790:	4619      	mov	r1, r3
 8000792:	480e      	ldr	r0, [pc, #56]	; (80007cc <MX_GPIO_Init+0x1d0>)
 8000794:	f000 fb8a 	bl	8000eac <HAL_GPIO_Init>

  /*Configure GPIO pin : PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000798:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800079c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800079e:	2301      	movs	r3, #1
 80007a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a2:	2300      	movs	r3, #0
 80007a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a6:	2300      	movs	r3, #0
 80007a8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007aa:	f107 031c 	add.w	r3, r7, #28
 80007ae:	4619      	mov	r1, r3
 80007b0:	4807      	ldr	r0, [pc, #28]	; (80007d0 <MX_GPIO_Init+0x1d4>)
 80007b2:	f000 fb7b 	bl	8000eac <HAL_GPIO_Init>

}
 80007b6:	bf00      	nop
 80007b8:	3730      	adds	r7, #48	; 0x30
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	58024400 	.word	0x58024400
 80007c4:	58021000 	.word	0x58021000
 80007c8:	58021400 	.word	0x58021400
 80007cc:	58020400 	.word	0x58020400
 80007d0:	58020c00 	.word	0x58020c00
 80007d4:	58020800 	.word	0x58020800
 80007d8:	58020000 	.word	0x58020000

080007dc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80007e4:	2001      	movs	r0, #1
 80007e6:	f002 f967 	bl	8002ab8 <osDelay>
 80007ea:	e7fb      	b.n	80007e4 <StartDefaultTask+0x8>

080007ec <TaskTrigger>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TaskTrigger */
void TaskTrigger(void *argument)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TaskTrigger */
  /* Infinite loop */
  for(;;)
  {
	  //Pull the trigger ppin high for 1ms and then wait 60 ms (datasheet hc sr04)
    HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,GPIO_PIN_SET);
 80007f4:	2201      	movs	r2, #1
 80007f6:	2101      	movs	r1, #1
 80007f8:	4807      	ldr	r0, [pc, #28]	; (8000818 <TaskTrigger+0x2c>)
 80007fa:	f000 fd1f 	bl	800123c <HAL_GPIO_WritePin>
    HAL_Delay(1);
 80007fe:	2001      	movs	r0, #1
 8000800:	f000 fa4c 	bl	8000c9c <HAL_Delay>
    HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,GPIO_PIN_RESET);
 8000804:	2200      	movs	r2, #0
 8000806:	2101      	movs	r1, #1
 8000808:	4803      	ldr	r0, [pc, #12]	; (8000818 <TaskTrigger+0x2c>)
 800080a:	f000 fd17 	bl	800123c <HAL_GPIO_WritePin>
    HAL_Delay(60);
 800080e:	203c      	movs	r0, #60	; 0x3c
 8000810:	f000 fa44 	bl	8000c9c <HAL_Delay>
    HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,GPIO_PIN_SET);
 8000814:	e7ee      	b.n	80007f4 <TaskTrigger+0x8>
 8000816:	bf00      	nop
 8000818:	58020400 	.word	0x58020400
 800081c:	00000000 	.word	0x00000000

08000820 <TaskECHO>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TaskECHO */
void TaskECHO(void *argument)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b084      	sub	sp, #16
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TaskECHO */
  /* Infinite loop */
  long startTime=0;
 8000828:	2300      	movs	r3, #0
 800082a:	60fb      	str	r3, [r7, #12]
  for(;;)
  {
	  //If no echo received do nothing
	  while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0)==0);
 800082c:	bf00      	nop
 800082e:	2101      	movs	r1, #1
 8000830:	481d      	ldr	r0, [pc, #116]	; (80008a8 <TaskECHO+0x88>)
 8000832:	f000 fceb 	bl	800120c <HAL_GPIO_ReadPin>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d0f8      	beq.n	800082e <TaskECHO+0xe>
	  //Begin the timer
	  startTime=__HAL_TIM_GetCounter(&htim2);
 800083c:	4b1b      	ldr	r3, [pc, #108]	; (80008ac <TaskECHO+0x8c>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000842:	60fb      	str	r3, [r7, #12]
	  //Get the distance when echo is received
	  while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0)==1)
 8000844:	e012      	b.n	800086c <TaskECHO+0x4c>
	  Distance= (__HAL_TIM_GetCounter(&htim2)-startTime)*0.17;
 8000846:	4b19      	ldr	r3, [pc, #100]	; (80008ac <TaskECHO+0x8c>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	1ad3      	subs	r3, r2, r3
 8000850:	ee07 3a90 	vmov	s15, r3
 8000854:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000858:	ed9f 6b11 	vldr	d6, [pc, #68]	; 80008a0 <TaskECHO+0x80>
 800085c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000860:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000864:	ee17 2a90 	vmov	r2, s15
 8000868:	4b11      	ldr	r3, [pc, #68]	; (80008b0 <TaskECHO+0x90>)
 800086a:	601a      	str	r2, [r3, #0]
	  while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0)==1)
 800086c:	2101      	movs	r1, #1
 800086e:	480e      	ldr	r0, [pc, #56]	; (80008a8 <TaskECHO+0x88>)
 8000870:	f000 fccc 	bl	800120c <HAL_GPIO_ReadPin>
 8000874:	4603      	mov	r3, r0
 8000876:	2b01      	cmp	r3, #1
 8000878:	d0e5      	beq.n	8000846 <TaskECHO+0x26>
	  //Threshhold distance to enable the Tesla
	  if (Distance<=700)
 800087a:	4b0d      	ldr	r3, [pc, #52]	; (80008b0 <TaskECHO+0x90>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8000882:	dcd3      	bgt.n	800082c <TaskECHO+0xc>
	  {
		  //Pin that goes to the tesla
		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);
 8000884:	2201      	movs	r2, #1
 8000886:	2110      	movs	r1, #16
 8000888:	480a      	ldr	r0, [pc, #40]	; (80008b4 <TaskECHO+0x94>)
 800088a:	f000 fcd7 	bl	800123c <HAL_GPIO_WritePin>
		  //Led check
		  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_1,GPIO_PIN_SET);
 800088e:	2201      	movs	r2, #1
 8000890:	2102      	movs	r1, #2
 8000892:	4809      	ldr	r0, [pc, #36]	; (80008b8 <TaskECHO+0x98>)
 8000894:	f000 fcd2 	bl	800123c <HAL_GPIO_WritePin>
		  capt=1;
 8000898:	4b08      	ldr	r3, [pc, #32]	; (80008bc <TaskECHO+0x9c>)
 800089a:	2201      	movs	r2, #1
 800089c:	601a      	str	r2, [r3, #0]
	  while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0)==0);
 800089e:	e7c5      	b.n	800082c <TaskECHO+0xc>
 80008a0:	5c28f5c3 	.word	0x5c28f5c3
 80008a4:	3fc5c28f 	.word	0x3fc5c28f
 80008a8:	58020000 	.word	0x58020000
 80008ac:	240000e0 	.word	0x240000e0
 80008b0:	2400013c 	.word	0x2400013c
 80008b4:	58020400 	.word	0x58020400
 80008b8:	58021000 	.word	0x58021000
 80008bc:	24000140 	.word	0x24000140

080008c0 <TaskButton>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TaskButton */
void TaskButton(void *argument)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b084      	sub	sp, #16
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TaskButton */
  /* Infinite loop */
	int appui=0;
 80008c8:	2300      	movs	r3, #0
 80008ca:	60fb      	str	r3, [r7, #12]
  for(;;)
  {
	 if (HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==1 && appui==0)
 80008cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008d0:	4815      	ldr	r0, [pc, #84]	; (8000928 <TaskButton+0x68>)
 80008d2:	f000 fc9b 	bl	800120c <HAL_GPIO_ReadPin>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b01      	cmp	r3, #1
 80008da:	d117      	bne.n	800090c <TaskButton+0x4c>
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d114      	bne.n	800090c <TaskButton+0x4c>
	 {
	     appui = 1;
 80008e2:	2301      	movs	r3, #1
 80008e4:	60fb      	str	r3, [r7, #12]
	     HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_RESET);
 80008e6:	2200      	movs	r2, #0
 80008e8:	2110      	movs	r1, #16
 80008ea:	4810      	ldr	r0, [pc, #64]	; (800092c <TaskButton+0x6c>)
 80008ec:	f000 fca6 	bl	800123c <HAL_GPIO_WritePin>
	     HAL_GPIO_WritePin(GPIOE,GPIO_PIN_1,GPIO_PIN_RESET);
 80008f0:	2200      	movs	r2, #0
 80008f2:	2102      	movs	r1, #2
 80008f4:	480e      	ldr	r0, [pc, #56]	; (8000930 <TaskButton+0x70>)
 80008f6:	f000 fca1 	bl	800123c <HAL_GPIO_WritePin>
	     HAL_Delay(10000);
 80008fa:	f242 7010 	movw	r0, #10000	; 0x2710
 80008fe:	f000 f9cd 	bl	8000c9c <HAL_Delay>
	     HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);
 8000902:	2201      	movs	r2, #1
 8000904:	2110      	movs	r1, #16
 8000906:	4809      	ldr	r0, [pc, #36]	; (800092c <TaskButton+0x6c>)
 8000908:	f000 fc98 	bl	800123c <HAL_GPIO_WritePin>



	 }
	 if ((HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==0) && (appui==1))
 800090c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000910:	4805      	ldr	r0, [pc, #20]	; (8000928 <TaskButton+0x68>)
 8000912:	f000 fc7b 	bl	800120c <HAL_GPIO_ReadPin>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d1d7      	bne.n	80008cc <TaskButton+0xc>
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	2b01      	cmp	r3, #1
 8000920:	d1d4      	bne.n	80008cc <TaskButton+0xc>
	 {
	 	appui=0;
 8000922:	2300      	movs	r3, #0
 8000924:	60fb      	str	r3, [r7, #12]
	 if (HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==1 && appui==0)
 8000926:	e7d1      	b.n	80008cc <TaskButton+0xc>
 8000928:	58020800 	.word	0x58020800
 800092c:	58020400 	.word	0x58020400
 8000930:	58021000 	.word	0x58021000

08000934 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000938:	b672      	cpsid	i
}
 800093a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800093c:	e7fe      	b.n	800093c <Error_Handler+0x8>
	...

08000940 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000946:	4b0c      	ldr	r3, [pc, #48]	; (8000978 <HAL_MspInit+0x38>)
 8000948:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800094c:	4a0a      	ldr	r2, [pc, #40]	; (8000978 <HAL_MspInit+0x38>)
 800094e:	f043 0302 	orr.w	r3, r3, #2
 8000952:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000956:	4b08      	ldr	r3, [pc, #32]	; (8000978 <HAL_MspInit+0x38>)
 8000958:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800095c:	f003 0302 	and.w	r3, r3, #2
 8000960:	607b      	str	r3, [r7, #4]
 8000962:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000964:	2200      	movs	r2, #0
 8000966:	210f      	movs	r1, #15
 8000968:	f06f 0001 	mvn.w	r0, #1
 800096c:	f000 fa77 	bl	8000e5e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000970:	bf00      	nop
 8000972:	3708      	adds	r7, #8
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	58024400 	.word	0x58024400

0800097c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800097c:	b480      	push	{r7}
 800097e:	b085      	sub	sp, #20
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a16      	ldr	r2, [pc, #88]	; (80009e4 <HAL_TIM_Base_MspInit+0x68>)
 800098a:	4293      	cmp	r3, r2
 800098c:	d10f      	bne.n	80009ae <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800098e:	4b16      	ldr	r3, [pc, #88]	; (80009e8 <HAL_TIM_Base_MspInit+0x6c>)
 8000990:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8000994:	4a14      	ldr	r2, [pc, #80]	; (80009e8 <HAL_TIM_Base_MspInit+0x6c>)
 8000996:	f043 0301 	orr.w	r3, r3, #1
 800099a:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 800099e:	4b12      	ldr	r3, [pc, #72]	; (80009e8 <HAL_TIM_Base_MspInit+0x6c>)
 80009a0:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80009a4:	f003 0301 	and.w	r3, r3, #1
 80009a8:	60fb      	str	r3, [r7, #12]
 80009aa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80009ac:	e013      	b.n	80009d6 <HAL_TIM_Base_MspInit+0x5a>
  else if(htim_base->Instance==TIM2)
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80009b6:	d10e      	bne.n	80009d6 <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80009b8:	4b0b      	ldr	r3, [pc, #44]	; (80009e8 <HAL_TIM_Base_MspInit+0x6c>)
 80009ba:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80009be:	4a0a      	ldr	r2, [pc, #40]	; (80009e8 <HAL_TIM_Base_MspInit+0x6c>)
 80009c0:	f043 0301 	orr.w	r3, r3, #1
 80009c4:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80009c8:	4b07      	ldr	r3, [pc, #28]	; (80009e8 <HAL_TIM_Base_MspInit+0x6c>)
 80009ca:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80009ce:	f003 0301 	and.w	r3, r3, #1
 80009d2:	60bb      	str	r3, [r7, #8]
 80009d4:	68bb      	ldr	r3, [r7, #8]
}
 80009d6:	bf00      	nop
 80009d8:	3714      	adds	r7, #20
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop
 80009e4:	40010000 	.word	0x40010000
 80009e8:	58024400 	.word	0x58024400

080009ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009f0:	e7fe      	b.n	80009f0 <NMI_Handler+0x4>

080009f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009f2:	b480      	push	{r7}
 80009f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009f6:	e7fe      	b.n	80009f6 <HardFault_Handler+0x4>

080009f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009fc:	e7fe      	b.n	80009fc <MemManage_Handler+0x4>

080009fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009fe:	b480      	push	{r7}
 8000a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a02:	e7fe      	b.n	8000a02 <BusFault_Handler+0x4>

08000a04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a08:	e7fe      	b.n	8000a08 <UsageFault_Handler+0x4>

08000a0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a0a:	b480      	push	{r7}
 8000a0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a0e:	bf00      	nop
 8000a10:	46bd      	mov	sp, r7
 8000a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a16:	4770      	bx	lr

08000a18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a1c:	f000 f91e 	bl	8000c5c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000a20:	f003 fc82 	bl	8004328 <xTaskGetSchedulerState>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b01      	cmp	r3, #1
 8000a28:	d001      	beq.n	8000a2e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000a2a:	f004 fa6d 	bl	8004f08 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
	...

08000a34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a38:	4b32      	ldr	r3, [pc, #200]	; (8000b04 <SystemInit+0xd0>)
 8000a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a3e:	4a31      	ldr	r2, [pc, #196]	; (8000b04 <SystemInit+0xd0>)
 8000a40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a48:	4b2f      	ldr	r3, [pc, #188]	; (8000b08 <SystemInit+0xd4>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	f003 030f 	and.w	r3, r3, #15
 8000a50:	2b02      	cmp	r3, #2
 8000a52:	d807      	bhi.n	8000a64 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000a54:	4b2c      	ldr	r3, [pc, #176]	; (8000b08 <SystemInit+0xd4>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	f023 030f 	bic.w	r3, r3, #15
 8000a5c:	4a2a      	ldr	r2, [pc, #168]	; (8000b08 <SystemInit+0xd4>)
 8000a5e:	f043 0303 	orr.w	r3, r3, #3
 8000a62:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000a64:	4b29      	ldr	r3, [pc, #164]	; (8000b0c <SystemInit+0xd8>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a28      	ldr	r2, [pc, #160]	; (8000b0c <SystemInit+0xd8>)
 8000a6a:	f043 0301 	orr.w	r3, r3, #1
 8000a6e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000a70:	4b26      	ldr	r3, [pc, #152]	; (8000b0c <SystemInit+0xd8>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000a76:	4b25      	ldr	r3, [pc, #148]	; (8000b0c <SystemInit+0xd8>)
 8000a78:	681a      	ldr	r2, [r3, #0]
 8000a7a:	4924      	ldr	r1, [pc, #144]	; (8000b0c <SystemInit+0xd8>)
 8000a7c:	4b24      	ldr	r3, [pc, #144]	; (8000b10 <SystemInit+0xdc>)
 8000a7e:	4013      	ands	r3, r2
 8000a80:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a82:	4b21      	ldr	r3, [pc, #132]	; (8000b08 <SystemInit+0xd4>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	f003 030c 	and.w	r3, r3, #12
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d007      	beq.n	8000a9e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000a8e:	4b1e      	ldr	r3, [pc, #120]	; (8000b08 <SystemInit+0xd4>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	f023 030f 	bic.w	r3, r3, #15
 8000a96:	4a1c      	ldr	r2, [pc, #112]	; (8000b08 <SystemInit+0xd4>)
 8000a98:	f043 0303 	orr.w	r3, r3, #3
 8000a9c:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000a9e:	4b1b      	ldr	r3, [pc, #108]	; (8000b0c <SystemInit+0xd8>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000aa4:	4b19      	ldr	r3, [pc, #100]	; (8000b0c <SystemInit+0xd8>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000aaa:	4b18      	ldr	r3, [pc, #96]	; (8000b0c <SystemInit+0xd8>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000ab0:	4b16      	ldr	r3, [pc, #88]	; (8000b0c <SystemInit+0xd8>)
 8000ab2:	4a18      	ldr	r2, [pc, #96]	; (8000b14 <SystemInit+0xe0>)
 8000ab4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000ab6:	4b15      	ldr	r3, [pc, #84]	; (8000b0c <SystemInit+0xd8>)
 8000ab8:	4a17      	ldr	r2, [pc, #92]	; (8000b18 <SystemInit+0xe4>)
 8000aba:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000abc:	4b13      	ldr	r3, [pc, #76]	; (8000b0c <SystemInit+0xd8>)
 8000abe:	4a17      	ldr	r2, [pc, #92]	; (8000b1c <SystemInit+0xe8>)
 8000ac0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000ac2:	4b12      	ldr	r3, [pc, #72]	; (8000b0c <SystemInit+0xd8>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000ac8:	4b10      	ldr	r3, [pc, #64]	; (8000b0c <SystemInit+0xd8>)
 8000aca:	4a14      	ldr	r2, [pc, #80]	; (8000b1c <SystemInit+0xe8>)
 8000acc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000ace:	4b0f      	ldr	r3, [pc, #60]	; (8000b0c <SystemInit+0xd8>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000ad4:	4b0d      	ldr	r3, [pc, #52]	; (8000b0c <SystemInit+0xd8>)
 8000ad6:	4a11      	ldr	r2, [pc, #68]	; (8000b1c <SystemInit+0xe8>)
 8000ad8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000ada:	4b0c      	ldr	r3, [pc, #48]	; (8000b0c <SystemInit+0xd8>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000ae0:	4b0a      	ldr	r3, [pc, #40]	; (8000b0c <SystemInit+0xd8>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a09      	ldr	r2, [pc, #36]	; (8000b0c <SystemInit+0xd8>)
 8000ae6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000aea:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000aec:	4b07      	ldr	r3, [pc, #28]	; (8000b0c <SystemInit+0xd8>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000af2:	4b0b      	ldr	r3, [pc, #44]	; (8000b20 <SystemInit+0xec>)
 8000af4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000af8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000afa:	bf00      	nop
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr
 8000b04:	e000ed00 	.word	0xe000ed00
 8000b08:	52002000 	.word	0x52002000
 8000b0c:	58024400 	.word	0x58024400
 8000b10:	eaf6ed7f 	.word	0xeaf6ed7f
 8000b14:	02020200 	.word	0x02020200
 8000b18:	01ff0000 	.word	0x01ff0000
 8000b1c:	01010280 	.word	0x01010280
 8000b20:	52004000 	.word	0x52004000

08000b24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b5c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b28:	f7ff ff84 	bl	8000a34 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b2c:	480c      	ldr	r0, [pc, #48]	; (8000b60 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b2e:	490d      	ldr	r1, [pc, #52]	; (8000b64 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b30:	4a0d      	ldr	r2, [pc, #52]	; (8000b68 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b34:	e002      	b.n	8000b3c <LoopCopyDataInit>

08000b36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b3a:	3304      	adds	r3, #4

08000b3c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8000b3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b40:	d3f9      	bcc.n	8000b36 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b42:	4a0a      	ldr	r2, [pc, #40]	; (8000b6c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b44:	4c0a      	ldr	r4, [pc, #40]	; (8000b70 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b48:	e001      	b.n	8000b4e <LoopFillZerobss>

08000b4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b4c:	3204      	adds	r2, #4

08000b4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b50:	d3fb      	bcc.n	8000b4a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000b52:	f004 fc53 	bl	80053fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b56:	f7ff fbcb 	bl	80002f0 <main>
  bx  lr
 8000b5a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b5c:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8000b60:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000b64:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 8000b68:	0800575c 	.word	0x0800575c
  ldr r2, =_sbss
 8000b6c:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 8000b70:	24004b60 	.word	0x24004b60

08000b74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b74:	e7fe      	b.n	8000b74 <ADC_IRQHandler>
	...

08000b78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b7e:	2003      	movs	r0, #3
 8000b80:	f000 f962 	bl	8000e48 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8000b84:	f001 f988 	bl	8001e98 <HAL_RCC_GetSysClockFreq>
 8000b88:	4602      	mov	r2, r0
 8000b8a:	4b15      	ldr	r3, [pc, #84]	; (8000be0 <HAL_Init+0x68>)
 8000b8c:	699b      	ldr	r3, [r3, #24]
 8000b8e:	0a1b      	lsrs	r3, r3, #8
 8000b90:	f003 030f 	and.w	r3, r3, #15
 8000b94:	4913      	ldr	r1, [pc, #76]	; (8000be4 <HAL_Init+0x6c>)
 8000b96:	5ccb      	ldrb	r3, [r1, r3]
 8000b98:	f003 031f 	and.w	r3, r3, #31
 8000b9c:	fa22 f303 	lsr.w	r3, r2, r3
 8000ba0:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8000ba2:	4b0f      	ldr	r3, [pc, #60]	; (8000be0 <HAL_Init+0x68>)
 8000ba4:	699b      	ldr	r3, [r3, #24]
 8000ba6:	f003 030f 	and.w	r3, r3, #15
 8000baa:	4a0e      	ldr	r2, [pc, #56]	; (8000be4 <HAL_Init+0x6c>)
 8000bac:	5cd3      	ldrb	r3, [r2, r3]
 8000bae:	f003 031f 	and.w	r3, r3, #31
 8000bb2:	687a      	ldr	r2, [r7, #4]
 8000bb4:	fa22 f303 	lsr.w	r3, r2, r3
 8000bb8:	4a0b      	ldr	r2, [pc, #44]	; (8000be8 <HAL_Init+0x70>)
 8000bba:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000bbc:	4a0b      	ldr	r2, [pc, #44]	; (8000bec <HAL_Init+0x74>)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bc2:	200f      	movs	r0, #15
 8000bc4:	f000 f814 	bl	8000bf0 <HAL_InitTick>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	e002      	b.n	8000bd8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000bd2:	f7ff feb5 	bl	8000940 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bd6:	2300      	movs	r3, #0
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	3708      	adds	r7, #8
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	58024400 	.word	0x58024400
 8000be4:	080056e4 	.word	0x080056e4
 8000be8:	24000004 	.word	0x24000004
 8000bec:	24000000 	.word	0x24000000

08000bf0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000bf8:	4b15      	ldr	r3, [pc, #84]	; (8000c50 <HAL_InitTick+0x60>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d101      	bne.n	8000c04 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000c00:	2301      	movs	r3, #1
 8000c02:	e021      	b.n	8000c48 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000c04:	4b13      	ldr	r3, [pc, #76]	; (8000c54 <HAL_InitTick+0x64>)
 8000c06:	681a      	ldr	r2, [r3, #0]
 8000c08:	4b11      	ldr	r3, [pc, #68]	; (8000c50 <HAL_InitTick+0x60>)
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c12:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c16:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f000 f939 	bl	8000e92 <HAL_SYSTICK_Config>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000c26:	2301      	movs	r3, #1
 8000c28:	e00e      	b.n	8000c48 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	2b0f      	cmp	r3, #15
 8000c2e:	d80a      	bhi.n	8000c46 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c30:	2200      	movs	r2, #0
 8000c32:	6879      	ldr	r1, [r7, #4]
 8000c34:	f04f 30ff 	mov.w	r0, #4294967295
 8000c38:	f000 f911 	bl	8000e5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c3c:	4a06      	ldr	r2, [pc, #24]	; (8000c58 <HAL_InitTick+0x68>)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c42:	2300      	movs	r3, #0
 8000c44:	e000      	b.n	8000c48 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000c46:	2301      	movs	r3, #1
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	3708      	adds	r7, #8
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	2400000c 	.word	0x2400000c
 8000c54:	24000000 	.word	0x24000000
 8000c58:	24000008 	.word	0x24000008

08000c5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c60:	4b06      	ldr	r3, [pc, #24]	; (8000c7c <HAL_IncTick+0x20>)
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	461a      	mov	r2, r3
 8000c66:	4b06      	ldr	r3, [pc, #24]	; (8000c80 <HAL_IncTick+0x24>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	4413      	add	r3, r2
 8000c6c:	4a04      	ldr	r2, [pc, #16]	; (8000c80 <HAL_IncTick+0x24>)
 8000c6e:	6013      	str	r3, [r2, #0]
}
 8000c70:	bf00      	nop
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	2400000c 	.word	0x2400000c
 8000c80:	24000144 	.word	0x24000144

08000c84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  return uwTick;
 8000c88:	4b03      	ldr	r3, [pc, #12]	; (8000c98 <HAL_GetTick+0x14>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	24000144 	.word	0x24000144

08000c9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b084      	sub	sp, #16
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ca4:	f7ff ffee 	bl	8000c84 <HAL_GetTick>
 8000ca8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cb4:	d005      	beq.n	8000cc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cb6:	4b0a      	ldr	r3, [pc, #40]	; (8000ce0 <HAL_Delay+0x44>)
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	461a      	mov	r2, r3
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	4413      	add	r3, r2
 8000cc0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cc2:	bf00      	nop
 8000cc4:	f7ff ffde 	bl	8000c84 <HAL_GetTick>
 8000cc8:	4602      	mov	r2, r0
 8000cca:	68bb      	ldr	r3, [r7, #8]
 8000ccc:	1ad3      	subs	r3, r2, r3
 8000cce:	68fa      	ldr	r2, [r7, #12]
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	d8f7      	bhi.n	8000cc4 <HAL_Delay+0x28>
  {
  }
}
 8000cd4:	bf00      	nop
 8000cd6:	bf00      	nop
 8000cd8:	3710      	adds	r7, #16
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	2400000c 	.word	0x2400000c

08000ce4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b085      	sub	sp, #20
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	f003 0307 	and.w	r3, r3, #7
 8000cf2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cf4:	4b0b      	ldr	r3, [pc, #44]	; (8000d24 <__NVIC_SetPriorityGrouping+0x40>)
 8000cf6:	68db      	ldr	r3, [r3, #12]
 8000cf8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cfa:	68ba      	ldr	r2, [r7, #8]
 8000cfc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d00:	4013      	ands	r3, r2
 8000d02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d08:	68bb      	ldr	r3, [r7, #8]
 8000d0a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000d0c:	4b06      	ldr	r3, [pc, #24]	; (8000d28 <__NVIC_SetPriorityGrouping+0x44>)
 8000d0e:	4313      	orrs	r3, r2
 8000d10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d12:	4a04      	ldr	r2, [pc, #16]	; (8000d24 <__NVIC_SetPriorityGrouping+0x40>)
 8000d14:	68bb      	ldr	r3, [r7, #8]
 8000d16:	60d3      	str	r3, [r2, #12]
}
 8000d18:	bf00      	nop
 8000d1a:	3714      	adds	r7, #20
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr
 8000d24:	e000ed00 	.word	0xe000ed00
 8000d28:	05fa0000 	.word	0x05fa0000

08000d2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d30:	4b04      	ldr	r3, [pc, #16]	; (8000d44 <__NVIC_GetPriorityGrouping+0x18>)
 8000d32:	68db      	ldr	r3, [r3, #12]
 8000d34:	0a1b      	lsrs	r3, r3, #8
 8000d36:	f003 0307 	and.w	r3, r3, #7
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr
 8000d44:	e000ed00 	.word	0xe000ed00

08000d48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	4603      	mov	r3, r0
 8000d50:	6039      	str	r1, [r7, #0]
 8000d52:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000d54:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	db0a      	blt.n	8000d72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	b2da      	uxtb	r2, r3
 8000d60:	490c      	ldr	r1, [pc, #48]	; (8000d94 <__NVIC_SetPriority+0x4c>)
 8000d62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d66:	0112      	lsls	r2, r2, #4
 8000d68:	b2d2      	uxtb	r2, r2
 8000d6a:	440b      	add	r3, r1
 8000d6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d70:	e00a      	b.n	8000d88 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	b2da      	uxtb	r2, r3
 8000d76:	4908      	ldr	r1, [pc, #32]	; (8000d98 <__NVIC_SetPriority+0x50>)
 8000d78:	88fb      	ldrh	r3, [r7, #6]
 8000d7a:	f003 030f 	and.w	r3, r3, #15
 8000d7e:	3b04      	subs	r3, #4
 8000d80:	0112      	lsls	r2, r2, #4
 8000d82:	b2d2      	uxtb	r2, r2
 8000d84:	440b      	add	r3, r1
 8000d86:	761a      	strb	r2, [r3, #24]
}
 8000d88:	bf00      	nop
 8000d8a:	370c      	adds	r7, #12
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr
 8000d94:	e000e100 	.word	0xe000e100
 8000d98:	e000ed00 	.word	0xe000ed00

08000d9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b089      	sub	sp, #36	; 0x24
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	60f8      	str	r0, [r7, #12]
 8000da4:	60b9      	str	r1, [r7, #8]
 8000da6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	f003 0307 	and.w	r3, r3, #7
 8000dae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000db0:	69fb      	ldr	r3, [r7, #28]
 8000db2:	f1c3 0307 	rsb	r3, r3, #7
 8000db6:	2b04      	cmp	r3, #4
 8000db8:	bf28      	it	cs
 8000dba:	2304      	movcs	r3, #4
 8000dbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dbe:	69fb      	ldr	r3, [r7, #28]
 8000dc0:	3304      	adds	r3, #4
 8000dc2:	2b06      	cmp	r3, #6
 8000dc4:	d902      	bls.n	8000dcc <NVIC_EncodePriority+0x30>
 8000dc6:	69fb      	ldr	r3, [r7, #28]
 8000dc8:	3b03      	subs	r3, #3
 8000dca:	e000      	b.n	8000dce <NVIC_EncodePriority+0x32>
 8000dcc:	2300      	movs	r3, #0
 8000dce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dd0:	f04f 32ff 	mov.w	r2, #4294967295
 8000dd4:	69bb      	ldr	r3, [r7, #24]
 8000dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dda:	43da      	mvns	r2, r3
 8000ddc:	68bb      	ldr	r3, [r7, #8]
 8000dde:	401a      	ands	r2, r3
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000de4:	f04f 31ff 	mov.w	r1, #4294967295
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	fa01 f303 	lsl.w	r3, r1, r3
 8000dee:	43d9      	mvns	r1, r3
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000df4:	4313      	orrs	r3, r2
         );
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	3724      	adds	r7, #36	; 0x24
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
	...

08000e04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	3b01      	subs	r3, #1
 8000e10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e14:	d301      	bcc.n	8000e1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e16:	2301      	movs	r3, #1
 8000e18:	e00f      	b.n	8000e3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e1a:	4a0a      	ldr	r2, [pc, #40]	; (8000e44 <SysTick_Config+0x40>)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	3b01      	subs	r3, #1
 8000e20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e22:	210f      	movs	r1, #15
 8000e24:	f04f 30ff 	mov.w	r0, #4294967295
 8000e28:	f7ff ff8e 	bl	8000d48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e2c:	4b05      	ldr	r3, [pc, #20]	; (8000e44 <SysTick_Config+0x40>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e32:	4b04      	ldr	r3, [pc, #16]	; (8000e44 <SysTick_Config+0x40>)
 8000e34:	2207      	movs	r2, #7
 8000e36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e38:	2300      	movs	r3, #0
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	3708      	adds	r7, #8
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	e000e010 	.word	0xe000e010

08000e48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e50:	6878      	ldr	r0, [r7, #4]
 8000e52:	f7ff ff47 	bl	8000ce4 <__NVIC_SetPriorityGrouping>
}
 8000e56:	bf00      	nop
 8000e58:	3708      	adds	r7, #8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}

08000e5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e5e:	b580      	push	{r7, lr}
 8000e60:	b086      	sub	sp, #24
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	4603      	mov	r3, r0
 8000e66:	60b9      	str	r1, [r7, #8]
 8000e68:	607a      	str	r2, [r7, #4]
 8000e6a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e6c:	f7ff ff5e 	bl	8000d2c <__NVIC_GetPriorityGrouping>
 8000e70:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e72:	687a      	ldr	r2, [r7, #4]
 8000e74:	68b9      	ldr	r1, [r7, #8]
 8000e76:	6978      	ldr	r0, [r7, #20]
 8000e78:	f7ff ff90 	bl	8000d9c <NVIC_EncodePriority>
 8000e7c:	4602      	mov	r2, r0
 8000e7e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000e82:	4611      	mov	r1, r2
 8000e84:	4618      	mov	r0, r3
 8000e86:	f7ff ff5f 	bl	8000d48 <__NVIC_SetPriority>
}
 8000e8a:	bf00      	nop
 8000e8c:	3718      	adds	r7, #24
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}

08000e92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e92:	b580      	push	{r7, lr}
 8000e94:	b082      	sub	sp, #8
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e9a:	6878      	ldr	r0, [r7, #4]
 8000e9c:	f7ff ffb2 	bl	8000e04 <SysTick_Config>
 8000ea0:	4603      	mov	r3, r0
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3708      	adds	r7, #8
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
	...

08000eac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b089      	sub	sp, #36	; 0x24
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
 8000eb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000eba:	4b89      	ldr	r3, [pc, #548]	; (80010e0 <HAL_GPIO_Init+0x234>)
 8000ebc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000ebe:	e194      	b.n	80011ea <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	2101      	movs	r1, #1
 8000ec6:	69fb      	ldr	r3, [r7, #28]
 8000ec8:	fa01 f303 	lsl.w	r3, r1, r3
 8000ecc:	4013      	ands	r3, r2
 8000ece:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000ed0:	693b      	ldr	r3, [r7, #16]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	f000 8186 	beq.w	80011e4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	f003 0303 	and.w	r3, r3, #3
 8000ee0:	2b01      	cmp	r3, #1
 8000ee2:	d005      	beq.n	8000ef0 <HAL_GPIO_Init+0x44>
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	f003 0303 	and.w	r3, r3, #3
 8000eec:	2b02      	cmp	r3, #2
 8000eee:	d130      	bne.n	8000f52 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	689b      	ldr	r3, [r3, #8]
 8000ef4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	005b      	lsls	r3, r3, #1
 8000efa:	2203      	movs	r2, #3
 8000efc:	fa02 f303 	lsl.w	r3, r2, r3
 8000f00:	43db      	mvns	r3, r3
 8000f02:	69ba      	ldr	r2, [r7, #24]
 8000f04:	4013      	ands	r3, r2
 8000f06:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	68da      	ldr	r2, [r3, #12]
 8000f0c:	69fb      	ldr	r3, [r7, #28]
 8000f0e:	005b      	lsls	r3, r3, #1
 8000f10:	fa02 f303 	lsl.w	r3, r2, r3
 8000f14:	69ba      	ldr	r2, [r7, #24]
 8000f16:	4313      	orrs	r3, r2
 8000f18:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	69ba      	ldr	r2, [r7, #24]
 8000f1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f26:	2201      	movs	r2, #1
 8000f28:	69fb      	ldr	r3, [r7, #28]
 8000f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2e:	43db      	mvns	r3, r3
 8000f30:	69ba      	ldr	r2, [r7, #24]
 8000f32:	4013      	ands	r3, r2
 8000f34:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	091b      	lsrs	r3, r3, #4
 8000f3c:	f003 0201 	and.w	r2, r3, #1
 8000f40:	69fb      	ldr	r3, [r7, #28]
 8000f42:	fa02 f303 	lsl.w	r3, r2, r3
 8000f46:	69ba      	ldr	r2, [r7, #24]
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	69ba      	ldr	r2, [r7, #24]
 8000f50:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	f003 0303 	and.w	r3, r3, #3
 8000f5a:	2b03      	cmp	r3, #3
 8000f5c:	d017      	beq.n	8000f8e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	68db      	ldr	r3, [r3, #12]
 8000f62:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f64:	69fb      	ldr	r3, [r7, #28]
 8000f66:	005b      	lsls	r3, r3, #1
 8000f68:	2203      	movs	r2, #3
 8000f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6e:	43db      	mvns	r3, r3
 8000f70:	69ba      	ldr	r2, [r7, #24]
 8000f72:	4013      	ands	r3, r2
 8000f74:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	689a      	ldr	r2, [r3, #8]
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	005b      	lsls	r3, r3, #1
 8000f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f82:	69ba      	ldr	r2, [r7, #24]
 8000f84:	4313      	orrs	r3, r2
 8000f86:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	69ba      	ldr	r2, [r7, #24]
 8000f8c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	f003 0303 	and.w	r3, r3, #3
 8000f96:	2b02      	cmp	r3, #2
 8000f98:	d123      	bne.n	8000fe2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	08da      	lsrs	r2, r3, #3
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	3208      	adds	r2, #8
 8000fa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000fa8:	69fb      	ldr	r3, [r7, #28]
 8000faa:	f003 0307 	and.w	r3, r3, #7
 8000fae:	009b      	lsls	r3, r3, #2
 8000fb0:	220f      	movs	r2, #15
 8000fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb6:	43db      	mvns	r3, r3
 8000fb8:	69ba      	ldr	r2, [r7, #24]
 8000fba:	4013      	ands	r3, r2
 8000fbc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	691a      	ldr	r2, [r3, #16]
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	f003 0307 	and.w	r3, r3, #7
 8000fc8:	009b      	lsls	r3, r3, #2
 8000fca:	fa02 f303 	lsl.w	r3, r2, r3
 8000fce:	69ba      	ldr	r2, [r7, #24]
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	08da      	lsrs	r2, r3, #3
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	3208      	adds	r2, #8
 8000fdc:	69b9      	ldr	r1, [r7, #24]
 8000fde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000fe8:	69fb      	ldr	r3, [r7, #28]
 8000fea:	005b      	lsls	r3, r3, #1
 8000fec:	2203      	movs	r2, #3
 8000fee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff2:	43db      	mvns	r3, r3
 8000ff4:	69ba      	ldr	r2, [r7, #24]
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	f003 0203 	and.w	r2, r3, #3
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	005b      	lsls	r3, r3, #1
 8001006:	fa02 f303 	lsl.w	r3, r2, r3
 800100a:	69ba      	ldr	r2, [r7, #24]
 800100c:	4313      	orrs	r3, r2
 800100e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	69ba      	ldr	r2, [r7, #24]
 8001014:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800101e:	2b00      	cmp	r3, #0
 8001020:	f000 80e0 	beq.w	80011e4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001024:	4b2f      	ldr	r3, [pc, #188]	; (80010e4 <HAL_GPIO_Init+0x238>)
 8001026:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800102a:	4a2e      	ldr	r2, [pc, #184]	; (80010e4 <HAL_GPIO_Init+0x238>)
 800102c:	f043 0302 	orr.w	r3, r3, #2
 8001030:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8001034:	4b2b      	ldr	r3, [pc, #172]	; (80010e4 <HAL_GPIO_Init+0x238>)
 8001036:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800103a:	f003 0302 	and.w	r3, r3, #2
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001042:	4a29      	ldr	r2, [pc, #164]	; (80010e8 <HAL_GPIO_Init+0x23c>)
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	089b      	lsrs	r3, r3, #2
 8001048:	3302      	adds	r3, #2
 800104a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800104e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001050:	69fb      	ldr	r3, [r7, #28]
 8001052:	f003 0303 	and.w	r3, r3, #3
 8001056:	009b      	lsls	r3, r3, #2
 8001058:	220f      	movs	r2, #15
 800105a:	fa02 f303 	lsl.w	r3, r2, r3
 800105e:	43db      	mvns	r3, r3
 8001060:	69ba      	ldr	r2, [r7, #24]
 8001062:	4013      	ands	r3, r2
 8001064:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4a20      	ldr	r2, [pc, #128]	; (80010ec <HAL_GPIO_Init+0x240>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d052      	beq.n	8001114 <HAL_GPIO_Init+0x268>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	4a1f      	ldr	r2, [pc, #124]	; (80010f0 <HAL_GPIO_Init+0x244>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d031      	beq.n	80010da <HAL_GPIO_Init+0x22e>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4a1e      	ldr	r2, [pc, #120]	; (80010f4 <HAL_GPIO_Init+0x248>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d02b      	beq.n	80010d6 <HAL_GPIO_Init+0x22a>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4a1d      	ldr	r2, [pc, #116]	; (80010f8 <HAL_GPIO_Init+0x24c>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d025      	beq.n	80010d2 <HAL_GPIO_Init+0x226>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4a1c      	ldr	r2, [pc, #112]	; (80010fc <HAL_GPIO_Init+0x250>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d01f      	beq.n	80010ce <HAL_GPIO_Init+0x222>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4a1b      	ldr	r2, [pc, #108]	; (8001100 <HAL_GPIO_Init+0x254>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d019      	beq.n	80010ca <HAL_GPIO_Init+0x21e>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4a1a      	ldr	r2, [pc, #104]	; (8001104 <HAL_GPIO_Init+0x258>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d013      	beq.n	80010c6 <HAL_GPIO_Init+0x21a>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4a19      	ldr	r2, [pc, #100]	; (8001108 <HAL_GPIO_Init+0x25c>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d00d      	beq.n	80010c2 <HAL_GPIO_Init+0x216>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4a18      	ldr	r2, [pc, #96]	; (800110c <HAL_GPIO_Init+0x260>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d007      	beq.n	80010be <HAL_GPIO_Init+0x212>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4a17      	ldr	r2, [pc, #92]	; (8001110 <HAL_GPIO_Init+0x264>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d101      	bne.n	80010ba <HAL_GPIO_Init+0x20e>
 80010b6:	2309      	movs	r3, #9
 80010b8:	e02d      	b.n	8001116 <HAL_GPIO_Init+0x26a>
 80010ba:	230a      	movs	r3, #10
 80010bc:	e02b      	b.n	8001116 <HAL_GPIO_Init+0x26a>
 80010be:	2308      	movs	r3, #8
 80010c0:	e029      	b.n	8001116 <HAL_GPIO_Init+0x26a>
 80010c2:	2307      	movs	r3, #7
 80010c4:	e027      	b.n	8001116 <HAL_GPIO_Init+0x26a>
 80010c6:	2306      	movs	r3, #6
 80010c8:	e025      	b.n	8001116 <HAL_GPIO_Init+0x26a>
 80010ca:	2305      	movs	r3, #5
 80010cc:	e023      	b.n	8001116 <HAL_GPIO_Init+0x26a>
 80010ce:	2304      	movs	r3, #4
 80010d0:	e021      	b.n	8001116 <HAL_GPIO_Init+0x26a>
 80010d2:	2303      	movs	r3, #3
 80010d4:	e01f      	b.n	8001116 <HAL_GPIO_Init+0x26a>
 80010d6:	2302      	movs	r3, #2
 80010d8:	e01d      	b.n	8001116 <HAL_GPIO_Init+0x26a>
 80010da:	2301      	movs	r3, #1
 80010dc:	e01b      	b.n	8001116 <HAL_GPIO_Init+0x26a>
 80010de:	bf00      	nop
 80010e0:	58000080 	.word	0x58000080
 80010e4:	58024400 	.word	0x58024400
 80010e8:	58000400 	.word	0x58000400
 80010ec:	58020000 	.word	0x58020000
 80010f0:	58020400 	.word	0x58020400
 80010f4:	58020800 	.word	0x58020800
 80010f8:	58020c00 	.word	0x58020c00
 80010fc:	58021000 	.word	0x58021000
 8001100:	58021400 	.word	0x58021400
 8001104:	58021800 	.word	0x58021800
 8001108:	58021c00 	.word	0x58021c00
 800110c:	58022000 	.word	0x58022000
 8001110:	58022400 	.word	0x58022400
 8001114:	2300      	movs	r3, #0
 8001116:	69fa      	ldr	r2, [r7, #28]
 8001118:	f002 0203 	and.w	r2, r2, #3
 800111c:	0092      	lsls	r2, r2, #2
 800111e:	4093      	lsls	r3, r2
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	4313      	orrs	r3, r2
 8001124:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001126:	4938      	ldr	r1, [pc, #224]	; (8001208 <HAL_GPIO_Init+0x35c>)
 8001128:	69fb      	ldr	r3, [r7, #28]
 800112a:	089b      	lsrs	r3, r3, #2
 800112c:	3302      	adds	r3, #2
 800112e:	69ba      	ldr	r2, [r7, #24]
 8001130:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001134:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	43db      	mvns	r3, r3
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	4013      	ands	r3, r2
 8001144:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800114e:	2b00      	cmp	r3, #0
 8001150:	d003      	beq.n	800115a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001152:	69ba      	ldr	r2, [r7, #24]
 8001154:	693b      	ldr	r3, [r7, #16]
 8001156:	4313      	orrs	r3, r2
 8001158:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800115a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800115e:	69bb      	ldr	r3, [r7, #24]
 8001160:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001162:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	43db      	mvns	r3, r3
 800116e:	69ba      	ldr	r2, [r7, #24]
 8001170:	4013      	ands	r3, r2
 8001172:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800117c:	2b00      	cmp	r3, #0
 800117e:	d003      	beq.n	8001188 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	4313      	orrs	r3, r2
 8001186:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001188:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800118c:	69bb      	ldr	r3, [r7, #24]
 800118e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	43db      	mvns	r3, r3
 800119a:	69ba      	ldr	r2, [r7, #24]
 800119c:	4013      	ands	r3, r2
 800119e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d003      	beq.n	80011b4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	693b      	ldr	r3, [r7, #16]
 80011b0:	4313      	orrs	r3, r2
 80011b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	69ba      	ldr	r2, [r7, #24]
 80011b8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	43db      	mvns	r3, r3
 80011c4:	69ba      	ldr	r2, [r7, #24]
 80011c6:	4013      	ands	r3, r2
 80011c8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d003      	beq.n	80011de <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80011d6:	69ba      	ldr	r2, [r7, #24]
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	4313      	orrs	r3, r2
 80011dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	3301      	adds	r3, #1
 80011e8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	fa22 f303 	lsr.w	r3, r2, r3
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	f47f ae63 	bne.w	8000ec0 <HAL_GPIO_Init+0x14>
  }
}
 80011fa:	bf00      	nop
 80011fc:	bf00      	nop
 80011fe:	3724      	adds	r7, #36	; 0x24
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr
 8001208:	58000400 	.word	0x58000400

0800120c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800120c:	b480      	push	{r7}
 800120e:	b085      	sub	sp, #20
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	460b      	mov	r3, r1
 8001216:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	691a      	ldr	r2, [r3, #16]
 800121c:	887b      	ldrh	r3, [r7, #2]
 800121e:	4013      	ands	r3, r2
 8001220:	2b00      	cmp	r3, #0
 8001222:	d002      	beq.n	800122a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001224:	2301      	movs	r3, #1
 8001226:	73fb      	strb	r3, [r7, #15]
 8001228:	e001      	b.n	800122e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800122a:	2300      	movs	r3, #0
 800122c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800122e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001230:	4618      	mov	r0, r3
 8001232:	3714      	adds	r7, #20
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr

0800123c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	460b      	mov	r3, r1
 8001246:	807b      	strh	r3, [r7, #2]
 8001248:	4613      	mov	r3, r2
 800124a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800124c:	787b      	ldrb	r3, [r7, #1]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d003      	beq.n	800125a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001252:	887a      	ldrh	r2, [r7, #2]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001258:	e003      	b.n	8001262 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800125a:	887b      	ldrh	r3, [r7, #2]
 800125c:	041a      	lsls	r2, r3, #16
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	619a      	str	r2, [r3, #24]
}
 8001262:	bf00      	nop
 8001264:	370c      	adds	r7, #12
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
	...

08001270 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001278:	4b29      	ldr	r3, [pc, #164]	; (8001320 <HAL_PWREx_ConfigSupply+0xb0>)
 800127a:	68db      	ldr	r3, [r3, #12]
 800127c:	f003 0307 	and.w	r3, r3, #7
 8001280:	2b06      	cmp	r3, #6
 8001282:	d00a      	beq.n	800129a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001284:	4b26      	ldr	r3, [pc, #152]	; (8001320 <HAL_PWREx_ConfigSupply+0xb0>)
 8001286:	68db      	ldr	r3, [r3, #12]
 8001288:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800128c:	687a      	ldr	r2, [r7, #4]
 800128e:	429a      	cmp	r2, r3
 8001290:	d001      	beq.n	8001296 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001292:	2301      	movs	r3, #1
 8001294:	e040      	b.n	8001318 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001296:	2300      	movs	r3, #0
 8001298:	e03e      	b.n	8001318 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800129a:	4b21      	ldr	r3, [pc, #132]	; (8001320 <HAL_PWREx_ConfigSupply+0xb0>)
 800129c:	68db      	ldr	r3, [r3, #12]
 800129e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80012a2:	491f      	ldr	r1, [pc, #124]	; (8001320 <HAL_PWREx_ConfigSupply+0xb0>)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	4313      	orrs	r3, r2
 80012a8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80012aa:	f7ff fceb 	bl	8000c84 <HAL_GetTick>
 80012ae:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80012b0:	e009      	b.n	80012c6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80012b2:	f7ff fce7 	bl	8000c84 <HAL_GetTick>
 80012b6:	4602      	mov	r2, r0
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	1ad3      	subs	r3, r2, r3
 80012bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80012c0:	d901      	bls.n	80012c6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80012c2:	2301      	movs	r3, #1
 80012c4:	e028      	b.n	8001318 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80012c6:	4b16      	ldr	r3, [pc, #88]	; (8001320 <HAL_PWREx_ConfigSupply+0xb0>)
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80012ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80012d2:	d1ee      	bne.n	80012b2 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2b1e      	cmp	r3, #30
 80012d8:	d008      	beq.n	80012ec <HAL_PWREx_ConfigSupply+0x7c>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2b2e      	cmp	r3, #46	; 0x2e
 80012de:	d005      	beq.n	80012ec <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2b1d      	cmp	r3, #29
 80012e4:	d002      	beq.n	80012ec <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2b2d      	cmp	r3, #45	; 0x2d
 80012ea:	d114      	bne.n	8001316 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80012ec:	f7ff fcca 	bl	8000c84 <HAL_GetTick>
 80012f0:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80012f2:	e009      	b.n	8001308 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80012f4:	f7ff fcc6 	bl	8000c84 <HAL_GetTick>
 80012f8:	4602      	mov	r2, r0
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001302:	d901      	bls.n	8001308 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001304:	2301      	movs	r3, #1
 8001306:	e007      	b.n	8001318 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001308:	4b05      	ldr	r3, [pc, #20]	; (8001320 <HAL_PWREx_ConfigSupply+0xb0>)
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001310:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001314:	d1ee      	bne.n	80012f4 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001316:	2300      	movs	r3, #0
}
 8001318:	4618      	mov	r0, r3
 800131a:	3710      	adds	r7, #16
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	58024800 	.word	0x58024800

08001324 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b08c      	sub	sp, #48	; 0x30
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d101      	bne.n	8001336 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001332:	2301      	movs	r3, #1
 8001334:	e3f4      	b.n	8001b20 <HAL_RCC_OscConfig+0x7fc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f003 0301 	and.w	r3, r3, #1
 800133e:	2b00      	cmp	r3, #0
 8001340:	f000 80b3 	beq.w	80014aa <HAL_RCC_OscConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001344:	4b95      	ldr	r3, [pc, #596]	; (800159c <HAL_RCC_OscConfig+0x278>)
 8001346:	691b      	ldr	r3, [r3, #16]
 8001348:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800134c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800134e:	4b93      	ldr	r3, [pc, #588]	; (800159c <HAL_RCC_OscConfig+0x278>)
 8001350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001352:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001356:	2b10      	cmp	r3, #16
 8001358:	d007      	beq.n	800136a <HAL_RCC_OscConfig+0x46>
 800135a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800135c:	2b18      	cmp	r3, #24
 800135e:	d112      	bne.n	8001386 <HAL_RCC_OscConfig+0x62>
 8001360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001362:	f003 0303 	and.w	r3, r3, #3
 8001366:	2b02      	cmp	r3, #2
 8001368:	d10d      	bne.n	8001386 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800136a:	4b8c      	ldr	r3, [pc, #560]	; (800159c <HAL_RCC_OscConfig+0x278>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001372:	2b00      	cmp	r3, #0
 8001374:	f000 8098 	beq.w	80014a8 <HAL_RCC_OscConfig+0x184>
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	2b00      	cmp	r3, #0
 800137e:	f040 8093 	bne.w	80014a8 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8001382:	2301      	movs	r3, #1
 8001384:	e3cc      	b.n	8001b20 <HAL_RCC_OscConfig+0x7fc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800138e:	d106      	bne.n	800139e <HAL_RCC_OscConfig+0x7a>
 8001390:	4b82      	ldr	r3, [pc, #520]	; (800159c <HAL_RCC_OscConfig+0x278>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a81      	ldr	r2, [pc, #516]	; (800159c <HAL_RCC_OscConfig+0x278>)
 8001396:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800139a:	6013      	str	r3, [r2, #0]
 800139c:	e058      	b.n	8001450 <HAL_RCC_OscConfig+0x12c>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d112      	bne.n	80013cc <HAL_RCC_OscConfig+0xa8>
 80013a6:	4b7d      	ldr	r3, [pc, #500]	; (800159c <HAL_RCC_OscConfig+0x278>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a7c      	ldr	r2, [pc, #496]	; (800159c <HAL_RCC_OscConfig+0x278>)
 80013ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013b0:	6013      	str	r3, [r2, #0]
 80013b2:	4b7a      	ldr	r3, [pc, #488]	; (800159c <HAL_RCC_OscConfig+0x278>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a79      	ldr	r2, [pc, #484]	; (800159c <HAL_RCC_OscConfig+0x278>)
 80013b8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80013bc:	6013      	str	r3, [r2, #0]
 80013be:	4b77      	ldr	r3, [pc, #476]	; (800159c <HAL_RCC_OscConfig+0x278>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a76      	ldr	r2, [pc, #472]	; (800159c <HAL_RCC_OscConfig+0x278>)
 80013c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013c8:	6013      	str	r3, [r2, #0]
 80013ca:	e041      	b.n	8001450 <HAL_RCC_OscConfig+0x12c>
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013d4:	d112      	bne.n	80013fc <HAL_RCC_OscConfig+0xd8>
 80013d6:	4b71      	ldr	r3, [pc, #452]	; (800159c <HAL_RCC_OscConfig+0x278>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a70      	ldr	r2, [pc, #448]	; (800159c <HAL_RCC_OscConfig+0x278>)
 80013dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013e0:	6013      	str	r3, [r2, #0]
 80013e2:	4b6e      	ldr	r3, [pc, #440]	; (800159c <HAL_RCC_OscConfig+0x278>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a6d      	ldr	r2, [pc, #436]	; (800159c <HAL_RCC_OscConfig+0x278>)
 80013e8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80013ec:	6013      	str	r3, [r2, #0]
 80013ee:	4b6b      	ldr	r3, [pc, #428]	; (800159c <HAL_RCC_OscConfig+0x278>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a6a      	ldr	r2, [pc, #424]	; (800159c <HAL_RCC_OscConfig+0x278>)
 80013f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013f8:	6013      	str	r3, [r2, #0]
 80013fa:	e029      	b.n	8001450 <HAL_RCC_OscConfig+0x12c>
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8001404:	d112      	bne.n	800142c <HAL_RCC_OscConfig+0x108>
 8001406:	4b65      	ldr	r3, [pc, #404]	; (800159c <HAL_RCC_OscConfig+0x278>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a64      	ldr	r2, [pc, #400]	; (800159c <HAL_RCC_OscConfig+0x278>)
 800140c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001410:	6013      	str	r3, [r2, #0]
 8001412:	4b62      	ldr	r3, [pc, #392]	; (800159c <HAL_RCC_OscConfig+0x278>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a61      	ldr	r2, [pc, #388]	; (800159c <HAL_RCC_OscConfig+0x278>)
 8001418:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800141c:	6013      	str	r3, [r2, #0]
 800141e:	4b5f      	ldr	r3, [pc, #380]	; (800159c <HAL_RCC_OscConfig+0x278>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a5e      	ldr	r2, [pc, #376]	; (800159c <HAL_RCC_OscConfig+0x278>)
 8001424:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001428:	6013      	str	r3, [r2, #0]
 800142a:	e011      	b.n	8001450 <HAL_RCC_OscConfig+0x12c>
 800142c:	4b5b      	ldr	r3, [pc, #364]	; (800159c <HAL_RCC_OscConfig+0x278>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a5a      	ldr	r2, [pc, #360]	; (800159c <HAL_RCC_OscConfig+0x278>)
 8001432:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001436:	6013      	str	r3, [r2, #0]
 8001438:	4b58      	ldr	r3, [pc, #352]	; (800159c <HAL_RCC_OscConfig+0x278>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a57      	ldr	r2, [pc, #348]	; (800159c <HAL_RCC_OscConfig+0x278>)
 800143e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001442:	6013      	str	r3, [r2, #0]
 8001444:	4b55      	ldr	r3, [pc, #340]	; (800159c <HAL_RCC_OscConfig+0x278>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a54      	ldr	r2, [pc, #336]	; (800159c <HAL_RCC_OscConfig+0x278>)
 800144a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800144e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d013      	beq.n	8001480 <HAL_RCC_OscConfig+0x15c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001458:	f7ff fc14 	bl	8000c84 <HAL_GetTick>
 800145c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800145e:	e008      	b.n	8001472 <HAL_RCC_OscConfig+0x14e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001460:	f7ff fc10 	bl	8000c84 <HAL_GetTick>
 8001464:	4602      	mov	r2, r0
 8001466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	2b64      	cmp	r3, #100	; 0x64
 800146c:	d901      	bls.n	8001472 <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 800146e:	2303      	movs	r3, #3
 8001470:	e356      	b.n	8001b20 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001472:	4b4a      	ldr	r3, [pc, #296]	; (800159c <HAL_RCC_OscConfig+0x278>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800147a:	2b00      	cmp	r3, #0
 800147c:	d0f0      	beq.n	8001460 <HAL_RCC_OscConfig+0x13c>
 800147e:	e014      	b.n	80014aa <HAL_RCC_OscConfig+0x186>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001480:	f7ff fc00 	bl	8000c84 <HAL_GetTick>
 8001484:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001486:	e008      	b.n	800149a <HAL_RCC_OscConfig+0x176>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001488:	f7ff fbfc 	bl	8000c84 <HAL_GetTick>
 800148c:	4602      	mov	r2, r0
 800148e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	2b64      	cmp	r3, #100	; 0x64
 8001494:	d901      	bls.n	800149a <HAL_RCC_OscConfig+0x176>
          {
            return HAL_TIMEOUT;
 8001496:	2303      	movs	r3, #3
 8001498:	e342      	b.n	8001b20 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800149a:	4b40      	ldr	r3, [pc, #256]	; (800159c <HAL_RCC_OscConfig+0x278>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d1f0      	bne.n	8001488 <HAL_RCC_OscConfig+0x164>
 80014a6:	e000      	b.n	80014aa <HAL_RCC_OscConfig+0x186>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f003 0302 	and.w	r3, r3, #2
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	f000 808d 	beq.w	80015d2 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014b8:	4b38      	ldr	r3, [pc, #224]	; (800159c <HAL_RCC_OscConfig+0x278>)
 80014ba:	691b      	ldr	r3, [r3, #16]
 80014bc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80014c0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80014c2:	4b36      	ldr	r3, [pc, #216]	; (800159c <HAL_RCC_OscConfig+0x278>)
 80014c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014c6:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80014c8:	6a3b      	ldr	r3, [r7, #32]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d007      	beq.n	80014de <HAL_RCC_OscConfig+0x1ba>
 80014ce:	6a3b      	ldr	r3, [r7, #32]
 80014d0:	2b18      	cmp	r3, #24
 80014d2:	d137      	bne.n	8001544 <HAL_RCC_OscConfig+0x220>
 80014d4:	69fb      	ldr	r3, [r7, #28]
 80014d6:	f003 0303 	and.w	r3, r3, #3
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d132      	bne.n	8001544 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014de:	4b2f      	ldr	r3, [pc, #188]	; (800159c <HAL_RCC_OscConfig+0x278>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f003 0304 	and.w	r3, r3, #4
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d005      	beq.n	80014f6 <HAL_RCC_OscConfig+0x1d2>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	68db      	ldr	r3, [r3, #12]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d101      	bne.n	80014f6 <HAL_RCC_OscConfig+0x1d2>
      {
        return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	e314      	b.n	8001b20 <HAL_RCC_OscConfig+0x7fc>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80014f6:	4b29      	ldr	r3, [pc, #164]	; (800159c <HAL_RCC_OscConfig+0x278>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f023 0219 	bic.w	r2, r3, #25
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	68db      	ldr	r3, [r3, #12]
 8001502:	4926      	ldr	r1, [pc, #152]	; (800159c <HAL_RCC_OscConfig+0x278>)
 8001504:	4313      	orrs	r3, r2
 8001506:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001508:	f7ff fbbc 	bl	8000c84 <HAL_GetTick>
 800150c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800150e:	e008      	b.n	8001522 <HAL_RCC_OscConfig+0x1fe>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001510:	f7ff fbb8 	bl	8000c84 <HAL_GetTick>
 8001514:	4602      	mov	r2, r0
 8001516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	2b02      	cmp	r3, #2
 800151c:	d901      	bls.n	8001522 <HAL_RCC_OscConfig+0x1fe>
            {
              return HAL_TIMEOUT;
 800151e:	2303      	movs	r3, #3
 8001520:	e2fe      	b.n	8001b20 <HAL_RCC_OscConfig+0x7fc>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001522:	4b1e      	ldr	r3, [pc, #120]	; (800159c <HAL_RCC_OscConfig+0x278>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f003 0304 	and.w	r3, r3, #4
 800152a:	2b00      	cmp	r3, #0
 800152c:	d0f0      	beq.n	8001510 <HAL_RCC_OscConfig+0x1ec>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800152e:	4b1b      	ldr	r3, [pc, #108]	; (800159c <HAL_RCC_OscConfig+0x278>)
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	691b      	ldr	r3, [r3, #16]
 800153a:	061b      	lsls	r3, r3, #24
 800153c:	4917      	ldr	r1, [pc, #92]	; (800159c <HAL_RCC_OscConfig+0x278>)
 800153e:	4313      	orrs	r3, r2
 8001540:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001542:	e046      	b.n	80015d2 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d029      	beq.n	80015a0 <HAL_RCC_OscConfig+0x27c>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800154c:	4b13      	ldr	r3, [pc, #76]	; (800159c <HAL_RCC_OscConfig+0x278>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f023 0219 	bic.w	r2, r3, #25
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	68db      	ldr	r3, [r3, #12]
 8001558:	4910      	ldr	r1, [pc, #64]	; (800159c <HAL_RCC_OscConfig+0x278>)
 800155a:	4313      	orrs	r3, r2
 800155c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800155e:	f7ff fb91 	bl	8000c84 <HAL_GetTick>
 8001562:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001564:	e008      	b.n	8001578 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001566:	f7ff fb8d 	bl	8000c84 <HAL_GetTick>
 800156a:	4602      	mov	r2, r0
 800156c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156e:	1ad3      	subs	r3, r2, r3
 8001570:	2b02      	cmp	r3, #2
 8001572:	d901      	bls.n	8001578 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8001574:	2303      	movs	r3, #3
 8001576:	e2d3      	b.n	8001b20 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001578:	4b08      	ldr	r3, [pc, #32]	; (800159c <HAL_RCC_OscConfig+0x278>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f003 0304 	and.w	r3, r3, #4
 8001580:	2b00      	cmp	r3, #0
 8001582:	d0f0      	beq.n	8001566 <HAL_RCC_OscConfig+0x242>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001584:	4b05      	ldr	r3, [pc, #20]	; (800159c <HAL_RCC_OscConfig+0x278>)
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	691b      	ldr	r3, [r3, #16]
 8001590:	061b      	lsls	r3, r3, #24
 8001592:	4902      	ldr	r1, [pc, #8]	; (800159c <HAL_RCC_OscConfig+0x278>)
 8001594:	4313      	orrs	r3, r2
 8001596:	604b      	str	r3, [r1, #4]
 8001598:	e01b      	b.n	80015d2 <HAL_RCC_OscConfig+0x2ae>
 800159a:	bf00      	nop
 800159c:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015a0:	4b97      	ldr	r3, [pc, #604]	; (8001800 <HAL_RCC_OscConfig+0x4dc>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a96      	ldr	r2, [pc, #600]	; (8001800 <HAL_RCC_OscConfig+0x4dc>)
 80015a6:	f023 0301 	bic.w	r3, r3, #1
 80015aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015ac:	f7ff fb6a 	bl	8000c84 <HAL_GetTick>
 80015b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80015b2:	e008      	b.n	80015c6 <HAL_RCC_OscConfig+0x2a2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015b4:	f7ff fb66 	bl	8000c84 <HAL_GetTick>
 80015b8:	4602      	mov	r2, r0
 80015ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	2b02      	cmp	r3, #2
 80015c0:	d901      	bls.n	80015c6 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 80015c2:	2303      	movs	r3, #3
 80015c4:	e2ac      	b.n	8001b20 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80015c6:	4b8e      	ldr	r3, [pc, #568]	; (8001800 <HAL_RCC_OscConfig+0x4dc>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f003 0304 	and.w	r3, r3, #4
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d1f0      	bne.n	80015b4 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f003 0310 	and.w	r3, r3, #16
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d06a      	beq.n	80016b4 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015de:	4b88      	ldr	r3, [pc, #544]	; (8001800 <HAL_RCC_OscConfig+0x4dc>)
 80015e0:	691b      	ldr	r3, [r3, #16]
 80015e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80015e6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80015e8:	4b85      	ldr	r3, [pc, #532]	; (8001800 <HAL_RCC_OscConfig+0x4dc>)
 80015ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ec:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80015ee:	69bb      	ldr	r3, [r7, #24]
 80015f0:	2b08      	cmp	r3, #8
 80015f2:	d007      	beq.n	8001604 <HAL_RCC_OscConfig+0x2e0>
 80015f4:	69bb      	ldr	r3, [r7, #24]
 80015f6:	2b18      	cmp	r3, #24
 80015f8:	d11b      	bne.n	8001632 <HAL_RCC_OscConfig+0x30e>
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	f003 0303 	and.w	r3, r3, #3
 8001600:	2b01      	cmp	r3, #1
 8001602:	d116      	bne.n	8001632 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001604:	4b7e      	ldr	r3, [pc, #504]	; (8001800 <HAL_RCC_OscConfig+0x4dc>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800160c:	2b00      	cmp	r3, #0
 800160e:	d005      	beq.n	800161c <HAL_RCC_OscConfig+0x2f8>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	69db      	ldr	r3, [r3, #28]
 8001614:	2b80      	cmp	r3, #128	; 0x80
 8001616:	d001      	beq.n	800161c <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8001618:	2301      	movs	r3, #1
 800161a:	e281      	b.n	8001b20 <HAL_RCC_OscConfig+0x7fc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800161c:	4b78      	ldr	r3, [pc, #480]	; (8001800 <HAL_RCC_OscConfig+0x4dc>)
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6a1b      	ldr	r3, [r3, #32]
 8001628:	061b      	lsls	r3, r3, #24
 800162a:	4975      	ldr	r1, [pc, #468]	; (8001800 <HAL_RCC_OscConfig+0x4dc>)
 800162c:	4313      	orrs	r3, r2
 800162e:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001630:	e040      	b.n	80016b4 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	69db      	ldr	r3, [r3, #28]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d023      	beq.n	8001682 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800163a:	4b71      	ldr	r3, [pc, #452]	; (8001800 <HAL_RCC_OscConfig+0x4dc>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a70      	ldr	r2, [pc, #448]	; (8001800 <HAL_RCC_OscConfig+0x4dc>)
 8001640:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001644:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001646:	f7ff fb1d 	bl	8000c84 <HAL_GetTick>
 800164a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800164c:	e008      	b.n	8001660 <HAL_RCC_OscConfig+0x33c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800164e:	f7ff fb19 	bl	8000c84 <HAL_GetTick>
 8001652:	4602      	mov	r2, r0
 8001654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	2b02      	cmp	r3, #2
 800165a:	d901      	bls.n	8001660 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 800165c:	2303      	movs	r3, #3
 800165e:	e25f      	b.n	8001b20 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001660:	4b67      	ldr	r3, [pc, #412]	; (8001800 <HAL_RCC_OscConfig+0x4dc>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001668:	2b00      	cmp	r3, #0
 800166a:	d0f0      	beq.n	800164e <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800166c:	4b64      	ldr	r3, [pc, #400]	; (8001800 <HAL_RCC_OscConfig+0x4dc>)
 800166e:	68db      	ldr	r3, [r3, #12]
 8001670:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6a1b      	ldr	r3, [r3, #32]
 8001678:	061b      	lsls	r3, r3, #24
 800167a:	4961      	ldr	r1, [pc, #388]	; (8001800 <HAL_RCC_OscConfig+0x4dc>)
 800167c:	4313      	orrs	r3, r2
 800167e:	60cb      	str	r3, [r1, #12]
 8001680:	e018      	b.n	80016b4 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001682:	4b5f      	ldr	r3, [pc, #380]	; (8001800 <HAL_RCC_OscConfig+0x4dc>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a5e      	ldr	r2, [pc, #376]	; (8001800 <HAL_RCC_OscConfig+0x4dc>)
 8001688:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800168c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800168e:	f7ff faf9 	bl	8000c84 <HAL_GetTick>
 8001692:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001694:	e008      	b.n	80016a8 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001696:	f7ff faf5 	bl	8000c84 <HAL_GetTick>
 800169a:	4602      	mov	r2, r0
 800169c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d901      	bls.n	80016a8 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 80016a4:	2303      	movs	r3, #3
 80016a6:	e23b      	b.n	8001b20 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80016a8:	4b55      	ldr	r3, [pc, #340]	; (8001800 <HAL_RCC_OscConfig+0x4dc>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d1f0      	bne.n	8001696 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f003 0308 	and.w	r3, r3, #8
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d036      	beq.n	800172e <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	695b      	ldr	r3, [r3, #20]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d019      	beq.n	80016fc <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016c8:	4b4d      	ldr	r3, [pc, #308]	; (8001800 <HAL_RCC_OscConfig+0x4dc>)
 80016ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016cc:	4a4c      	ldr	r2, [pc, #304]	; (8001800 <HAL_RCC_OscConfig+0x4dc>)
 80016ce:	f043 0301 	orr.w	r3, r3, #1
 80016d2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016d4:	f7ff fad6 	bl	8000c84 <HAL_GetTick>
 80016d8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80016da:	e008      	b.n	80016ee <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016dc:	f7ff fad2 	bl	8000c84 <HAL_GetTick>
 80016e0:	4602      	mov	r2, r0
 80016e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	2b02      	cmp	r3, #2
 80016e8:	d901      	bls.n	80016ee <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80016ea:	2303      	movs	r3, #3
 80016ec:	e218      	b.n	8001b20 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80016ee:	4b44      	ldr	r3, [pc, #272]	; (8001800 <HAL_RCC_OscConfig+0x4dc>)
 80016f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016f2:	f003 0302 	and.w	r3, r3, #2
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d0f0      	beq.n	80016dc <HAL_RCC_OscConfig+0x3b8>
 80016fa:	e018      	b.n	800172e <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016fc:	4b40      	ldr	r3, [pc, #256]	; (8001800 <HAL_RCC_OscConfig+0x4dc>)
 80016fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001700:	4a3f      	ldr	r2, [pc, #252]	; (8001800 <HAL_RCC_OscConfig+0x4dc>)
 8001702:	f023 0301 	bic.w	r3, r3, #1
 8001706:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001708:	f7ff fabc 	bl	8000c84 <HAL_GetTick>
 800170c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800170e:	e008      	b.n	8001722 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001710:	f7ff fab8 	bl	8000c84 <HAL_GetTick>
 8001714:	4602      	mov	r2, r0
 8001716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	2b02      	cmp	r3, #2
 800171c:	d901      	bls.n	8001722 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800171e:	2303      	movs	r3, #3
 8001720:	e1fe      	b.n	8001b20 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001722:	4b37      	ldr	r3, [pc, #220]	; (8001800 <HAL_RCC_OscConfig+0x4dc>)
 8001724:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001726:	f003 0302 	and.w	r3, r3, #2
 800172a:	2b00      	cmp	r3, #0
 800172c:	d1f0      	bne.n	8001710 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f003 0320 	and.w	r3, r3, #32
 8001736:	2b00      	cmp	r3, #0
 8001738:	d036      	beq.n	80017a8 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	699b      	ldr	r3, [r3, #24]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d019      	beq.n	8001776 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001742:	4b2f      	ldr	r3, [pc, #188]	; (8001800 <HAL_RCC_OscConfig+0x4dc>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a2e      	ldr	r2, [pc, #184]	; (8001800 <HAL_RCC_OscConfig+0x4dc>)
 8001748:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800174c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800174e:	f7ff fa99 	bl	8000c84 <HAL_GetTick>
 8001752:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001754:	e008      	b.n	8001768 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001756:	f7ff fa95 	bl	8000c84 <HAL_GetTick>
 800175a:	4602      	mov	r2, r0
 800175c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800175e:	1ad3      	subs	r3, r2, r3
 8001760:	2b02      	cmp	r3, #2
 8001762:	d901      	bls.n	8001768 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8001764:	2303      	movs	r3, #3
 8001766:	e1db      	b.n	8001b20 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001768:	4b25      	ldr	r3, [pc, #148]	; (8001800 <HAL_RCC_OscConfig+0x4dc>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001770:	2b00      	cmp	r3, #0
 8001772:	d0f0      	beq.n	8001756 <HAL_RCC_OscConfig+0x432>
 8001774:	e018      	b.n	80017a8 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001776:	4b22      	ldr	r3, [pc, #136]	; (8001800 <HAL_RCC_OscConfig+0x4dc>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a21      	ldr	r2, [pc, #132]	; (8001800 <HAL_RCC_OscConfig+0x4dc>)
 800177c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001780:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001782:	f7ff fa7f 	bl	8000c84 <HAL_GetTick>
 8001786:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001788:	e008      	b.n	800179c <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800178a:	f7ff fa7b 	bl	8000c84 <HAL_GetTick>
 800178e:	4602      	mov	r2, r0
 8001790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001792:	1ad3      	subs	r3, r2, r3
 8001794:	2b02      	cmp	r3, #2
 8001796:	d901      	bls.n	800179c <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8001798:	2303      	movs	r3, #3
 800179a:	e1c1      	b.n	8001b20 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800179c:	4b18      	ldr	r3, [pc, #96]	; (8001800 <HAL_RCC_OscConfig+0x4dc>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d1f0      	bne.n	800178a <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 0304 	and.w	r3, r3, #4
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	f000 80af 	beq.w	8001914 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80017b6:	4b13      	ldr	r3, [pc, #76]	; (8001804 <HAL_RCC_OscConfig+0x4e0>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a12      	ldr	r2, [pc, #72]	; (8001804 <HAL_RCC_OscConfig+0x4e0>)
 80017bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017c0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80017c2:	f7ff fa5f 	bl	8000c84 <HAL_GetTick>
 80017c6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80017c8:	e008      	b.n	80017dc <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80017ca:	f7ff fa5b 	bl	8000c84 <HAL_GetTick>
 80017ce:	4602      	mov	r2, r0
 80017d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d2:	1ad3      	subs	r3, r2, r3
 80017d4:	2b64      	cmp	r3, #100	; 0x64
 80017d6:	d901      	bls.n	80017dc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 80017d8:	2303      	movs	r3, #3
 80017da:	e1a1      	b.n	8001b20 <HAL_RCC_OscConfig+0x7fc>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80017dc:	4b09      	ldr	r3, [pc, #36]	; (8001804 <HAL_RCC_OscConfig+0x4e0>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d0f0      	beq.n	80017ca <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	d10b      	bne.n	8001808 <HAL_RCC_OscConfig+0x4e4>
 80017f0:	4b03      	ldr	r3, [pc, #12]	; (8001800 <HAL_RCC_OscConfig+0x4dc>)
 80017f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017f4:	4a02      	ldr	r2, [pc, #8]	; (8001800 <HAL_RCC_OscConfig+0x4dc>)
 80017f6:	f043 0301 	orr.w	r3, r3, #1
 80017fa:	6713      	str	r3, [r2, #112]	; 0x70
 80017fc:	e05b      	b.n	80018b6 <HAL_RCC_OscConfig+0x592>
 80017fe:	bf00      	nop
 8001800:	58024400 	.word	0x58024400
 8001804:	58024800 	.word	0x58024800
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d112      	bne.n	8001836 <HAL_RCC_OscConfig+0x512>
 8001810:	4b9d      	ldr	r3, [pc, #628]	; (8001a88 <HAL_RCC_OscConfig+0x764>)
 8001812:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001814:	4a9c      	ldr	r2, [pc, #624]	; (8001a88 <HAL_RCC_OscConfig+0x764>)
 8001816:	f023 0301 	bic.w	r3, r3, #1
 800181a:	6713      	str	r3, [r2, #112]	; 0x70
 800181c:	4b9a      	ldr	r3, [pc, #616]	; (8001a88 <HAL_RCC_OscConfig+0x764>)
 800181e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001820:	4a99      	ldr	r2, [pc, #612]	; (8001a88 <HAL_RCC_OscConfig+0x764>)
 8001822:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001826:	6713      	str	r3, [r2, #112]	; 0x70
 8001828:	4b97      	ldr	r3, [pc, #604]	; (8001a88 <HAL_RCC_OscConfig+0x764>)
 800182a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800182c:	4a96      	ldr	r2, [pc, #600]	; (8001a88 <HAL_RCC_OscConfig+0x764>)
 800182e:	f023 0304 	bic.w	r3, r3, #4
 8001832:	6713      	str	r3, [r2, #112]	; 0x70
 8001834:	e03f      	b.n	80018b6 <HAL_RCC_OscConfig+0x592>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	2b05      	cmp	r3, #5
 800183c:	d112      	bne.n	8001864 <HAL_RCC_OscConfig+0x540>
 800183e:	4b92      	ldr	r3, [pc, #584]	; (8001a88 <HAL_RCC_OscConfig+0x764>)
 8001840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001842:	4a91      	ldr	r2, [pc, #580]	; (8001a88 <HAL_RCC_OscConfig+0x764>)
 8001844:	f043 0304 	orr.w	r3, r3, #4
 8001848:	6713      	str	r3, [r2, #112]	; 0x70
 800184a:	4b8f      	ldr	r3, [pc, #572]	; (8001a88 <HAL_RCC_OscConfig+0x764>)
 800184c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800184e:	4a8e      	ldr	r2, [pc, #568]	; (8001a88 <HAL_RCC_OscConfig+0x764>)
 8001850:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001854:	6713      	str	r3, [r2, #112]	; 0x70
 8001856:	4b8c      	ldr	r3, [pc, #560]	; (8001a88 <HAL_RCC_OscConfig+0x764>)
 8001858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800185a:	4a8b      	ldr	r2, [pc, #556]	; (8001a88 <HAL_RCC_OscConfig+0x764>)
 800185c:	f043 0301 	orr.w	r3, r3, #1
 8001860:	6713      	str	r3, [r2, #112]	; 0x70
 8001862:	e028      	b.n	80018b6 <HAL_RCC_OscConfig+0x592>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	2b85      	cmp	r3, #133	; 0x85
 800186a:	d112      	bne.n	8001892 <HAL_RCC_OscConfig+0x56e>
 800186c:	4b86      	ldr	r3, [pc, #536]	; (8001a88 <HAL_RCC_OscConfig+0x764>)
 800186e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001870:	4a85      	ldr	r2, [pc, #532]	; (8001a88 <HAL_RCC_OscConfig+0x764>)
 8001872:	f043 0304 	orr.w	r3, r3, #4
 8001876:	6713      	str	r3, [r2, #112]	; 0x70
 8001878:	4b83      	ldr	r3, [pc, #524]	; (8001a88 <HAL_RCC_OscConfig+0x764>)
 800187a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800187c:	4a82      	ldr	r2, [pc, #520]	; (8001a88 <HAL_RCC_OscConfig+0x764>)
 800187e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001882:	6713      	str	r3, [r2, #112]	; 0x70
 8001884:	4b80      	ldr	r3, [pc, #512]	; (8001a88 <HAL_RCC_OscConfig+0x764>)
 8001886:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001888:	4a7f      	ldr	r2, [pc, #508]	; (8001a88 <HAL_RCC_OscConfig+0x764>)
 800188a:	f043 0301 	orr.w	r3, r3, #1
 800188e:	6713      	str	r3, [r2, #112]	; 0x70
 8001890:	e011      	b.n	80018b6 <HAL_RCC_OscConfig+0x592>
 8001892:	4b7d      	ldr	r3, [pc, #500]	; (8001a88 <HAL_RCC_OscConfig+0x764>)
 8001894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001896:	4a7c      	ldr	r2, [pc, #496]	; (8001a88 <HAL_RCC_OscConfig+0x764>)
 8001898:	f023 0301 	bic.w	r3, r3, #1
 800189c:	6713      	str	r3, [r2, #112]	; 0x70
 800189e:	4b7a      	ldr	r3, [pc, #488]	; (8001a88 <HAL_RCC_OscConfig+0x764>)
 80018a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018a2:	4a79      	ldr	r2, [pc, #484]	; (8001a88 <HAL_RCC_OscConfig+0x764>)
 80018a4:	f023 0304 	bic.w	r3, r3, #4
 80018a8:	6713      	str	r3, [r2, #112]	; 0x70
 80018aa:	4b77      	ldr	r3, [pc, #476]	; (8001a88 <HAL_RCC_OscConfig+0x764>)
 80018ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018ae:	4a76      	ldr	r2, [pc, #472]	; (8001a88 <HAL_RCC_OscConfig+0x764>)
 80018b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80018b4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d015      	beq.n	80018ea <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018be:	f7ff f9e1 	bl	8000c84 <HAL_GetTick>
 80018c2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80018c4:	e00a      	b.n	80018dc <HAL_RCC_OscConfig+0x5b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018c6:	f7ff f9dd 	bl	8000c84 <HAL_GetTick>
 80018ca:	4602      	mov	r2, r0
 80018cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ce:	1ad3      	subs	r3, r2, r3
 80018d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d901      	bls.n	80018dc <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 80018d8:	2303      	movs	r3, #3
 80018da:	e121      	b.n	8001b20 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80018dc:	4b6a      	ldr	r3, [pc, #424]	; (8001a88 <HAL_RCC_OscConfig+0x764>)
 80018de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018e0:	f003 0302 	and.w	r3, r3, #2
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d0ee      	beq.n	80018c6 <HAL_RCC_OscConfig+0x5a2>
 80018e8:	e014      	b.n	8001914 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018ea:	f7ff f9cb 	bl	8000c84 <HAL_GetTick>
 80018ee:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80018f0:	e00a      	b.n	8001908 <HAL_RCC_OscConfig+0x5e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018f2:	f7ff f9c7 	bl	8000c84 <HAL_GetTick>
 80018f6:	4602      	mov	r2, r0
 80018f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fa:	1ad3      	subs	r3, r2, r3
 80018fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001900:	4293      	cmp	r3, r2
 8001902:	d901      	bls.n	8001908 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8001904:	2303      	movs	r3, #3
 8001906:	e10b      	b.n	8001b20 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001908:	4b5f      	ldr	r3, [pc, #380]	; (8001a88 <HAL_RCC_OscConfig+0x764>)
 800190a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800190c:	f003 0302 	and.w	r3, r3, #2
 8001910:	2b00      	cmp	r3, #0
 8001912:	d1ee      	bne.n	80018f2 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001918:	2b00      	cmp	r3, #0
 800191a:	f000 8100 	beq.w	8001b1e <HAL_RCC_OscConfig+0x7fa>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800191e:	4b5a      	ldr	r3, [pc, #360]	; (8001a88 <HAL_RCC_OscConfig+0x764>)
 8001920:	691b      	ldr	r3, [r3, #16]
 8001922:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001926:	2b18      	cmp	r3, #24
 8001928:	f000 80bb 	beq.w	8001aa2 <HAL_RCC_OscConfig+0x77e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001930:	2b02      	cmp	r3, #2
 8001932:	f040 8095 	bne.w	8001a60 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001936:	4b54      	ldr	r3, [pc, #336]	; (8001a88 <HAL_RCC_OscConfig+0x764>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a53      	ldr	r2, [pc, #332]	; (8001a88 <HAL_RCC_OscConfig+0x764>)
 800193c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001940:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001942:	f7ff f99f 	bl	8000c84 <HAL_GetTick>
 8001946:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001948:	e008      	b.n	800195c <HAL_RCC_OscConfig+0x638>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800194a:	f7ff f99b 	bl	8000c84 <HAL_GetTick>
 800194e:	4602      	mov	r2, r0
 8001950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	2b02      	cmp	r3, #2
 8001956:	d901      	bls.n	800195c <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8001958:	2303      	movs	r3, #3
 800195a:	e0e1      	b.n	8001b20 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800195c:	4b4a      	ldr	r3, [pc, #296]	; (8001a88 <HAL_RCC_OscConfig+0x764>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001964:	2b00      	cmp	r3, #0
 8001966:	d1f0      	bne.n	800194a <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001968:	4b47      	ldr	r3, [pc, #284]	; (8001a88 <HAL_RCC_OscConfig+0x764>)
 800196a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800196c:	4b47      	ldr	r3, [pc, #284]	; (8001a8c <HAL_RCC_OscConfig+0x768>)
 800196e:	4013      	ands	r3, r2
 8001970:	687a      	ldr	r2, [r7, #4]
 8001972:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001974:	687a      	ldr	r2, [r7, #4]
 8001976:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001978:	0112      	lsls	r2, r2, #4
 800197a:	430a      	orrs	r2, r1
 800197c:	4942      	ldr	r1, [pc, #264]	; (8001a88 <HAL_RCC_OscConfig+0x764>)
 800197e:	4313      	orrs	r3, r2
 8001980:	628b      	str	r3, [r1, #40]	; 0x28
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001986:	3b01      	subs	r3, #1
 8001988:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001990:	3b01      	subs	r3, #1
 8001992:	025b      	lsls	r3, r3, #9
 8001994:	b29b      	uxth	r3, r3
 8001996:	431a      	orrs	r2, r3
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800199c:	3b01      	subs	r3, #1
 800199e:	041b      	lsls	r3, r3, #16
 80019a0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80019a4:	431a      	orrs	r2, r3
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019aa:	3b01      	subs	r3, #1
 80019ac:	061b      	lsls	r3, r3, #24
 80019ae:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80019b2:	4935      	ldr	r1, [pc, #212]	; (8001a88 <HAL_RCC_OscConfig+0x764>)
 80019b4:	4313      	orrs	r3, r2
 80019b6:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80019b8:	4b33      	ldr	r3, [pc, #204]	; (8001a88 <HAL_RCC_OscConfig+0x764>)
 80019ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019bc:	4a32      	ldr	r2, [pc, #200]	; (8001a88 <HAL_RCC_OscConfig+0x764>)
 80019be:	f023 0301 	bic.w	r3, r3, #1
 80019c2:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80019c4:	4b30      	ldr	r3, [pc, #192]	; (8001a88 <HAL_RCC_OscConfig+0x764>)
 80019c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019c8:	4b31      	ldr	r3, [pc, #196]	; (8001a90 <HAL_RCC_OscConfig+0x76c>)
 80019ca:	4013      	ands	r3, r2
 80019cc:	687a      	ldr	r2, [r7, #4]
 80019ce:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80019d0:	00d2      	lsls	r2, r2, #3
 80019d2:	492d      	ldr	r1, [pc, #180]	; (8001a88 <HAL_RCC_OscConfig+0x764>)
 80019d4:	4313      	orrs	r3, r2
 80019d6:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80019d8:	4b2b      	ldr	r3, [pc, #172]	; (8001a88 <HAL_RCC_OscConfig+0x764>)
 80019da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019dc:	f023 020c 	bic.w	r2, r3, #12
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e4:	4928      	ldr	r1, [pc, #160]	; (8001a88 <HAL_RCC_OscConfig+0x764>)
 80019e6:	4313      	orrs	r3, r2
 80019e8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80019ea:	4b27      	ldr	r3, [pc, #156]	; (8001a88 <HAL_RCC_OscConfig+0x764>)
 80019ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ee:	f023 0202 	bic.w	r2, r3, #2
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019f6:	4924      	ldr	r1, [pc, #144]	; (8001a88 <HAL_RCC_OscConfig+0x764>)
 80019f8:	4313      	orrs	r3, r2
 80019fa:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80019fc:	4b22      	ldr	r3, [pc, #136]	; (8001a88 <HAL_RCC_OscConfig+0x764>)
 80019fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a00:	4a21      	ldr	r2, [pc, #132]	; (8001a88 <HAL_RCC_OscConfig+0x764>)
 8001a02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a06:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001a08:	4b1f      	ldr	r3, [pc, #124]	; (8001a88 <HAL_RCC_OscConfig+0x764>)
 8001a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a0c:	4a1e      	ldr	r2, [pc, #120]	; (8001a88 <HAL_RCC_OscConfig+0x764>)
 8001a0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a12:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001a14:	4b1c      	ldr	r3, [pc, #112]	; (8001a88 <HAL_RCC_OscConfig+0x764>)
 8001a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a18:	4a1b      	ldr	r2, [pc, #108]	; (8001a88 <HAL_RCC_OscConfig+0x764>)
 8001a1a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a1e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8001a20:	4b19      	ldr	r3, [pc, #100]	; (8001a88 <HAL_RCC_OscConfig+0x764>)
 8001a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a24:	4a18      	ldr	r2, [pc, #96]	; (8001a88 <HAL_RCC_OscConfig+0x764>)
 8001a26:	f043 0301 	orr.w	r3, r3, #1
 8001a2a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a2c:	4b16      	ldr	r3, [pc, #88]	; (8001a88 <HAL_RCC_OscConfig+0x764>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a15      	ldr	r2, [pc, #84]	; (8001a88 <HAL_RCC_OscConfig+0x764>)
 8001a32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a38:	f7ff f924 	bl	8000c84 <HAL_GetTick>
 8001a3c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001a3e:	e008      	b.n	8001a52 <HAL_RCC_OscConfig+0x72e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a40:	f7ff f920 	bl	8000c84 <HAL_GetTick>
 8001a44:	4602      	mov	r2, r0
 8001a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	2b02      	cmp	r3, #2
 8001a4c:	d901      	bls.n	8001a52 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	e066      	b.n	8001b20 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001a52:	4b0d      	ldr	r3, [pc, #52]	; (8001a88 <HAL_RCC_OscConfig+0x764>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d0f0      	beq.n	8001a40 <HAL_RCC_OscConfig+0x71c>
 8001a5e:	e05e      	b.n	8001b1e <HAL_RCC_OscConfig+0x7fa>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a60:	4b09      	ldr	r3, [pc, #36]	; (8001a88 <HAL_RCC_OscConfig+0x764>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a08      	ldr	r2, [pc, #32]	; (8001a88 <HAL_RCC_OscConfig+0x764>)
 8001a66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a6c:	f7ff f90a 	bl	8000c84 <HAL_GetTick>
 8001a70:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001a72:	e00f      	b.n	8001a94 <HAL_RCC_OscConfig+0x770>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a74:	f7ff f906 	bl	8000c84 <HAL_GetTick>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	d908      	bls.n	8001a94 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8001a82:	2303      	movs	r3, #3
 8001a84:	e04c      	b.n	8001b20 <HAL_RCC_OscConfig+0x7fc>
 8001a86:	bf00      	nop
 8001a88:	58024400 	.word	0x58024400
 8001a8c:	fffffc0c 	.word	0xfffffc0c
 8001a90:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001a94:	4b24      	ldr	r3, [pc, #144]	; (8001b28 <HAL_RCC_OscConfig+0x804>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d1e9      	bne.n	8001a74 <HAL_RCC_OscConfig+0x750>
 8001aa0:	e03d      	b.n	8001b1e <HAL_RCC_OscConfig+0x7fa>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001aa2:	4b21      	ldr	r3, [pc, #132]	; (8001b28 <HAL_RCC_OscConfig+0x804>)
 8001aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aa6:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001aa8:	4b1f      	ldr	r3, [pc, #124]	; (8001b28 <HAL_RCC_OscConfig+0x804>)
 8001aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aac:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d031      	beq.n	8001b1a <HAL_RCC_OscConfig+0x7f6>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	f003 0203 	and.w	r2, r3, #3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d12a      	bne.n	8001b1a <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	091b      	lsrs	r3, r3, #4
 8001ac8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d122      	bne.n	8001b1a <HAL_RCC_OscConfig+0x7f6>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ade:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d11a      	bne.n	8001b1a <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	0a5b      	lsrs	r3, r3, #9
 8001ae8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001af0:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001af2:	429a      	cmp	r2, r3
 8001af4:	d111      	bne.n	8001b1a <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	0c1b      	lsrs	r3, r3, #16
 8001afa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b02:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d108      	bne.n	8001b1a <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	0e1b      	lsrs	r3, r3, #24
 8001b0c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b14:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001b16:	429a      	cmp	r2, r3
 8001b18:	d001      	beq.n	8001b1e <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e000      	b.n	8001b20 <HAL_RCC_OscConfig+0x7fc>
      }
    }
  }
  return HAL_OK;
 8001b1e:	2300      	movs	r3, #0
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	3730      	adds	r7, #48	; 0x30
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	58024400 	.word	0x58024400

08001b2c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b086      	sub	sp, #24
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d101      	bne.n	8001b40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e19c      	b.n	8001e7a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b40:	4b8a      	ldr	r3, [pc, #552]	; (8001d6c <HAL_RCC_ClockConfig+0x240>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 030f 	and.w	r3, r3, #15
 8001b48:	683a      	ldr	r2, [r7, #0]
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	d910      	bls.n	8001b70 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b4e:	4b87      	ldr	r3, [pc, #540]	; (8001d6c <HAL_RCC_ClockConfig+0x240>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f023 020f 	bic.w	r2, r3, #15
 8001b56:	4985      	ldr	r1, [pc, #532]	; (8001d6c <HAL_RCC_ClockConfig+0x240>)
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b5e:	4b83      	ldr	r3, [pc, #524]	; (8001d6c <HAL_RCC_ClockConfig+0x240>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 030f 	and.w	r3, r3, #15
 8001b66:	683a      	ldr	r2, [r7, #0]
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d001      	beq.n	8001b70 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e184      	b.n	8001e7a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f003 0304 	and.w	r3, r3, #4
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d010      	beq.n	8001b9e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	691a      	ldr	r2, [r3, #16]
 8001b80:	4b7b      	ldr	r3, [pc, #492]	; (8001d70 <HAL_RCC_ClockConfig+0x244>)
 8001b82:	699b      	ldr	r3, [r3, #24]
 8001b84:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d908      	bls.n	8001b9e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001b8c:	4b78      	ldr	r3, [pc, #480]	; (8001d70 <HAL_RCC_ClockConfig+0x244>)
 8001b8e:	699b      	ldr	r3, [r3, #24]
 8001b90:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	691b      	ldr	r3, [r3, #16]
 8001b98:	4975      	ldr	r1, [pc, #468]	; (8001d70 <HAL_RCC_ClockConfig+0x244>)
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 0308 	and.w	r3, r3, #8
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d010      	beq.n	8001bcc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	695a      	ldr	r2, [r3, #20]
 8001bae:	4b70      	ldr	r3, [pc, #448]	; (8001d70 <HAL_RCC_ClockConfig+0x244>)
 8001bb0:	69db      	ldr	r3, [r3, #28]
 8001bb2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	d908      	bls.n	8001bcc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001bba:	4b6d      	ldr	r3, [pc, #436]	; (8001d70 <HAL_RCC_ClockConfig+0x244>)
 8001bbc:	69db      	ldr	r3, [r3, #28]
 8001bbe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	695b      	ldr	r3, [r3, #20]
 8001bc6:	496a      	ldr	r1, [pc, #424]	; (8001d70 <HAL_RCC_ClockConfig+0x244>)
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f003 0310 	and.w	r3, r3, #16
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d010      	beq.n	8001bfa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	699a      	ldr	r2, [r3, #24]
 8001bdc:	4b64      	ldr	r3, [pc, #400]	; (8001d70 <HAL_RCC_ClockConfig+0x244>)
 8001bde:	69db      	ldr	r3, [r3, #28]
 8001be0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d908      	bls.n	8001bfa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001be8:	4b61      	ldr	r3, [pc, #388]	; (8001d70 <HAL_RCC_ClockConfig+0x244>)
 8001bea:	69db      	ldr	r3, [r3, #28]
 8001bec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	699b      	ldr	r3, [r3, #24]
 8001bf4:	495e      	ldr	r1, [pc, #376]	; (8001d70 <HAL_RCC_ClockConfig+0x244>)
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 0320 	and.w	r3, r3, #32
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d010      	beq.n	8001c28 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	69da      	ldr	r2, [r3, #28]
 8001c0a:	4b59      	ldr	r3, [pc, #356]	; (8001d70 <HAL_RCC_ClockConfig+0x244>)
 8001c0c:	6a1b      	ldr	r3, [r3, #32]
 8001c0e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001c12:	429a      	cmp	r2, r3
 8001c14:	d908      	bls.n	8001c28 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001c16:	4b56      	ldr	r3, [pc, #344]	; (8001d70 <HAL_RCC_ClockConfig+0x244>)
 8001c18:	6a1b      	ldr	r3, [r3, #32]
 8001c1a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	69db      	ldr	r3, [r3, #28]
 8001c22:	4953      	ldr	r1, [pc, #332]	; (8001d70 <HAL_RCC_ClockConfig+0x244>)
 8001c24:	4313      	orrs	r3, r2
 8001c26:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 0302 	and.w	r3, r3, #2
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d010      	beq.n	8001c56 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	68da      	ldr	r2, [r3, #12]
 8001c38:	4b4d      	ldr	r3, [pc, #308]	; (8001d70 <HAL_RCC_ClockConfig+0x244>)
 8001c3a:	699b      	ldr	r3, [r3, #24]
 8001c3c:	f003 030f 	and.w	r3, r3, #15
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d908      	bls.n	8001c56 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c44:	4b4a      	ldr	r3, [pc, #296]	; (8001d70 <HAL_RCC_ClockConfig+0x244>)
 8001c46:	699b      	ldr	r3, [r3, #24]
 8001c48:	f023 020f 	bic.w	r2, r3, #15
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	4947      	ldr	r1, [pc, #284]	; (8001d70 <HAL_RCC_ClockConfig+0x244>)
 8001c52:	4313      	orrs	r3, r2
 8001c54:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 0301 	and.w	r3, r3, #1
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d055      	beq.n	8001d0e <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001c62:	4b43      	ldr	r3, [pc, #268]	; (8001d70 <HAL_RCC_ClockConfig+0x244>)
 8001c64:	699b      	ldr	r3, [r3, #24]
 8001c66:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	4940      	ldr	r1, [pc, #256]	; (8001d70 <HAL_RCC_ClockConfig+0x244>)
 8001c70:	4313      	orrs	r3, r2
 8001c72:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	2b02      	cmp	r3, #2
 8001c7a:	d107      	bne.n	8001c8c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001c7c:	4b3c      	ldr	r3, [pc, #240]	; (8001d70 <HAL_RCC_ClockConfig+0x244>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d121      	bne.n	8001ccc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e0f6      	b.n	8001e7a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	2b03      	cmp	r3, #3
 8001c92:	d107      	bne.n	8001ca4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001c94:	4b36      	ldr	r3, [pc, #216]	; (8001d70 <HAL_RCC_ClockConfig+0x244>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d115      	bne.n	8001ccc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e0ea      	b.n	8001e7a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d107      	bne.n	8001cbc <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001cac:	4b30      	ldr	r3, [pc, #192]	; (8001d70 <HAL_RCC_ClockConfig+0x244>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d109      	bne.n	8001ccc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e0de      	b.n	8001e7a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001cbc:	4b2c      	ldr	r3, [pc, #176]	; (8001d70 <HAL_RCC_ClockConfig+0x244>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f003 0304 	and.w	r3, r3, #4
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d101      	bne.n	8001ccc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e0d6      	b.n	8001e7a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ccc:	4b28      	ldr	r3, [pc, #160]	; (8001d70 <HAL_RCC_ClockConfig+0x244>)
 8001cce:	691b      	ldr	r3, [r3, #16]
 8001cd0:	f023 0207 	bic.w	r2, r3, #7
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	4925      	ldr	r1, [pc, #148]	; (8001d70 <HAL_RCC_ClockConfig+0x244>)
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cde:	f7fe ffd1 	bl	8000c84 <HAL_GetTick>
 8001ce2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ce4:	e00a      	b.n	8001cfc <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ce6:	f7fe ffcd 	bl	8000c84 <HAL_GetTick>
 8001cea:	4602      	mov	r2, r0
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	1ad3      	subs	r3, r2, r3
 8001cf0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d901      	bls.n	8001cfc <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	e0be      	b.n	8001e7a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cfc:	4b1c      	ldr	r3, [pc, #112]	; (8001d70 <HAL_RCC_ClockConfig+0x244>)
 8001cfe:	691b      	ldr	r3, [r3, #16]
 8001d00:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	00db      	lsls	r3, r3, #3
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	d1eb      	bne.n	8001ce6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 0302 	and.w	r3, r3, #2
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d010      	beq.n	8001d3c <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	68da      	ldr	r2, [r3, #12]
 8001d1e:	4b14      	ldr	r3, [pc, #80]	; (8001d70 <HAL_RCC_ClockConfig+0x244>)
 8001d20:	699b      	ldr	r3, [r3, #24]
 8001d22:	f003 030f 	and.w	r3, r3, #15
 8001d26:	429a      	cmp	r2, r3
 8001d28:	d208      	bcs.n	8001d3c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d2a:	4b11      	ldr	r3, [pc, #68]	; (8001d70 <HAL_RCC_ClockConfig+0x244>)
 8001d2c:	699b      	ldr	r3, [r3, #24]
 8001d2e:	f023 020f 	bic.w	r2, r3, #15
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	68db      	ldr	r3, [r3, #12]
 8001d36:	490e      	ldr	r1, [pc, #56]	; (8001d70 <HAL_RCC_ClockConfig+0x244>)
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d3c:	4b0b      	ldr	r3, [pc, #44]	; (8001d6c <HAL_RCC_ClockConfig+0x240>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 030f 	and.w	r3, r3, #15
 8001d44:	683a      	ldr	r2, [r7, #0]
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d214      	bcs.n	8001d74 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d4a:	4b08      	ldr	r3, [pc, #32]	; (8001d6c <HAL_RCC_ClockConfig+0x240>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f023 020f 	bic.w	r2, r3, #15
 8001d52:	4906      	ldr	r1, [pc, #24]	; (8001d6c <HAL_RCC_ClockConfig+0x240>)
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	4313      	orrs	r3, r2
 8001d58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d5a:	4b04      	ldr	r3, [pc, #16]	; (8001d6c <HAL_RCC_ClockConfig+0x240>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 030f 	and.w	r3, r3, #15
 8001d62:	683a      	ldr	r2, [r7, #0]
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d005      	beq.n	8001d74 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e086      	b.n	8001e7a <HAL_RCC_ClockConfig+0x34e>
 8001d6c:	52002000 	.word	0x52002000
 8001d70:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 0304 	and.w	r3, r3, #4
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d010      	beq.n	8001da2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	691a      	ldr	r2, [r3, #16]
 8001d84:	4b3f      	ldr	r3, [pc, #252]	; (8001e84 <HAL_RCC_ClockConfig+0x358>)
 8001d86:	699b      	ldr	r3, [r3, #24]
 8001d88:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d208      	bcs.n	8001da2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001d90:	4b3c      	ldr	r3, [pc, #240]	; (8001e84 <HAL_RCC_ClockConfig+0x358>)
 8001d92:	699b      	ldr	r3, [r3, #24]
 8001d94:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	691b      	ldr	r3, [r3, #16]
 8001d9c:	4939      	ldr	r1, [pc, #228]	; (8001e84 <HAL_RCC_ClockConfig+0x358>)
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0308 	and.w	r3, r3, #8
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d010      	beq.n	8001dd0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	695a      	ldr	r2, [r3, #20]
 8001db2:	4b34      	ldr	r3, [pc, #208]	; (8001e84 <HAL_RCC_ClockConfig+0x358>)
 8001db4:	69db      	ldr	r3, [r3, #28]
 8001db6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001dba:	429a      	cmp	r2, r3
 8001dbc:	d208      	bcs.n	8001dd0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001dbe:	4b31      	ldr	r3, [pc, #196]	; (8001e84 <HAL_RCC_ClockConfig+0x358>)
 8001dc0:	69db      	ldr	r3, [r3, #28]
 8001dc2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	695b      	ldr	r3, [r3, #20]
 8001dca:	492e      	ldr	r1, [pc, #184]	; (8001e84 <HAL_RCC_ClockConfig+0x358>)
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 0310 	and.w	r3, r3, #16
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d010      	beq.n	8001dfe <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	699a      	ldr	r2, [r3, #24]
 8001de0:	4b28      	ldr	r3, [pc, #160]	; (8001e84 <HAL_RCC_ClockConfig+0x358>)
 8001de2:	69db      	ldr	r3, [r3, #28]
 8001de4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d208      	bcs.n	8001dfe <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001dec:	4b25      	ldr	r3, [pc, #148]	; (8001e84 <HAL_RCC_ClockConfig+0x358>)
 8001dee:	69db      	ldr	r3, [r3, #28]
 8001df0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	699b      	ldr	r3, [r3, #24]
 8001df8:	4922      	ldr	r1, [pc, #136]	; (8001e84 <HAL_RCC_ClockConfig+0x358>)
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 0320 	and.w	r3, r3, #32
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d010      	beq.n	8001e2c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	69da      	ldr	r2, [r3, #28]
 8001e0e:	4b1d      	ldr	r3, [pc, #116]	; (8001e84 <HAL_RCC_ClockConfig+0x358>)
 8001e10:	6a1b      	ldr	r3, [r3, #32]
 8001e12:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d208      	bcs.n	8001e2c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001e1a:	4b1a      	ldr	r3, [pc, #104]	; (8001e84 <HAL_RCC_ClockConfig+0x358>)
 8001e1c:	6a1b      	ldr	r3, [r3, #32]
 8001e1e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	69db      	ldr	r3, [r3, #28]
 8001e26:	4917      	ldr	r1, [pc, #92]	; (8001e84 <HAL_RCC_ClockConfig+0x358>)
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001e2c:	f000 f834 	bl	8001e98 <HAL_RCC_GetSysClockFreq>
 8001e30:	4602      	mov	r2, r0
 8001e32:	4b14      	ldr	r3, [pc, #80]	; (8001e84 <HAL_RCC_ClockConfig+0x358>)
 8001e34:	699b      	ldr	r3, [r3, #24]
 8001e36:	0a1b      	lsrs	r3, r3, #8
 8001e38:	f003 030f 	and.w	r3, r3, #15
 8001e3c:	4912      	ldr	r1, [pc, #72]	; (8001e88 <HAL_RCC_ClockConfig+0x35c>)
 8001e3e:	5ccb      	ldrb	r3, [r1, r3]
 8001e40:	f003 031f 	and.w	r3, r3, #31
 8001e44:	fa22 f303 	lsr.w	r3, r2, r3
 8001e48:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001e4a:	4b0e      	ldr	r3, [pc, #56]	; (8001e84 <HAL_RCC_ClockConfig+0x358>)
 8001e4c:	699b      	ldr	r3, [r3, #24]
 8001e4e:	f003 030f 	and.w	r3, r3, #15
 8001e52:	4a0d      	ldr	r2, [pc, #52]	; (8001e88 <HAL_RCC_ClockConfig+0x35c>)
 8001e54:	5cd3      	ldrb	r3, [r2, r3]
 8001e56:	f003 031f 	and.w	r3, r3, #31
 8001e5a:	693a      	ldr	r2, [r7, #16]
 8001e5c:	fa22 f303 	lsr.w	r3, r2, r3
 8001e60:	4a0a      	ldr	r2, [pc, #40]	; (8001e8c <HAL_RCC_ClockConfig+0x360>)
 8001e62:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001e64:	4a0a      	ldr	r2, [pc, #40]	; (8001e90 <HAL_RCC_ClockConfig+0x364>)
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8001e6a:	4b0a      	ldr	r3, [pc, #40]	; (8001e94 <HAL_RCC_ClockConfig+0x368>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f7fe febe 	bl	8000bf0 <HAL_InitTick>
 8001e74:	4603      	mov	r3, r0
 8001e76:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001e78:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3718      	adds	r7, #24
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	58024400 	.word	0x58024400
 8001e88:	080056e4 	.word	0x080056e4
 8001e8c:	24000004 	.word	0x24000004
 8001e90:	24000000 	.word	0x24000000
 8001e94:	24000008 	.word	0x24000008

08001e98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b089      	sub	sp, #36	; 0x24
 8001e9c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e9e:	4bb3      	ldr	r3, [pc, #716]	; (800216c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ea0:	691b      	ldr	r3, [r3, #16]
 8001ea2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001ea6:	2b18      	cmp	r3, #24
 8001ea8:	f200 8155 	bhi.w	8002156 <HAL_RCC_GetSysClockFreq+0x2be>
 8001eac:	a201      	add	r2, pc, #4	; (adr r2, 8001eb4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8001eae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eb2:	bf00      	nop
 8001eb4:	08001f19 	.word	0x08001f19
 8001eb8:	08002157 	.word	0x08002157
 8001ebc:	08002157 	.word	0x08002157
 8001ec0:	08002157 	.word	0x08002157
 8001ec4:	08002157 	.word	0x08002157
 8001ec8:	08002157 	.word	0x08002157
 8001ecc:	08002157 	.word	0x08002157
 8001ed0:	08002157 	.word	0x08002157
 8001ed4:	08001f3f 	.word	0x08001f3f
 8001ed8:	08002157 	.word	0x08002157
 8001edc:	08002157 	.word	0x08002157
 8001ee0:	08002157 	.word	0x08002157
 8001ee4:	08002157 	.word	0x08002157
 8001ee8:	08002157 	.word	0x08002157
 8001eec:	08002157 	.word	0x08002157
 8001ef0:	08002157 	.word	0x08002157
 8001ef4:	08001f45 	.word	0x08001f45
 8001ef8:	08002157 	.word	0x08002157
 8001efc:	08002157 	.word	0x08002157
 8001f00:	08002157 	.word	0x08002157
 8001f04:	08002157 	.word	0x08002157
 8001f08:	08002157 	.word	0x08002157
 8001f0c:	08002157 	.word	0x08002157
 8001f10:	08002157 	.word	0x08002157
 8001f14:	08001f4b 	.word	0x08001f4b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001f18:	4b94      	ldr	r3, [pc, #592]	; (800216c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 0320 	and.w	r3, r3, #32
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d009      	beq.n	8001f38 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001f24:	4b91      	ldr	r3, [pc, #580]	; (800216c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	08db      	lsrs	r3, r3, #3
 8001f2a:	f003 0303 	and.w	r3, r3, #3
 8001f2e:	4a90      	ldr	r2, [pc, #576]	; (8002170 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001f30:	fa22 f303 	lsr.w	r3, r2, r3
 8001f34:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8001f36:	e111      	b.n	800215c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001f38:	4b8d      	ldr	r3, [pc, #564]	; (8002170 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001f3a:	61bb      	str	r3, [r7, #24]
    break;
 8001f3c:	e10e      	b.n	800215c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8001f3e:	4b8d      	ldr	r3, [pc, #564]	; (8002174 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001f40:	61bb      	str	r3, [r7, #24]
    break;
 8001f42:	e10b      	b.n	800215c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8001f44:	4b8c      	ldr	r3, [pc, #560]	; (8002178 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8001f46:	61bb      	str	r3, [r7, #24]
    break;
 8001f48:	e108      	b.n	800215c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001f4a:	4b88      	ldr	r3, [pc, #544]	; (800216c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f4e:	f003 0303 	and.w	r3, r3, #3
 8001f52:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8001f54:	4b85      	ldr	r3, [pc, #532]	; (800216c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f58:	091b      	lsrs	r3, r3, #4
 8001f5a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f5e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001f60:	4b82      	ldr	r3, [pc, #520]	; (800216c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f64:	f003 0301 	and.w	r3, r3, #1
 8001f68:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8001f6a:	4b80      	ldr	r3, [pc, #512]	; (800216c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f6e:	08db      	lsrs	r3, r3, #3
 8001f70:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001f74:	68fa      	ldr	r2, [r7, #12]
 8001f76:	fb02 f303 	mul.w	r3, r2, r3
 8001f7a:	ee07 3a90 	vmov	s15, r3
 8001f7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f82:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	f000 80e1 	beq.w	8002150 <HAL_RCC_GetSysClockFreq+0x2b8>
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	2b02      	cmp	r3, #2
 8001f92:	f000 8083 	beq.w	800209c <HAL_RCC_GetSysClockFreq+0x204>
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	f200 80a1 	bhi.w	80020e0 <HAL_RCC_GetSysClockFreq+0x248>
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d003      	beq.n	8001fac <HAL_RCC_GetSysClockFreq+0x114>
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d056      	beq.n	8002058 <HAL_RCC_GetSysClockFreq+0x1c0>
 8001faa:	e099      	b.n	80020e0 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001fac:	4b6f      	ldr	r3, [pc, #444]	; (800216c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 0320 	and.w	r3, r3, #32
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d02d      	beq.n	8002014 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001fb8:	4b6c      	ldr	r3, [pc, #432]	; (800216c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	08db      	lsrs	r3, r3, #3
 8001fbe:	f003 0303 	and.w	r3, r3, #3
 8001fc2:	4a6b      	ldr	r2, [pc, #428]	; (8002170 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001fc4:	fa22 f303 	lsr.w	r3, r2, r3
 8001fc8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	ee07 3a90 	vmov	s15, r3
 8001fd0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	ee07 3a90 	vmov	s15, r3
 8001fda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001fe2:	4b62      	ldr	r3, [pc, #392]	; (800216c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fea:	ee07 3a90 	vmov	s15, r3
 8001fee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001ff2:	ed97 6a02 	vldr	s12, [r7, #8]
 8001ff6:	eddf 5a61 	vldr	s11, [pc, #388]	; 800217c <HAL_RCC_GetSysClockFreq+0x2e4>
 8001ffa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001ffe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002002:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002006:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800200a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800200e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8002012:	e087      	b.n	8002124 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	ee07 3a90 	vmov	s15, r3
 800201a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800201e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002180 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002022:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002026:	4b51      	ldr	r3, [pc, #324]	; (800216c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800202e:	ee07 3a90 	vmov	s15, r3
 8002032:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002036:	ed97 6a02 	vldr	s12, [r7, #8]
 800203a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800217c <HAL_RCC_GetSysClockFreq+0x2e4>
 800203e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002042:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002046:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800204a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800204e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002052:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002056:	e065      	b.n	8002124 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	ee07 3a90 	vmov	s15, r3
 800205e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002062:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002184 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002066:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800206a:	4b40      	ldr	r3, [pc, #256]	; (800216c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800206c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002072:	ee07 3a90 	vmov	s15, r3
 8002076:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800207a:	ed97 6a02 	vldr	s12, [r7, #8]
 800207e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800217c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002082:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002086:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800208a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800208e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002092:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002096:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800209a:	e043      	b.n	8002124 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	ee07 3a90 	vmov	s15, r3
 80020a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020a6:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002188 <HAL_RCC_GetSysClockFreq+0x2f0>
 80020aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80020ae:	4b2f      	ldr	r3, [pc, #188]	; (800216c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020b6:	ee07 3a90 	vmov	s15, r3
 80020ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80020be:	ed97 6a02 	vldr	s12, [r7, #8]
 80020c2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800217c <HAL_RCC_GetSysClockFreq+0x2e4>
 80020c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80020ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80020ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80020d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80020d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80020de:	e021      	b.n	8002124 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	ee07 3a90 	vmov	s15, r3
 80020e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020ea:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002184 <HAL_RCC_GetSysClockFreq+0x2ec>
 80020ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80020f2:	4b1e      	ldr	r3, [pc, #120]	; (800216c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020fa:	ee07 3a90 	vmov	s15, r3
 80020fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002102:	ed97 6a02 	vldr	s12, [r7, #8]
 8002106:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800217c <HAL_RCC_GetSysClockFreq+0x2e4>
 800210a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800210e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002112:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002116:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800211a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800211e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002122:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002124:	4b11      	ldr	r3, [pc, #68]	; (800216c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002128:	0a5b      	lsrs	r3, r3, #9
 800212a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800212e:	3301      	adds	r3, #1
 8002130:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	ee07 3a90 	vmov	s15, r3
 8002138:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800213c:	edd7 6a07 	vldr	s13, [r7, #28]
 8002140:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002144:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002148:	ee17 3a90 	vmov	r3, s15
 800214c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800214e:	e005      	b.n	800215c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8002150:	2300      	movs	r3, #0
 8002152:	61bb      	str	r3, [r7, #24]
    break;
 8002154:	e002      	b.n	800215c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8002156:	4b07      	ldr	r3, [pc, #28]	; (8002174 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002158:	61bb      	str	r3, [r7, #24]
    break;
 800215a:	bf00      	nop
  }

  return sysclockfreq;
 800215c:	69bb      	ldr	r3, [r7, #24]
}
 800215e:	4618      	mov	r0, r3
 8002160:	3724      	adds	r7, #36	; 0x24
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	58024400 	.word	0x58024400
 8002170:	03d09000 	.word	0x03d09000
 8002174:	003d0900 	.word	0x003d0900
 8002178:	016e3600 	.word	0x016e3600
 800217c:	46000000 	.word	0x46000000
 8002180:	4c742400 	.word	0x4c742400
 8002184:	4a742400 	.word	0x4a742400
 8002188:	4bb71b00 	.word	0x4bb71b00

0800218c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b082      	sub	sp, #8
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d101      	bne.n	800219e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e049      	b.n	8002232 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d106      	bne.n	80021b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2200      	movs	r2, #0
 80021ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f7fe fbe2 	bl	800097c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2202      	movs	r2, #2
 80021bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	3304      	adds	r3, #4
 80021c8:	4619      	mov	r1, r3
 80021ca:	4610      	mov	r0, r2
 80021cc:	f000 f99e 	bl	800250c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2201      	movs	r2, #1
 80021d4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2201      	movs	r2, #1
 80021dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2201      	movs	r2, #1
 80021e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2201      	movs	r2, #1
 80021ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2201      	movs	r2, #1
 80021f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2201      	movs	r2, #1
 80021fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2201      	movs	r2, #1
 8002204:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2201      	movs	r2, #1
 800220c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2201      	movs	r2, #1
 8002214:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2201      	movs	r2, #1
 800221c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2201      	movs	r2, #1
 8002224:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2201      	movs	r2, #1
 800222c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002230:	2300      	movs	r3, #0
}
 8002232:	4618      	mov	r0, r3
 8002234:	3708      	adds	r7, #8
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
	...

0800223c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800223c:	b480      	push	{r7}
 800223e:	b085      	sub	sp, #20
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800224a:	b2db      	uxtb	r3, r3
 800224c:	2b01      	cmp	r3, #1
 800224e:	d001      	beq.n	8002254 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	e04c      	b.n	80022ee <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2202      	movs	r2, #2
 8002258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a26      	ldr	r2, [pc, #152]	; (80022fc <HAL_TIM_Base_Start+0xc0>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d022      	beq.n	80022ac <HAL_TIM_Base_Start+0x70>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800226e:	d01d      	beq.n	80022ac <HAL_TIM_Base_Start+0x70>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a22      	ldr	r2, [pc, #136]	; (8002300 <HAL_TIM_Base_Start+0xc4>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d018      	beq.n	80022ac <HAL_TIM_Base_Start+0x70>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a21      	ldr	r2, [pc, #132]	; (8002304 <HAL_TIM_Base_Start+0xc8>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d013      	beq.n	80022ac <HAL_TIM_Base_Start+0x70>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a1f      	ldr	r2, [pc, #124]	; (8002308 <HAL_TIM_Base_Start+0xcc>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d00e      	beq.n	80022ac <HAL_TIM_Base_Start+0x70>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a1e      	ldr	r2, [pc, #120]	; (800230c <HAL_TIM_Base_Start+0xd0>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d009      	beq.n	80022ac <HAL_TIM_Base_Start+0x70>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a1c      	ldr	r2, [pc, #112]	; (8002310 <HAL_TIM_Base_Start+0xd4>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d004      	beq.n	80022ac <HAL_TIM_Base_Start+0x70>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a1b      	ldr	r2, [pc, #108]	; (8002314 <HAL_TIM_Base_Start+0xd8>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d115      	bne.n	80022d8 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	689a      	ldr	r2, [r3, #8]
 80022b2:	4b19      	ldr	r3, [pc, #100]	; (8002318 <HAL_TIM_Base_Start+0xdc>)
 80022b4:	4013      	ands	r3, r2
 80022b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2b06      	cmp	r3, #6
 80022bc:	d015      	beq.n	80022ea <HAL_TIM_Base_Start+0xae>
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022c4:	d011      	beq.n	80022ea <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f042 0201 	orr.w	r2, r2, #1
 80022d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022d6:	e008      	b.n	80022ea <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f042 0201 	orr.w	r2, r2, #1
 80022e6:	601a      	str	r2, [r3, #0]
 80022e8:	e000      	b.n	80022ec <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022ea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80022ec:	2300      	movs	r3, #0
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3714      	adds	r7, #20
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr
 80022fa:	bf00      	nop
 80022fc:	40010000 	.word	0x40010000
 8002300:	40000400 	.word	0x40000400
 8002304:	40000800 	.word	0x40000800
 8002308:	40000c00 	.word	0x40000c00
 800230c:	40010400 	.word	0x40010400
 8002310:	40001800 	.word	0x40001800
 8002314:	40014000 	.word	0x40014000
 8002318:	00010007 	.word	0x00010007

0800231c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b084      	sub	sp, #16
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002326:	2300      	movs	r3, #0
 8002328:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002330:	2b01      	cmp	r3, #1
 8002332:	d101      	bne.n	8002338 <HAL_TIM_ConfigClockSource+0x1c>
 8002334:	2302      	movs	r3, #2
 8002336:	e0dc      	b.n	80024f2 <HAL_TIM_ConfigClockSource+0x1d6>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2201      	movs	r2, #1
 800233c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2202      	movs	r2, #2
 8002344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002350:	68ba      	ldr	r2, [r7, #8]
 8002352:	4b6a      	ldr	r3, [pc, #424]	; (80024fc <HAL_TIM_ConfigClockSource+0x1e0>)
 8002354:	4013      	ands	r3, r2
 8002356:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800235e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	68ba      	ldr	r2, [r7, #8]
 8002366:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a64      	ldr	r2, [pc, #400]	; (8002500 <HAL_TIM_ConfigClockSource+0x1e4>)
 800236e:	4293      	cmp	r3, r2
 8002370:	f000 80a9 	beq.w	80024c6 <HAL_TIM_ConfigClockSource+0x1aa>
 8002374:	4a62      	ldr	r2, [pc, #392]	; (8002500 <HAL_TIM_ConfigClockSource+0x1e4>)
 8002376:	4293      	cmp	r3, r2
 8002378:	f200 80ae 	bhi.w	80024d8 <HAL_TIM_ConfigClockSource+0x1bc>
 800237c:	4a61      	ldr	r2, [pc, #388]	; (8002504 <HAL_TIM_ConfigClockSource+0x1e8>)
 800237e:	4293      	cmp	r3, r2
 8002380:	f000 80a1 	beq.w	80024c6 <HAL_TIM_ConfigClockSource+0x1aa>
 8002384:	4a5f      	ldr	r2, [pc, #380]	; (8002504 <HAL_TIM_ConfigClockSource+0x1e8>)
 8002386:	4293      	cmp	r3, r2
 8002388:	f200 80a6 	bhi.w	80024d8 <HAL_TIM_ConfigClockSource+0x1bc>
 800238c:	4a5e      	ldr	r2, [pc, #376]	; (8002508 <HAL_TIM_ConfigClockSource+0x1ec>)
 800238e:	4293      	cmp	r3, r2
 8002390:	f000 8099 	beq.w	80024c6 <HAL_TIM_ConfigClockSource+0x1aa>
 8002394:	4a5c      	ldr	r2, [pc, #368]	; (8002508 <HAL_TIM_ConfigClockSource+0x1ec>)
 8002396:	4293      	cmp	r3, r2
 8002398:	f200 809e 	bhi.w	80024d8 <HAL_TIM_ConfigClockSource+0x1bc>
 800239c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80023a0:	f000 8091 	beq.w	80024c6 <HAL_TIM_ConfigClockSource+0x1aa>
 80023a4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80023a8:	f200 8096 	bhi.w	80024d8 <HAL_TIM_ConfigClockSource+0x1bc>
 80023ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80023b0:	f000 8089 	beq.w	80024c6 <HAL_TIM_ConfigClockSource+0x1aa>
 80023b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80023b8:	f200 808e 	bhi.w	80024d8 <HAL_TIM_ConfigClockSource+0x1bc>
 80023bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023c0:	d03e      	beq.n	8002440 <HAL_TIM_ConfigClockSource+0x124>
 80023c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023c6:	f200 8087 	bhi.w	80024d8 <HAL_TIM_ConfigClockSource+0x1bc>
 80023ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023ce:	f000 8086 	beq.w	80024de <HAL_TIM_ConfigClockSource+0x1c2>
 80023d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023d6:	d87f      	bhi.n	80024d8 <HAL_TIM_ConfigClockSource+0x1bc>
 80023d8:	2b70      	cmp	r3, #112	; 0x70
 80023da:	d01a      	beq.n	8002412 <HAL_TIM_ConfigClockSource+0xf6>
 80023dc:	2b70      	cmp	r3, #112	; 0x70
 80023de:	d87b      	bhi.n	80024d8 <HAL_TIM_ConfigClockSource+0x1bc>
 80023e0:	2b60      	cmp	r3, #96	; 0x60
 80023e2:	d050      	beq.n	8002486 <HAL_TIM_ConfigClockSource+0x16a>
 80023e4:	2b60      	cmp	r3, #96	; 0x60
 80023e6:	d877      	bhi.n	80024d8 <HAL_TIM_ConfigClockSource+0x1bc>
 80023e8:	2b50      	cmp	r3, #80	; 0x50
 80023ea:	d03c      	beq.n	8002466 <HAL_TIM_ConfigClockSource+0x14a>
 80023ec:	2b50      	cmp	r3, #80	; 0x50
 80023ee:	d873      	bhi.n	80024d8 <HAL_TIM_ConfigClockSource+0x1bc>
 80023f0:	2b40      	cmp	r3, #64	; 0x40
 80023f2:	d058      	beq.n	80024a6 <HAL_TIM_ConfigClockSource+0x18a>
 80023f4:	2b40      	cmp	r3, #64	; 0x40
 80023f6:	d86f      	bhi.n	80024d8 <HAL_TIM_ConfigClockSource+0x1bc>
 80023f8:	2b30      	cmp	r3, #48	; 0x30
 80023fa:	d064      	beq.n	80024c6 <HAL_TIM_ConfigClockSource+0x1aa>
 80023fc:	2b30      	cmp	r3, #48	; 0x30
 80023fe:	d86b      	bhi.n	80024d8 <HAL_TIM_ConfigClockSource+0x1bc>
 8002400:	2b20      	cmp	r3, #32
 8002402:	d060      	beq.n	80024c6 <HAL_TIM_ConfigClockSource+0x1aa>
 8002404:	2b20      	cmp	r3, #32
 8002406:	d867      	bhi.n	80024d8 <HAL_TIM_ConfigClockSource+0x1bc>
 8002408:	2b00      	cmp	r3, #0
 800240a:	d05c      	beq.n	80024c6 <HAL_TIM_ConfigClockSource+0x1aa>
 800240c:	2b10      	cmp	r3, #16
 800240e:	d05a      	beq.n	80024c6 <HAL_TIM_ConfigClockSource+0x1aa>
 8002410:	e062      	b.n	80024d8 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6818      	ldr	r0, [r3, #0]
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	6899      	ldr	r1, [r3, #8]
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	685a      	ldr	r2, [r3, #4]
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	68db      	ldr	r3, [r3, #12]
 8002422:	f000 f98b 	bl	800273c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002434:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	68ba      	ldr	r2, [r7, #8]
 800243c:	609a      	str	r2, [r3, #8]
      break;
 800243e:	e04f      	b.n	80024e0 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6818      	ldr	r0, [r3, #0]
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	6899      	ldr	r1, [r3, #8]
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	685a      	ldr	r2, [r3, #4]
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	f000 f974 	bl	800273c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	689a      	ldr	r2, [r3, #8]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002462:	609a      	str	r2, [r3, #8]
      break;
 8002464:	e03c      	b.n	80024e0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6818      	ldr	r0, [r3, #0]
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	6859      	ldr	r1, [r3, #4]
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	68db      	ldr	r3, [r3, #12]
 8002472:	461a      	mov	r2, r3
 8002474:	f000 f8e4 	bl	8002640 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	2150      	movs	r1, #80	; 0x50
 800247e:	4618      	mov	r0, r3
 8002480:	f000 f93e 	bl	8002700 <TIM_ITRx_SetConfig>
      break;
 8002484:	e02c      	b.n	80024e0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6818      	ldr	r0, [r3, #0]
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	6859      	ldr	r1, [r3, #4]
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	68db      	ldr	r3, [r3, #12]
 8002492:	461a      	mov	r2, r3
 8002494:	f000 f903 	bl	800269e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	2160      	movs	r1, #96	; 0x60
 800249e:	4618      	mov	r0, r3
 80024a0:	f000 f92e 	bl	8002700 <TIM_ITRx_SetConfig>
      break;
 80024a4:	e01c      	b.n	80024e0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6818      	ldr	r0, [r3, #0]
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	6859      	ldr	r1, [r3, #4]
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	68db      	ldr	r3, [r3, #12]
 80024b2:	461a      	mov	r2, r3
 80024b4:	f000 f8c4 	bl	8002640 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	2140      	movs	r1, #64	; 0x40
 80024be:	4618      	mov	r0, r3
 80024c0:	f000 f91e 	bl	8002700 <TIM_ITRx_SetConfig>
      break;
 80024c4:	e00c      	b.n	80024e0 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4619      	mov	r1, r3
 80024d0:	4610      	mov	r0, r2
 80024d2:	f000 f915 	bl	8002700 <TIM_ITRx_SetConfig>
      break;
 80024d6:	e003      	b.n	80024e0 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	73fb      	strb	r3, [r7, #15]
      break;
 80024dc:	e000      	b.n	80024e0 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80024de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2201      	movs	r2, #1
 80024e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2200      	movs	r2, #0
 80024ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80024f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3710      	adds	r7, #16
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	ffceff88 	.word	0xffceff88
 8002500:	00100040 	.word	0x00100040
 8002504:	00100030 	.word	0x00100030
 8002508:	00100020 	.word	0x00100020

0800250c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800250c:	b480      	push	{r7}
 800250e:	b085      	sub	sp, #20
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	4a40      	ldr	r2, [pc, #256]	; (8002620 <TIM_Base_SetConfig+0x114>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d013      	beq.n	800254c <TIM_Base_SetConfig+0x40>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800252a:	d00f      	beq.n	800254c <TIM_Base_SetConfig+0x40>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	4a3d      	ldr	r2, [pc, #244]	; (8002624 <TIM_Base_SetConfig+0x118>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d00b      	beq.n	800254c <TIM_Base_SetConfig+0x40>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	4a3c      	ldr	r2, [pc, #240]	; (8002628 <TIM_Base_SetConfig+0x11c>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d007      	beq.n	800254c <TIM_Base_SetConfig+0x40>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	4a3b      	ldr	r2, [pc, #236]	; (800262c <TIM_Base_SetConfig+0x120>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d003      	beq.n	800254c <TIM_Base_SetConfig+0x40>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	4a3a      	ldr	r2, [pc, #232]	; (8002630 <TIM_Base_SetConfig+0x124>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d108      	bne.n	800255e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002552:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	68fa      	ldr	r2, [r7, #12]
 800255a:	4313      	orrs	r3, r2
 800255c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	4a2f      	ldr	r2, [pc, #188]	; (8002620 <TIM_Base_SetConfig+0x114>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d01f      	beq.n	80025a6 <TIM_Base_SetConfig+0x9a>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800256c:	d01b      	beq.n	80025a6 <TIM_Base_SetConfig+0x9a>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	4a2c      	ldr	r2, [pc, #176]	; (8002624 <TIM_Base_SetConfig+0x118>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d017      	beq.n	80025a6 <TIM_Base_SetConfig+0x9a>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	4a2b      	ldr	r2, [pc, #172]	; (8002628 <TIM_Base_SetConfig+0x11c>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d013      	beq.n	80025a6 <TIM_Base_SetConfig+0x9a>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	4a2a      	ldr	r2, [pc, #168]	; (800262c <TIM_Base_SetConfig+0x120>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d00f      	beq.n	80025a6 <TIM_Base_SetConfig+0x9a>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	4a29      	ldr	r2, [pc, #164]	; (8002630 <TIM_Base_SetConfig+0x124>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d00b      	beq.n	80025a6 <TIM_Base_SetConfig+0x9a>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	4a28      	ldr	r2, [pc, #160]	; (8002634 <TIM_Base_SetConfig+0x128>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d007      	beq.n	80025a6 <TIM_Base_SetConfig+0x9a>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4a27      	ldr	r2, [pc, #156]	; (8002638 <TIM_Base_SetConfig+0x12c>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d003      	beq.n	80025a6 <TIM_Base_SetConfig+0x9a>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4a26      	ldr	r2, [pc, #152]	; (800263c <TIM_Base_SetConfig+0x130>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d108      	bne.n	80025b8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	68db      	ldr	r3, [r3, #12]
 80025b2:	68fa      	ldr	r2, [r7, #12]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	695b      	ldr	r3, [r3, #20]
 80025c2:	4313      	orrs	r3, r2
 80025c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	68fa      	ldr	r2, [r7, #12]
 80025ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	689a      	ldr	r2, [r3, #8]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	4a10      	ldr	r2, [pc, #64]	; (8002620 <TIM_Base_SetConfig+0x114>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d00f      	beq.n	8002604 <TIM_Base_SetConfig+0xf8>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	4a12      	ldr	r2, [pc, #72]	; (8002630 <TIM_Base_SetConfig+0x124>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d00b      	beq.n	8002604 <TIM_Base_SetConfig+0xf8>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	4a11      	ldr	r2, [pc, #68]	; (8002634 <TIM_Base_SetConfig+0x128>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d007      	beq.n	8002604 <TIM_Base_SetConfig+0xf8>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	4a10      	ldr	r2, [pc, #64]	; (8002638 <TIM_Base_SetConfig+0x12c>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d003      	beq.n	8002604 <TIM_Base_SetConfig+0xf8>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	4a0f      	ldr	r2, [pc, #60]	; (800263c <TIM_Base_SetConfig+0x130>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d103      	bne.n	800260c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	691a      	ldr	r2, [r3, #16]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2201      	movs	r2, #1
 8002610:	615a      	str	r2, [r3, #20]
}
 8002612:	bf00      	nop
 8002614:	3714      	adds	r7, #20
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr
 800261e:	bf00      	nop
 8002620:	40010000 	.word	0x40010000
 8002624:	40000400 	.word	0x40000400
 8002628:	40000800 	.word	0x40000800
 800262c:	40000c00 	.word	0x40000c00
 8002630:	40010400 	.word	0x40010400
 8002634:	40014000 	.word	0x40014000
 8002638:	40014400 	.word	0x40014400
 800263c:	40014800 	.word	0x40014800

08002640 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002640:	b480      	push	{r7}
 8002642:	b087      	sub	sp, #28
 8002644:	af00      	add	r7, sp, #0
 8002646:	60f8      	str	r0, [r7, #12]
 8002648:	60b9      	str	r1, [r7, #8]
 800264a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	6a1b      	ldr	r3, [r3, #32]
 8002650:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	6a1b      	ldr	r3, [r3, #32]
 8002656:	f023 0201 	bic.w	r2, r3, #1
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	699b      	ldr	r3, [r3, #24]
 8002662:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800266a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	011b      	lsls	r3, r3, #4
 8002670:	693a      	ldr	r2, [r7, #16]
 8002672:	4313      	orrs	r3, r2
 8002674:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	f023 030a 	bic.w	r3, r3, #10
 800267c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800267e:	697a      	ldr	r2, [r7, #20]
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	4313      	orrs	r3, r2
 8002684:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	693a      	ldr	r2, [r7, #16]
 800268a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	697a      	ldr	r2, [r7, #20]
 8002690:	621a      	str	r2, [r3, #32]
}
 8002692:	bf00      	nop
 8002694:	371c      	adds	r7, #28
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr

0800269e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800269e:	b480      	push	{r7}
 80026a0:	b087      	sub	sp, #28
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	60f8      	str	r0, [r7, #12]
 80026a6:	60b9      	str	r1, [r7, #8]
 80026a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	6a1b      	ldr	r3, [r3, #32]
 80026ae:	f023 0210 	bic.w	r2, r3, #16
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	699b      	ldr	r3, [r3, #24]
 80026ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	6a1b      	ldr	r3, [r3, #32]
 80026c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80026c8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	031b      	lsls	r3, r3, #12
 80026ce:	697a      	ldr	r2, [r7, #20]
 80026d0:	4313      	orrs	r3, r2
 80026d2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80026da:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	011b      	lsls	r3, r3, #4
 80026e0:	693a      	ldr	r2, [r7, #16]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	697a      	ldr	r2, [r7, #20]
 80026ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	693a      	ldr	r2, [r7, #16]
 80026f0:	621a      	str	r2, [r3, #32]
}
 80026f2:	bf00      	nop
 80026f4:	371c      	adds	r7, #28
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr
	...

08002700 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002700:	b480      	push	{r7}
 8002702:	b085      	sub	sp, #20
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
 8002708:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002710:	68fa      	ldr	r2, [r7, #12]
 8002712:	4b09      	ldr	r3, [pc, #36]	; (8002738 <TIM_ITRx_SetConfig+0x38>)
 8002714:	4013      	ands	r3, r2
 8002716:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002718:	683a      	ldr	r2, [r7, #0]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	4313      	orrs	r3, r2
 800271e:	f043 0307 	orr.w	r3, r3, #7
 8002722:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	68fa      	ldr	r2, [r7, #12]
 8002728:	609a      	str	r2, [r3, #8]
}
 800272a:	bf00      	nop
 800272c:	3714      	adds	r7, #20
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr
 8002736:	bf00      	nop
 8002738:	ffcfff8f 	.word	0xffcfff8f

0800273c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800273c:	b480      	push	{r7}
 800273e:	b087      	sub	sp, #28
 8002740:	af00      	add	r7, sp, #0
 8002742:	60f8      	str	r0, [r7, #12]
 8002744:	60b9      	str	r1, [r7, #8]
 8002746:	607a      	str	r2, [r7, #4]
 8002748:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002756:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	021a      	lsls	r2, r3, #8
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	431a      	orrs	r2, r3
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	4313      	orrs	r3, r2
 8002764:	697a      	ldr	r2, [r7, #20]
 8002766:	4313      	orrs	r3, r2
 8002768:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	697a      	ldr	r2, [r7, #20]
 800276e:	609a      	str	r2, [r3, #8]
}
 8002770:	bf00      	nop
 8002772:	371c      	adds	r7, #28
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr

0800277c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800277c:	b480      	push	{r7}
 800277e:	b085      	sub	sp, #20
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
 8002784:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800278c:	2b01      	cmp	r3, #1
 800278e:	d101      	bne.n	8002794 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002790:	2302      	movs	r3, #2
 8002792:	e06d      	b.n	8002870 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2201      	movs	r2, #1
 8002798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2202      	movs	r2, #2
 80027a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a30      	ldr	r2, [pc, #192]	; (800287c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d004      	beq.n	80027c8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a2f      	ldr	r2, [pc, #188]	; (8002880 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d108      	bne.n	80027da <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80027ce:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	68fa      	ldr	r2, [r7, #12]
 80027d6:	4313      	orrs	r3, r2
 80027d8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027e0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	68fa      	ldr	r2, [r7, #12]
 80027e8:	4313      	orrs	r3, r2
 80027ea:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	68fa      	ldr	r2, [r7, #12]
 80027f2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a20      	ldr	r2, [pc, #128]	; (800287c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d022      	beq.n	8002844 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002806:	d01d      	beq.n	8002844 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a1d      	ldr	r2, [pc, #116]	; (8002884 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d018      	beq.n	8002844 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a1c      	ldr	r2, [pc, #112]	; (8002888 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d013      	beq.n	8002844 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a1a      	ldr	r2, [pc, #104]	; (800288c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d00e      	beq.n	8002844 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a15      	ldr	r2, [pc, #84]	; (8002880 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d009      	beq.n	8002844 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a16      	ldr	r2, [pc, #88]	; (8002890 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d004      	beq.n	8002844 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a15      	ldr	r2, [pc, #84]	; (8002894 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d10c      	bne.n	800285e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800284a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	68ba      	ldr	r2, [r7, #8]
 8002852:	4313      	orrs	r3, r2
 8002854:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	68ba      	ldr	r2, [r7, #8]
 800285c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2201      	movs	r2, #1
 8002862:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2200      	movs	r2, #0
 800286a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800286e:	2300      	movs	r3, #0
}
 8002870:	4618      	mov	r0, r3
 8002872:	3714      	adds	r7, #20
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr
 800287c:	40010000 	.word	0x40010000
 8002880:	40010400 	.word	0x40010400
 8002884:	40000400 	.word	0x40000400
 8002888:	40000800 	.word	0x40000800
 800288c:	40000c00 	.word	0x40000c00
 8002890:	40001800 	.word	0x40001800
 8002894:	40014000 	.word	0x40014000

08002898 <__NVIC_SetPriority>:
{
 8002898:	b480      	push	{r7}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
 800289e:	4603      	mov	r3, r0
 80028a0:	6039      	str	r1, [r7, #0]
 80028a2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80028a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	db0a      	blt.n	80028c2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	b2da      	uxtb	r2, r3
 80028b0:	490c      	ldr	r1, [pc, #48]	; (80028e4 <__NVIC_SetPriority+0x4c>)
 80028b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028b6:	0112      	lsls	r2, r2, #4
 80028b8:	b2d2      	uxtb	r2, r2
 80028ba:	440b      	add	r3, r1
 80028bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80028c0:	e00a      	b.n	80028d8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	b2da      	uxtb	r2, r3
 80028c6:	4908      	ldr	r1, [pc, #32]	; (80028e8 <__NVIC_SetPriority+0x50>)
 80028c8:	88fb      	ldrh	r3, [r7, #6]
 80028ca:	f003 030f 	and.w	r3, r3, #15
 80028ce:	3b04      	subs	r3, #4
 80028d0:	0112      	lsls	r2, r2, #4
 80028d2:	b2d2      	uxtb	r2, r2
 80028d4:	440b      	add	r3, r1
 80028d6:	761a      	strb	r2, [r3, #24]
}
 80028d8:	bf00      	nop
 80028da:	370c      	adds	r7, #12
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr
 80028e4:	e000e100 	.word	0xe000e100
 80028e8:	e000ed00 	.word	0xe000ed00

080028ec <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80028ec:	b580      	push	{r7, lr}
 80028ee:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80028f0:	2100      	movs	r1, #0
 80028f2:	f06f 0004 	mvn.w	r0, #4
 80028f6:	f7ff ffcf 	bl	8002898 <__NVIC_SetPriority>
#endif
}
 80028fa:	bf00      	nop
 80028fc:	bd80      	pop	{r7, pc}
	...

08002900 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002900:	b480      	push	{r7}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002906:	f3ef 8305 	mrs	r3, IPSR
 800290a:	603b      	str	r3, [r7, #0]
  return(result);
 800290c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800290e:	2b00      	cmp	r3, #0
 8002910:	d003      	beq.n	800291a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002912:	f06f 0305 	mvn.w	r3, #5
 8002916:	607b      	str	r3, [r7, #4]
 8002918:	e00c      	b.n	8002934 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800291a:	4b0a      	ldr	r3, [pc, #40]	; (8002944 <osKernelInitialize+0x44>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d105      	bne.n	800292e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002922:	4b08      	ldr	r3, [pc, #32]	; (8002944 <osKernelInitialize+0x44>)
 8002924:	2201      	movs	r2, #1
 8002926:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002928:	2300      	movs	r3, #0
 800292a:	607b      	str	r3, [r7, #4]
 800292c:	e002      	b.n	8002934 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800292e:	f04f 33ff 	mov.w	r3, #4294967295
 8002932:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002934:	687b      	ldr	r3, [r7, #4]
}
 8002936:	4618      	mov	r0, r3
 8002938:	370c      	adds	r7, #12
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr
 8002942:	bf00      	nop
 8002944:	24000148 	.word	0x24000148

08002948 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800294e:	f3ef 8305 	mrs	r3, IPSR
 8002952:	603b      	str	r3, [r7, #0]
  return(result);
 8002954:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002956:	2b00      	cmp	r3, #0
 8002958:	d003      	beq.n	8002962 <osKernelStart+0x1a>
    stat = osErrorISR;
 800295a:	f06f 0305 	mvn.w	r3, #5
 800295e:	607b      	str	r3, [r7, #4]
 8002960:	e010      	b.n	8002984 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002962:	4b0b      	ldr	r3, [pc, #44]	; (8002990 <osKernelStart+0x48>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	2b01      	cmp	r3, #1
 8002968:	d109      	bne.n	800297e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800296a:	f7ff ffbf 	bl	80028ec <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800296e:	4b08      	ldr	r3, [pc, #32]	; (8002990 <osKernelStart+0x48>)
 8002970:	2202      	movs	r2, #2
 8002972:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002974:	f001 f87c 	bl	8003a70 <vTaskStartScheduler>
      stat = osOK;
 8002978:	2300      	movs	r3, #0
 800297a:	607b      	str	r3, [r7, #4]
 800297c:	e002      	b.n	8002984 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800297e:	f04f 33ff 	mov.w	r3, #4294967295
 8002982:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002984:	687b      	ldr	r3, [r7, #4]
}
 8002986:	4618      	mov	r0, r3
 8002988:	3708      	adds	r7, #8
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	24000148 	.word	0x24000148

08002994 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002994:	b580      	push	{r7, lr}
 8002996:	b08e      	sub	sp, #56	; 0x38
 8002998:	af04      	add	r7, sp, #16
 800299a:	60f8      	str	r0, [r7, #12]
 800299c:	60b9      	str	r1, [r7, #8]
 800299e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80029a0:	2300      	movs	r3, #0
 80029a2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80029a4:	f3ef 8305 	mrs	r3, IPSR
 80029a8:	617b      	str	r3, [r7, #20]
  return(result);
 80029aa:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d17e      	bne.n	8002aae <osThreadNew+0x11a>
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d07b      	beq.n	8002aae <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80029b6:	2380      	movs	r3, #128	; 0x80
 80029b8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80029ba:	2318      	movs	r3, #24
 80029bc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80029be:	2300      	movs	r3, #0
 80029c0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80029c2:	f04f 33ff 	mov.w	r3, #4294967295
 80029c6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d045      	beq.n	8002a5a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d002      	beq.n	80029dc <osThreadNew+0x48>
        name = attr->name;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	699b      	ldr	r3, [r3, #24]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d002      	beq.n	80029ea <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	699b      	ldr	r3, [r3, #24]
 80029e8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d008      	beq.n	8002a02 <osThreadNew+0x6e>
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	2b38      	cmp	r3, #56	; 0x38
 80029f4:	d805      	bhi.n	8002a02 <osThreadNew+0x6e>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	f003 0301 	and.w	r3, r3, #1
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d001      	beq.n	8002a06 <osThreadNew+0x72>
        return (NULL);
 8002a02:	2300      	movs	r3, #0
 8002a04:	e054      	b.n	8002ab0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	695b      	ldr	r3, [r3, #20]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d003      	beq.n	8002a16 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	695b      	ldr	r3, [r3, #20]
 8002a12:	089b      	lsrs	r3, r3, #2
 8002a14:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d00e      	beq.n	8002a3c <osThreadNew+0xa8>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	68db      	ldr	r3, [r3, #12]
 8002a22:	2bbb      	cmp	r3, #187	; 0xbb
 8002a24:	d90a      	bls.n	8002a3c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d006      	beq.n	8002a3c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	695b      	ldr	r3, [r3, #20]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d002      	beq.n	8002a3c <osThreadNew+0xa8>
        mem = 1;
 8002a36:	2301      	movs	r3, #1
 8002a38:	61bb      	str	r3, [r7, #24]
 8002a3a:	e010      	b.n	8002a5e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d10c      	bne.n	8002a5e <osThreadNew+0xca>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d108      	bne.n	8002a5e <osThreadNew+0xca>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	691b      	ldr	r3, [r3, #16]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d104      	bne.n	8002a5e <osThreadNew+0xca>
          mem = 0;
 8002a54:	2300      	movs	r3, #0
 8002a56:	61bb      	str	r3, [r7, #24]
 8002a58:	e001      	b.n	8002a5e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002a5e:	69bb      	ldr	r3, [r7, #24]
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d110      	bne.n	8002a86 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002a68:	687a      	ldr	r2, [r7, #4]
 8002a6a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002a6c:	9202      	str	r2, [sp, #8]
 8002a6e:	9301      	str	r3, [sp, #4]
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	9300      	str	r3, [sp, #0]
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	6a3a      	ldr	r2, [r7, #32]
 8002a78:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a7a:	68f8      	ldr	r0, [r7, #12]
 8002a7c:	f000 fe0c 	bl	8003698 <xTaskCreateStatic>
 8002a80:	4603      	mov	r3, r0
 8002a82:	613b      	str	r3, [r7, #16]
 8002a84:	e013      	b.n	8002aae <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002a86:	69bb      	ldr	r3, [r7, #24]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d110      	bne.n	8002aae <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002a8c:	6a3b      	ldr	r3, [r7, #32]
 8002a8e:	b29a      	uxth	r2, r3
 8002a90:	f107 0310 	add.w	r3, r7, #16
 8002a94:	9301      	str	r3, [sp, #4]
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	9300      	str	r3, [sp, #0]
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a9e:	68f8      	ldr	r0, [r7, #12]
 8002aa0:	f000 fe57 	bl	8003752 <xTaskCreate>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d001      	beq.n	8002aae <osThreadNew+0x11a>
            hTask = NULL;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002aae:	693b      	ldr	r3, [r7, #16]
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3728      	adds	r7, #40	; 0x28
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}

08002ab8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b084      	sub	sp, #16
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002ac0:	f3ef 8305 	mrs	r3, IPSR
 8002ac4:	60bb      	str	r3, [r7, #8]
  return(result);
 8002ac6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d003      	beq.n	8002ad4 <osDelay+0x1c>
    stat = osErrorISR;
 8002acc:	f06f 0305 	mvn.w	r3, #5
 8002ad0:	60fb      	str	r3, [r7, #12]
 8002ad2:	e007      	b.n	8002ae4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d002      	beq.n	8002ae4 <osDelay+0x2c>
      vTaskDelay(ticks);
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f000 ff92 	bl	8003a08 <vTaskDelay>
    }
  }

  return (stat);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3710      	adds	r7, #16
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
	...

08002af0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002af0:	b480      	push	{r7}
 8002af2:	b085      	sub	sp, #20
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	60f8      	str	r0, [r7, #12]
 8002af8:	60b9      	str	r1, [r7, #8]
 8002afa:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	4a07      	ldr	r2, [pc, #28]	; (8002b1c <vApplicationGetIdleTaskMemory+0x2c>)
 8002b00:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	4a06      	ldr	r2, [pc, #24]	; (8002b20 <vApplicationGetIdleTaskMemory+0x30>)
 8002b06:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2280      	movs	r2, #128	; 0x80
 8002b0c:	601a      	str	r2, [r3, #0]
}
 8002b0e:	bf00      	nop
 8002b10:	3714      	adds	r7, #20
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr
 8002b1a:	bf00      	nop
 8002b1c:	2400014c 	.word	0x2400014c
 8002b20:	24000208 	.word	0x24000208

08002b24 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002b24:	b480      	push	{r7}
 8002b26:	b085      	sub	sp, #20
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	60f8      	str	r0, [r7, #12]
 8002b2c:	60b9      	str	r1, [r7, #8]
 8002b2e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	4a07      	ldr	r2, [pc, #28]	; (8002b50 <vApplicationGetTimerTaskMemory+0x2c>)
 8002b34:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	4a06      	ldr	r2, [pc, #24]	; (8002b54 <vApplicationGetTimerTaskMemory+0x30>)
 8002b3a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b42:	601a      	str	r2, [r3, #0]
}
 8002b44:	bf00      	nop
 8002b46:	3714      	adds	r7, #20
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr
 8002b50:	24000408 	.word	0x24000408
 8002b54:	240004c4 	.word	0x240004c4

08002b58 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	f103 0208 	add.w	r2, r3, #8
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	f04f 32ff 	mov.w	r2, #4294967295
 8002b70:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	f103 0208 	add.w	r2, r3, #8
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	f103 0208 	add.w	r2, r3, #8
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002b8c:	bf00      	nop
 8002b8e:	370c      	adds	r7, #12
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr

08002b98 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002ba6:	bf00      	nop
 8002ba8:	370c      	adds	r7, #12
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr

08002bb2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002bb2:	b480      	push	{r7}
 8002bb4:	b085      	sub	sp, #20
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	6078      	str	r0, [r7, #4]
 8002bba:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	68fa      	ldr	r2, [r7, #12]
 8002bc6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	689a      	ldr	r2, [r3, #8]
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	683a      	ldr	r2, [r7, #0]
 8002bd6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	683a      	ldr	r2, [r7, #0]
 8002bdc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	687a      	ldr	r2, [r7, #4]
 8002be2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	1c5a      	adds	r2, r3, #1
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	601a      	str	r2, [r3, #0]
}
 8002bee:	bf00      	nop
 8002bf0:	3714      	adds	r7, #20
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr

08002bfa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002bfa:	b480      	push	{r7}
 8002bfc:	b085      	sub	sp, #20
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	6078      	str	r0, [r7, #4]
 8002c02:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c10:	d103      	bne.n	8002c1a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	691b      	ldr	r3, [r3, #16]
 8002c16:	60fb      	str	r3, [r7, #12]
 8002c18:	e00c      	b.n	8002c34 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	3308      	adds	r3, #8
 8002c1e:	60fb      	str	r3, [r7, #12]
 8002c20:	e002      	b.n	8002c28 <vListInsert+0x2e>
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	60fb      	str	r3, [r7, #12]
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	68ba      	ldr	r2, [r7, #8]
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d2f6      	bcs.n	8002c22 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	685a      	ldr	r2, [r3, #4]
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	683a      	ldr	r2, [r7, #0]
 8002c42:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	68fa      	ldr	r2, [r7, #12]
 8002c48:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	683a      	ldr	r2, [r7, #0]
 8002c4e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	1c5a      	adds	r2, r3, #1
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	601a      	str	r2, [r3, #0]
}
 8002c60:	bf00      	nop
 8002c62:	3714      	adds	r7, #20
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr

08002c6c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b085      	sub	sp, #20
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	691b      	ldr	r3, [r3, #16]
 8002c78:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	6892      	ldr	r2, [r2, #8]
 8002c82:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	687a      	ldr	r2, [r7, #4]
 8002c8a:	6852      	ldr	r2, [r2, #4]
 8002c8c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	687a      	ldr	r2, [r7, #4]
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d103      	bne.n	8002ca0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	689a      	ldr	r2, [r3, #8]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	1e5a      	subs	r2, r3, #1
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3714      	adds	r7, #20
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr

08002cc0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b084      	sub	sp, #16
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
 8002cc8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d10a      	bne.n	8002cea <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cd8:	f383 8811 	msr	BASEPRI, r3
 8002cdc:	f3bf 8f6f 	isb	sy
 8002ce0:	f3bf 8f4f 	dsb	sy
 8002ce4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002ce6:	bf00      	nop
 8002ce8:	e7fe      	b.n	8002ce8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002cea:	f002 f87b 	bl	8004de4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cf6:	68f9      	ldr	r1, [r7, #12]
 8002cf8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002cfa:	fb01 f303 	mul.w	r3, r1, r3
 8002cfe:	441a      	add	r2, r3
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2200      	movs	r2, #0
 8002d08:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d1a:	3b01      	subs	r3, #1
 8002d1c:	68f9      	ldr	r1, [r7, #12]
 8002d1e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002d20:	fb01 f303 	mul.w	r3, r1, r3
 8002d24:	441a      	add	r2, r3
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	22ff      	movs	r2, #255	; 0xff
 8002d2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	22ff      	movs	r2, #255	; 0xff
 8002d36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d114      	bne.n	8002d6a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	691b      	ldr	r3, [r3, #16]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d01a      	beq.n	8002d7e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	3310      	adds	r3, #16
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f001 f929 	bl	8003fa4 <xTaskRemoveFromEventList>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d012      	beq.n	8002d7e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002d58:	4b0c      	ldr	r3, [pc, #48]	; (8002d8c <xQueueGenericReset+0xcc>)
 8002d5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d5e:	601a      	str	r2, [r3, #0]
 8002d60:	f3bf 8f4f 	dsb	sy
 8002d64:	f3bf 8f6f 	isb	sy
 8002d68:	e009      	b.n	8002d7e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	3310      	adds	r3, #16
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f7ff fef2 	bl	8002b58 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	3324      	adds	r3, #36	; 0x24
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f7ff feed 	bl	8002b58 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002d7e:	f002 f861 	bl	8004e44 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002d82:	2301      	movs	r3, #1
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	3710      	adds	r7, #16
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}
 8002d8c:	e000ed04 	.word	0xe000ed04

08002d90 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b08e      	sub	sp, #56	; 0x38
 8002d94:	af02      	add	r7, sp, #8
 8002d96:	60f8      	str	r0, [r7, #12]
 8002d98:	60b9      	str	r1, [r7, #8]
 8002d9a:	607a      	str	r2, [r7, #4]
 8002d9c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d10a      	bne.n	8002dba <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002da8:	f383 8811 	msr	BASEPRI, r3
 8002dac:	f3bf 8f6f 	isb	sy
 8002db0:	f3bf 8f4f 	dsb	sy
 8002db4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002db6:	bf00      	nop
 8002db8:	e7fe      	b.n	8002db8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d10a      	bne.n	8002dd6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dc4:	f383 8811 	msr	BASEPRI, r3
 8002dc8:	f3bf 8f6f 	isb	sy
 8002dcc:	f3bf 8f4f 	dsb	sy
 8002dd0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002dd2:	bf00      	nop
 8002dd4:	e7fe      	b.n	8002dd4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d002      	beq.n	8002de2 <xQueueGenericCreateStatic+0x52>
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d001      	beq.n	8002de6 <xQueueGenericCreateStatic+0x56>
 8002de2:	2301      	movs	r3, #1
 8002de4:	e000      	b.n	8002de8 <xQueueGenericCreateStatic+0x58>
 8002de6:	2300      	movs	r3, #0
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d10a      	bne.n	8002e02 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002df0:	f383 8811 	msr	BASEPRI, r3
 8002df4:	f3bf 8f6f 	isb	sy
 8002df8:	f3bf 8f4f 	dsb	sy
 8002dfc:	623b      	str	r3, [r7, #32]
}
 8002dfe:	bf00      	nop
 8002e00:	e7fe      	b.n	8002e00 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d102      	bne.n	8002e0e <xQueueGenericCreateStatic+0x7e>
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d101      	bne.n	8002e12 <xQueueGenericCreateStatic+0x82>
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e000      	b.n	8002e14 <xQueueGenericCreateStatic+0x84>
 8002e12:	2300      	movs	r3, #0
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d10a      	bne.n	8002e2e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e1c:	f383 8811 	msr	BASEPRI, r3
 8002e20:	f3bf 8f6f 	isb	sy
 8002e24:	f3bf 8f4f 	dsb	sy
 8002e28:	61fb      	str	r3, [r7, #28]
}
 8002e2a:	bf00      	nop
 8002e2c:	e7fe      	b.n	8002e2c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002e2e:	2350      	movs	r3, #80	; 0x50
 8002e30:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	2b50      	cmp	r3, #80	; 0x50
 8002e36:	d00a      	beq.n	8002e4e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e3c:	f383 8811 	msr	BASEPRI, r3
 8002e40:	f3bf 8f6f 	isb	sy
 8002e44:	f3bf 8f4f 	dsb	sy
 8002e48:	61bb      	str	r3, [r7, #24]
}
 8002e4a:	bf00      	nop
 8002e4c:	e7fe      	b.n	8002e4c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002e4e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d00d      	beq.n	8002e76 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002e62:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e68:	9300      	str	r3, [sp, #0]
 8002e6a:	4613      	mov	r3, r2
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	68b9      	ldr	r1, [r7, #8]
 8002e70:	68f8      	ldr	r0, [r7, #12]
 8002e72:	f000 f805 	bl	8002e80 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3730      	adds	r7, #48	; 0x30
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}

08002e80 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b084      	sub	sp, #16
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	60f8      	str	r0, [r7, #12]
 8002e88:	60b9      	str	r1, [r7, #8]
 8002e8a:	607a      	str	r2, [r7, #4]
 8002e8c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d103      	bne.n	8002e9c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002e94:	69bb      	ldr	r3, [r7, #24]
 8002e96:	69ba      	ldr	r2, [r7, #24]
 8002e98:	601a      	str	r2, [r3, #0]
 8002e9a:	e002      	b.n	8002ea2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002e9c:	69bb      	ldr	r3, [r7, #24]
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002ea2:	69bb      	ldr	r3, [r7, #24]
 8002ea4:	68fa      	ldr	r2, [r7, #12]
 8002ea6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002ea8:	69bb      	ldr	r3, [r7, #24]
 8002eaa:	68ba      	ldr	r2, [r7, #8]
 8002eac:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002eae:	2101      	movs	r1, #1
 8002eb0:	69b8      	ldr	r0, [r7, #24]
 8002eb2:	f7ff ff05 	bl	8002cc0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002eb6:	69bb      	ldr	r3, [r7, #24]
 8002eb8:	78fa      	ldrb	r2, [r7, #3]
 8002eba:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002ebe:	bf00      	nop
 8002ec0:	3710      	adds	r7, #16
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
	...

08002ec8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b08e      	sub	sp, #56	; 0x38
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	60f8      	str	r0, [r7, #12]
 8002ed0:	60b9      	str	r1, [r7, #8]
 8002ed2:	607a      	str	r2, [r7, #4]
 8002ed4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d10a      	bne.n	8002efa <xQueueGenericSend+0x32>
	__asm volatile
 8002ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ee8:	f383 8811 	msr	BASEPRI, r3
 8002eec:	f3bf 8f6f 	isb	sy
 8002ef0:	f3bf 8f4f 	dsb	sy
 8002ef4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002ef6:	bf00      	nop
 8002ef8:	e7fe      	b.n	8002ef8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d103      	bne.n	8002f08 <xQueueGenericSend+0x40>
 8002f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d101      	bne.n	8002f0c <xQueueGenericSend+0x44>
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e000      	b.n	8002f0e <xQueueGenericSend+0x46>
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d10a      	bne.n	8002f28 <xQueueGenericSend+0x60>
	__asm volatile
 8002f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f16:	f383 8811 	msr	BASEPRI, r3
 8002f1a:	f3bf 8f6f 	isb	sy
 8002f1e:	f3bf 8f4f 	dsb	sy
 8002f22:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002f24:	bf00      	nop
 8002f26:	e7fe      	b.n	8002f26 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	2b02      	cmp	r3, #2
 8002f2c:	d103      	bne.n	8002f36 <xQueueGenericSend+0x6e>
 8002f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d101      	bne.n	8002f3a <xQueueGenericSend+0x72>
 8002f36:	2301      	movs	r3, #1
 8002f38:	e000      	b.n	8002f3c <xQueueGenericSend+0x74>
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d10a      	bne.n	8002f56 <xQueueGenericSend+0x8e>
	__asm volatile
 8002f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f44:	f383 8811 	msr	BASEPRI, r3
 8002f48:	f3bf 8f6f 	isb	sy
 8002f4c:	f3bf 8f4f 	dsb	sy
 8002f50:	623b      	str	r3, [r7, #32]
}
 8002f52:	bf00      	nop
 8002f54:	e7fe      	b.n	8002f54 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002f56:	f001 f9e7 	bl	8004328 <xTaskGetSchedulerState>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d102      	bne.n	8002f66 <xQueueGenericSend+0x9e>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d101      	bne.n	8002f6a <xQueueGenericSend+0xa2>
 8002f66:	2301      	movs	r3, #1
 8002f68:	e000      	b.n	8002f6c <xQueueGenericSend+0xa4>
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d10a      	bne.n	8002f86 <xQueueGenericSend+0xbe>
	__asm volatile
 8002f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f74:	f383 8811 	msr	BASEPRI, r3
 8002f78:	f3bf 8f6f 	isb	sy
 8002f7c:	f3bf 8f4f 	dsb	sy
 8002f80:	61fb      	str	r3, [r7, #28]
}
 8002f82:	bf00      	nop
 8002f84:	e7fe      	b.n	8002f84 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002f86:	f001 ff2d 	bl	8004de4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d302      	bcc.n	8002f9c <xQueueGenericSend+0xd4>
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	2b02      	cmp	r3, #2
 8002f9a:	d129      	bne.n	8002ff0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002f9c:	683a      	ldr	r2, [r7, #0]
 8002f9e:	68b9      	ldr	r1, [r7, #8]
 8002fa0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002fa2:	f000 fa0b 	bl	80033bc <prvCopyDataToQueue>
 8002fa6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d010      	beq.n	8002fd2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fb2:	3324      	adds	r3, #36	; 0x24
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f000 fff5 	bl	8003fa4 <xTaskRemoveFromEventList>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d013      	beq.n	8002fe8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002fc0:	4b3f      	ldr	r3, [pc, #252]	; (80030c0 <xQueueGenericSend+0x1f8>)
 8002fc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fc6:	601a      	str	r2, [r3, #0]
 8002fc8:	f3bf 8f4f 	dsb	sy
 8002fcc:	f3bf 8f6f 	isb	sy
 8002fd0:	e00a      	b.n	8002fe8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d007      	beq.n	8002fe8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002fd8:	4b39      	ldr	r3, [pc, #228]	; (80030c0 <xQueueGenericSend+0x1f8>)
 8002fda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fde:	601a      	str	r2, [r3, #0]
 8002fe0:	f3bf 8f4f 	dsb	sy
 8002fe4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002fe8:	f001 ff2c 	bl	8004e44 <vPortExitCritical>
				return pdPASS;
 8002fec:	2301      	movs	r3, #1
 8002fee:	e063      	b.n	80030b8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d103      	bne.n	8002ffe <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002ff6:	f001 ff25 	bl	8004e44 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	e05c      	b.n	80030b8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002ffe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003000:	2b00      	cmp	r3, #0
 8003002:	d106      	bne.n	8003012 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003004:	f107 0314 	add.w	r3, r7, #20
 8003008:	4618      	mov	r0, r3
 800300a:	f001 f82f 	bl	800406c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800300e:	2301      	movs	r3, #1
 8003010:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003012:	f001 ff17 	bl	8004e44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003016:	f000 fd9b 	bl	8003b50 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800301a:	f001 fee3 	bl	8004de4 <vPortEnterCritical>
 800301e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003020:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003024:	b25b      	sxtb	r3, r3
 8003026:	f1b3 3fff 	cmp.w	r3, #4294967295
 800302a:	d103      	bne.n	8003034 <xQueueGenericSend+0x16c>
 800302c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800302e:	2200      	movs	r2, #0
 8003030:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003036:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800303a:	b25b      	sxtb	r3, r3
 800303c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003040:	d103      	bne.n	800304a <xQueueGenericSend+0x182>
 8003042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003044:	2200      	movs	r2, #0
 8003046:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800304a:	f001 fefb 	bl	8004e44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800304e:	1d3a      	adds	r2, r7, #4
 8003050:	f107 0314 	add.w	r3, r7, #20
 8003054:	4611      	mov	r1, r2
 8003056:	4618      	mov	r0, r3
 8003058:	f001 f81e 	bl	8004098 <xTaskCheckForTimeOut>
 800305c:	4603      	mov	r3, r0
 800305e:	2b00      	cmp	r3, #0
 8003060:	d124      	bne.n	80030ac <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003062:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003064:	f000 faa2 	bl	80035ac <prvIsQueueFull>
 8003068:	4603      	mov	r3, r0
 800306a:	2b00      	cmp	r3, #0
 800306c:	d018      	beq.n	80030a0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800306e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003070:	3310      	adds	r3, #16
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	4611      	mov	r1, r2
 8003076:	4618      	mov	r0, r3
 8003078:	f000 ff44 	bl	8003f04 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800307c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800307e:	f000 fa2d 	bl	80034dc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003082:	f000 fd73 	bl	8003b6c <xTaskResumeAll>
 8003086:	4603      	mov	r3, r0
 8003088:	2b00      	cmp	r3, #0
 800308a:	f47f af7c 	bne.w	8002f86 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800308e:	4b0c      	ldr	r3, [pc, #48]	; (80030c0 <xQueueGenericSend+0x1f8>)
 8003090:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003094:	601a      	str	r2, [r3, #0]
 8003096:	f3bf 8f4f 	dsb	sy
 800309a:	f3bf 8f6f 	isb	sy
 800309e:	e772      	b.n	8002f86 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80030a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80030a2:	f000 fa1b 	bl	80034dc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80030a6:	f000 fd61 	bl	8003b6c <xTaskResumeAll>
 80030aa:	e76c      	b.n	8002f86 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80030ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80030ae:	f000 fa15 	bl	80034dc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80030b2:	f000 fd5b 	bl	8003b6c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80030b6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3738      	adds	r7, #56	; 0x38
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	e000ed04 	.word	0xe000ed04

080030c4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b090      	sub	sp, #64	; 0x40
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	60f8      	str	r0, [r7, #12]
 80030cc:	60b9      	str	r1, [r7, #8]
 80030ce:	607a      	str	r2, [r7, #4]
 80030d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80030d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d10a      	bne.n	80030f2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80030dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030e0:	f383 8811 	msr	BASEPRI, r3
 80030e4:	f3bf 8f6f 	isb	sy
 80030e8:	f3bf 8f4f 	dsb	sy
 80030ec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80030ee:	bf00      	nop
 80030f0:	e7fe      	b.n	80030f0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d103      	bne.n	8003100 <xQueueGenericSendFromISR+0x3c>
 80030f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d101      	bne.n	8003104 <xQueueGenericSendFromISR+0x40>
 8003100:	2301      	movs	r3, #1
 8003102:	e000      	b.n	8003106 <xQueueGenericSendFromISR+0x42>
 8003104:	2300      	movs	r3, #0
 8003106:	2b00      	cmp	r3, #0
 8003108:	d10a      	bne.n	8003120 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800310a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800310e:	f383 8811 	msr	BASEPRI, r3
 8003112:	f3bf 8f6f 	isb	sy
 8003116:	f3bf 8f4f 	dsb	sy
 800311a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800311c:	bf00      	nop
 800311e:	e7fe      	b.n	800311e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	2b02      	cmp	r3, #2
 8003124:	d103      	bne.n	800312e <xQueueGenericSendFromISR+0x6a>
 8003126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003128:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800312a:	2b01      	cmp	r3, #1
 800312c:	d101      	bne.n	8003132 <xQueueGenericSendFromISR+0x6e>
 800312e:	2301      	movs	r3, #1
 8003130:	e000      	b.n	8003134 <xQueueGenericSendFromISR+0x70>
 8003132:	2300      	movs	r3, #0
 8003134:	2b00      	cmp	r3, #0
 8003136:	d10a      	bne.n	800314e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800313c:	f383 8811 	msr	BASEPRI, r3
 8003140:	f3bf 8f6f 	isb	sy
 8003144:	f3bf 8f4f 	dsb	sy
 8003148:	623b      	str	r3, [r7, #32]
}
 800314a:	bf00      	nop
 800314c:	e7fe      	b.n	800314c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800314e:	f001 ff2b 	bl	8004fa8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003152:	f3ef 8211 	mrs	r2, BASEPRI
 8003156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800315a:	f383 8811 	msr	BASEPRI, r3
 800315e:	f3bf 8f6f 	isb	sy
 8003162:	f3bf 8f4f 	dsb	sy
 8003166:	61fa      	str	r2, [r7, #28]
 8003168:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800316a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800316c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800316e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003170:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003174:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003176:	429a      	cmp	r2, r3
 8003178:	d302      	bcc.n	8003180 <xQueueGenericSendFromISR+0xbc>
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	2b02      	cmp	r3, #2
 800317e:	d12f      	bne.n	80031e0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003182:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003186:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800318a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800318c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800318e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003190:	683a      	ldr	r2, [r7, #0]
 8003192:	68b9      	ldr	r1, [r7, #8]
 8003194:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003196:	f000 f911 	bl	80033bc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800319a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800319e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031a2:	d112      	bne.n	80031ca <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80031a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d016      	beq.n	80031da <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80031ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031ae:	3324      	adds	r3, #36	; 0x24
 80031b0:	4618      	mov	r0, r3
 80031b2:	f000 fef7 	bl	8003fa4 <xTaskRemoveFromEventList>
 80031b6:	4603      	mov	r3, r0
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d00e      	beq.n	80031da <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d00b      	beq.n	80031da <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2201      	movs	r2, #1
 80031c6:	601a      	str	r2, [r3, #0]
 80031c8:	e007      	b.n	80031da <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80031ca:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80031ce:	3301      	adds	r3, #1
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	b25a      	sxtb	r2, r3
 80031d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80031da:	2301      	movs	r3, #1
 80031dc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80031de:	e001      	b.n	80031e4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80031e0:	2300      	movs	r3, #0
 80031e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031e6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80031ee:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80031f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3740      	adds	r7, #64	; 0x40
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
	...

080031fc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b08c      	sub	sp, #48	; 0x30
 8003200:	af00      	add	r7, sp, #0
 8003202:	60f8      	str	r0, [r7, #12]
 8003204:	60b9      	str	r1, [r7, #8]
 8003206:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003208:	2300      	movs	r3, #0
 800320a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003212:	2b00      	cmp	r3, #0
 8003214:	d10a      	bne.n	800322c <xQueueReceive+0x30>
	__asm volatile
 8003216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800321a:	f383 8811 	msr	BASEPRI, r3
 800321e:	f3bf 8f6f 	isb	sy
 8003222:	f3bf 8f4f 	dsb	sy
 8003226:	623b      	str	r3, [r7, #32]
}
 8003228:	bf00      	nop
 800322a:	e7fe      	b.n	800322a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d103      	bne.n	800323a <xQueueReceive+0x3e>
 8003232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003236:	2b00      	cmp	r3, #0
 8003238:	d101      	bne.n	800323e <xQueueReceive+0x42>
 800323a:	2301      	movs	r3, #1
 800323c:	e000      	b.n	8003240 <xQueueReceive+0x44>
 800323e:	2300      	movs	r3, #0
 8003240:	2b00      	cmp	r3, #0
 8003242:	d10a      	bne.n	800325a <xQueueReceive+0x5e>
	__asm volatile
 8003244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003248:	f383 8811 	msr	BASEPRI, r3
 800324c:	f3bf 8f6f 	isb	sy
 8003250:	f3bf 8f4f 	dsb	sy
 8003254:	61fb      	str	r3, [r7, #28]
}
 8003256:	bf00      	nop
 8003258:	e7fe      	b.n	8003258 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800325a:	f001 f865 	bl	8004328 <xTaskGetSchedulerState>
 800325e:	4603      	mov	r3, r0
 8003260:	2b00      	cmp	r3, #0
 8003262:	d102      	bne.n	800326a <xQueueReceive+0x6e>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d101      	bne.n	800326e <xQueueReceive+0x72>
 800326a:	2301      	movs	r3, #1
 800326c:	e000      	b.n	8003270 <xQueueReceive+0x74>
 800326e:	2300      	movs	r3, #0
 8003270:	2b00      	cmp	r3, #0
 8003272:	d10a      	bne.n	800328a <xQueueReceive+0x8e>
	__asm volatile
 8003274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003278:	f383 8811 	msr	BASEPRI, r3
 800327c:	f3bf 8f6f 	isb	sy
 8003280:	f3bf 8f4f 	dsb	sy
 8003284:	61bb      	str	r3, [r7, #24]
}
 8003286:	bf00      	nop
 8003288:	e7fe      	b.n	8003288 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800328a:	f001 fdab 	bl	8004de4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800328e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003292:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003296:	2b00      	cmp	r3, #0
 8003298:	d01f      	beq.n	80032da <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800329a:	68b9      	ldr	r1, [r7, #8]
 800329c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800329e:	f000 f8f7 	bl	8003490 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80032a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a4:	1e5a      	subs	r2, r3, #1
 80032a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032a8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80032aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032ac:	691b      	ldr	r3, [r3, #16]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d00f      	beq.n	80032d2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80032b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032b4:	3310      	adds	r3, #16
 80032b6:	4618      	mov	r0, r3
 80032b8:	f000 fe74 	bl	8003fa4 <xTaskRemoveFromEventList>
 80032bc:	4603      	mov	r3, r0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d007      	beq.n	80032d2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80032c2:	4b3d      	ldr	r3, [pc, #244]	; (80033b8 <xQueueReceive+0x1bc>)
 80032c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032c8:	601a      	str	r2, [r3, #0]
 80032ca:	f3bf 8f4f 	dsb	sy
 80032ce:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80032d2:	f001 fdb7 	bl	8004e44 <vPortExitCritical>
				return pdPASS;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e069      	b.n	80033ae <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d103      	bne.n	80032e8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80032e0:	f001 fdb0 	bl	8004e44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80032e4:	2300      	movs	r3, #0
 80032e6:	e062      	b.n	80033ae <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80032e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d106      	bne.n	80032fc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80032ee:	f107 0310 	add.w	r3, r7, #16
 80032f2:	4618      	mov	r0, r3
 80032f4:	f000 feba 	bl	800406c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80032f8:	2301      	movs	r3, #1
 80032fa:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80032fc:	f001 fda2 	bl	8004e44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003300:	f000 fc26 	bl	8003b50 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003304:	f001 fd6e 	bl	8004de4 <vPortEnterCritical>
 8003308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800330a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800330e:	b25b      	sxtb	r3, r3
 8003310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003314:	d103      	bne.n	800331e <xQueueReceive+0x122>
 8003316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003318:	2200      	movs	r2, #0
 800331a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800331e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003320:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003324:	b25b      	sxtb	r3, r3
 8003326:	f1b3 3fff 	cmp.w	r3, #4294967295
 800332a:	d103      	bne.n	8003334 <xQueueReceive+0x138>
 800332c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800332e:	2200      	movs	r2, #0
 8003330:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003334:	f001 fd86 	bl	8004e44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003338:	1d3a      	adds	r2, r7, #4
 800333a:	f107 0310 	add.w	r3, r7, #16
 800333e:	4611      	mov	r1, r2
 8003340:	4618      	mov	r0, r3
 8003342:	f000 fea9 	bl	8004098 <xTaskCheckForTimeOut>
 8003346:	4603      	mov	r3, r0
 8003348:	2b00      	cmp	r3, #0
 800334a:	d123      	bne.n	8003394 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800334c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800334e:	f000 f917 	bl	8003580 <prvIsQueueEmpty>
 8003352:	4603      	mov	r3, r0
 8003354:	2b00      	cmp	r3, #0
 8003356:	d017      	beq.n	8003388 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800335a:	3324      	adds	r3, #36	; 0x24
 800335c:	687a      	ldr	r2, [r7, #4]
 800335e:	4611      	mov	r1, r2
 8003360:	4618      	mov	r0, r3
 8003362:	f000 fdcf 	bl	8003f04 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003366:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003368:	f000 f8b8 	bl	80034dc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800336c:	f000 fbfe 	bl	8003b6c <xTaskResumeAll>
 8003370:	4603      	mov	r3, r0
 8003372:	2b00      	cmp	r3, #0
 8003374:	d189      	bne.n	800328a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003376:	4b10      	ldr	r3, [pc, #64]	; (80033b8 <xQueueReceive+0x1bc>)
 8003378:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800337c:	601a      	str	r2, [r3, #0]
 800337e:	f3bf 8f4f 	dsb	sy
 8003382:	f3bf 8f6f 	isb	sy
 8003386:	e780      	b.n	800328a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003388:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800338a:	f000 f8a7 	bl	80034dc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800338e:	f000 fbed 	bl	8003b6c <xTaskResumeAll>
 8003392:	e77a      	b.n	800328a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003394:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003396:	f000 f8a1 	bl	80034dc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800339a:	f000 fbe7 	bl	8003b6c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800339e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80033a0:	f000 f8ee 	bl	8003580 <prvIsQueueEmpty>
 80033a4:	4603      	mov	r3, r0
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	f43f af6f 	beq.w	800328a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80033ac:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3730      	adds	r7, #48	; 0x30
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	e000ed04 	.word	0xe000ed04

080033bc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b086      	sub	sp, #24
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	60f8      	str	r0, [r7, #12]
 80033c4:	60b9      	str	r1, [r7, #8]
 80033c6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80033c8:	2300      	movs	r3, #0
 80033ca:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033d0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d10d      	bne.n	80033f6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d14d      	bne.n	800347e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	4618      	mov	r0, r3
 80033e8:	f000 ffbc 	bl	8004364 <xTaskPriorityDisinherit>
 80033ec:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2200      	movs	r2, #0
 80033f2:	609a      	str	r2, [r3, #8]
 80033f4:	e043      	b.n	800347e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d119      	bne.n	8003430 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	6858      	ldr	r0, [r3, #4]
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003404:	461a      	mov	r2, r3
 8003406:	68b9      	ldr	r1, [r7, #8]
 8003408:	f002 f81e 	bl	8005448 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	685a      	ldr	r2, [r3, #4]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003414:	441a      	add	r2, r3
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	685a      	ldr	r2, [r3, #4]
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	429a      	cmp	r2, r3
 8003424:	d32b      	bcc.n	800347e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	605a      	str	r2, [r3, #4]
 800342e:	e026      	b.n	800347e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	68d8      	ldr	r0, [r3, #12]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003438:	461a      	mov	r2, r3
 800343a:	68b9      	ldr	r1, [r7, #8]
 800343c:	f002 f804 	bl	8005448 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	68da      	ldr	r2, [r3, #12]
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003448:	425b      	negs	r3, r3
 800344a:	441a      	add	r2, r3
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	68da      	ldr	r2, [r3, #12]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	429a      	cmp	r2, r3
 800345a:	d207      	bcs.n	800346c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	689a      	ldr	r2, [r3, #8]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003464:	425b      	negs	r3, r3
 8003466:	441a      	add	r2, r3
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2b02      	cmp	r3, #2
 8003470:	d105      	bne.n	800347e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d002      	beq.n	800347e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	3b01      	subs	r3, #1
 800347c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	1c5a      	adds	r2, r3, #1
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003486:	697b      	ldr	r3, [r7, #20]
}
 8003488:	4618      	mov	r0, r3
 800348a:	3718      	adds	r7, #24
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}

08003490 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b082      	sub	sp, #8
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
 8003498:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d018      	beq.n	80034d4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	68da      	ldr	r2, [r3, #12]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034aa:	441a      	add	r2, r3
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	68da      	ldr	r2, [r3, #12]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d303      	bcc.n	80034c4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	68d9      	ldr	r1, [r3, #12]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034cc:	461a      	mov	r2, r3
 80034ce:	6838      	ldr	r0, [r7, #0]
 80034d0:	f001 ffba 	bl	8005448 <memcpy>
	}
}
 80034d4:	bf00      	nop
 80034d6:	3708      	adds	r7, #8
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}

080034dc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b084      	sub	sp, #16
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80034e4:	f001 fc7e 	bl	8004de4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80034ee:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80034f0:	e011      	b.n	8003516 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d012      	beq.n	8003520 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	3324      	adds	r3, #36	; 0x24
 80034fe:	4618      	mov	r0, r3
 8003500:	f000 fd50 	bl	8003fa4 <xTaskRemoveFromEventList>
 8003504:	4603      	mov	r3, r0
 8003506:	2b00      	cmp	r3, #0
 8003508:	d001      	beq.n	800350e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800350a:	f000 fe27 	bl	800415c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800350e:	7bfb      	ldrb	r3, [r7, #15]
 8003510:	3b01      	subs	r3, #1
 8003512:	b2db      	uxtb	r3, r3
 8003514:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003516:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800351a:	2b00      	cmp	r3, #0
 800351c:	dce9      	bgt.n	80034f2 <prvUnlockQueue+0x16>
 800351e:	e000      	b.n	8003522 <prvUnlockQueue+0x46>
					break;
 8003520:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	22ff      	movs	r2, #255	; 0xff
 8003526:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800352a:	f001 fc8b 	bl	8004e44 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800352e:	f001 fc59 	bl	8004de4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003538:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800353a:	e011      	b.n	8003560 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	691b      	ldr	r3, [r3, #16]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d012      	beq.n	800356a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	3310      	adds	r3, #16
 8003548:	4618      	mov	r0, r3
 800354a:	f000 fd2b 	bl	8003fa4 <xTaskRemoveFromEventList>
 800354e:	4603      	mov	r3, r0
 8003550:	2b00      	cmp	r3, #0
 8003552:	d001      	beq.n	8003558 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003554:	f000 fe02 	bl	800415c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003558:	7bbb      	ldrb	r3, [r7, #14]
 800355a:	3b01      	subs	r3, #1
 800355c:	b2db      	uxtb	r3, r3
 800355e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003560:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003564:	2b00      	cmp	r3, #0
 8003566:	dce9      	bgt.n	800353c <prvUnlockQueue+0x60>
 8003568:	e000      	b.n	800356c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800356a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	22ff      	movs	r2, #255	; 0xff
 8003570:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003574:	f001 fc66 	bl	8004e44 <vPortExitCritical>
}
 8003578:	bf00      	nop
 800357a:	3710      	adds	r7, #16
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}

08003580 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b084      	sub	sp, #16
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003588:	f001 fc2c 	bl	8004de4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003590:	2b00      	cmp	r3, #0
 8003592:	d102      	bne.n	800359a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003594:	2301      	movs	r3, #1
 8003596:	60fb      	str	r3, [r7, #12]
 8003598:	e001      	b.n	800359e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800359a:	2300      	movs	r3, #0
 800359c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800359e:	f001 fc51 	bl	8004e44 <vPortExitCritical>

	return xReturn;
 80035a2:	68fb      	ldr	r3, [r7, #12]
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	3710      	adds	r7, #16
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}

080035ac <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b084      	sub	sp, #16
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80035b4:	f001 fc16 	bl	8004de4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d102      	bne.n	80035ca <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80035c4:	2301      	movs	r3, #1
 80035c6:	60fb      	str	r3, [r7, #12]
 80035c8:	e001      	b.n	80035ce <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80035ca:	2300      	movs	r3, #0
 80035cc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80035ce:	f001 fc39 	bl	8004e44 <vPortExitCritical>

	return xReturn;
 80035d2:	68fb      	ldr	r3, [r7, #12]
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3710      	adds	r7, #16
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}

080035dc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80035dc:	b480      	push	{r7}
 80035de:	b085      	sub	sp, #20
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
 80035e4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80035e6:	2300      	movs	r3, #0
 80035e8:	60fb      	str	r3, [r7, #12]
 80035ea:	e014      	b.n	8003616 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80035ec:	4a0f      	ldr	r2, [pc, #60]	; (800362c <vQueueAddToRegistry+0x50>)
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d10b      	bne.n	8003610 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80035f8:	490c      	ldr	r1, [pc, #48]	; (800362c <vQueueAddToRegistry+0x50>)
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	683a      	ldr	r2, [r7, #0]
 80035fe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003602:	4a0a      	ldr	r2, [pc, #40]	; (800362c <vQueueAddToRegistry+0x50>)
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	00db      	lsls	r3, r3, #3
 8003608:	4413      	add	r3, r2
 800360a:	687a      	ldr	r2, [r7, #4]
 800360c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800360e:	e006      	b.n	800361e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	3301      	adds	r3, #1
 8003614:	60fb      	str	r3, [r7, #12]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2b07      	cmp	r3, #7
 800361a:	d9e7      	bls.n	80035ec <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800361c:	bf00      	nop
 800361e:	bf00      	nop
 8003620:	3714      	adds	r7, #20
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr
 800362a:	bf00      	nop
 800362c:	240008c4 	.word	0x240008c4

08003630 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003630:	b580      	push	{r7, lr}
 8003632:	b086      	sub	sp, #24
 8003634:	af00      	add	r7, sp, #0
 8003636:	60f8      	str	r0, [r7, #12]
 8003638:	60b9      	str	r1, [r7, #8]
 800363a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003640:	f001 fbd0 	bl	8004de4 <vPortEnterCritical>
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800364a:	b25b      	sxtb	r3, r3
 800364c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003650:	d103      	bne.n	800365a <vQueueWaitForMessageRestricted+0x2a>
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	2200      	movs	r2, #0
 8003656:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003660:	b25b      	sxtb	r3, r3
 8003662:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003666:	d103      	bne.n	8003670 <vQueueWaitForMessageRestricted+0x40>
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	2200      	movs	r2, #0
 800366c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003670:	f001 fbe8 	bl	8004e44 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003678:	2b00      	cmp	r3, #0
 800367a:	d106      	bne.n	800368a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	3324      	adds	r3, #36	; 0x24
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	68b9      	ldr	r1, [r7, #8]
 8003684:	4618      	mov	r0, r3
 8003686:	f000 fc61 	bl	8003f4c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800368a:	6978      	ldr	r0, [r7, #20]
 800368c:	f7ff ff26 	bl	80034dc <prvUnlockQueue>
	}
 8003690:	bf00      	nop
 8003692:	3718      	adds	r7, #24
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}

08003698 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003698:	b580      	push	{r7, lr}
 800369a:	b08e      	sub	sp, #56	; 0x38
 800369c:	af04      	add	r7, sp, #16
 800369e:	60f8      	str	r0, [r7, #12]
 80036a0:	60b9      	str	r1, [r7, #8]
 80036a2:	607a      	str	r2, [r7, #4]
 80036a4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80036a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d10a      	bne.n	80036c2 <xTaskCreateStatic+0x2a>
	__asm volatile
 80036ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036b0:	f383 8811 	msr	BASEPRI, r3
 80036b4:	f3bf 8f6f 	isb	sy
 80036b8:	f3bf 8f4f 	dsb	sy
 80036bc:	623b      	str	r3, [r7, #32]
}
 80036be:	bf00      	nop
 80036c0:	e7fe      	b.n	80036c0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80036c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d10a      	bne.n	80036de <xTaskCreateStatic+0x46>
	__asm volatile
 80036c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036cc:	f383 8811 	msr	BASEPRI, r3
 80036d0:	f3bf 8f6f 	isb	sy
 80036d4:	f3bf 8f4f 	dsb	sy
 80036d8:	61fb      	str	r3, [r7, #28]
}
 80036da:	bf00      	nop
 80036dc:	e7fe      	b.n	80036dc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80036de:	23bc      	movs	r3, #188	; 0xbc
 80036e0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	2bbc      	cmp	r3, #188	; 0xbc
 80036e6:	d00a      	beq.n	80036fe <xTaskCreateStatic+0x66>
	__asm volatile
 80036e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036ec:	f383 8811 	msr	BASEPRI, r3
 80036f0:	f3bf 8f6f 	isb	sy
 80036f4:	f3bf 8f4f 	dsb	sy
 80036f8:	61bb      	str	r3, [r7, #24]
}
 80036fa:	bf00      	nop
 80036fc:	e7fe      	b.n	80036fc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80036fe:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003702:	2b00      	cmp	r3, #0
 8003704:	d01e      	beq.n	8003744 <xTaskCreateStatic+0xac>
 8003706:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003708:	2b00      	cmp	r3, #0
 800370a:	d01b      	beq.n	8003744 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800370c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800370e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003712:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003714:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003718:	2202      	movs	r2, #2
 800371a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800371e:	2300      	movs	r3, #0
 8003720:	9303      	str	r3, [sp, #12]
 8003722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003724:	9302      	str	r3, [sp, #8]
 8003726:	f107 0314 	add.w	r3, r7, #20
 800372a:	9301      	str	r3, [sp, #4]
 800372c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800372e:	9300      	str	r3, [sp, #0]
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	687a      	ldr	r2, [r7, #4]
 8003734:	68b9      	ldr	r1, [r7, #8]
 8003736:	68f8      	ldr	r0, [r7, #12]
 8003738:	f000 f850 	bl	80037dc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800373c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800373e:	f000 f8f3 	bl	8003928 <prvAddNewTaskToReadyList>
 8003742:	e001      	b.n	8003748 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003744:	2300      	movs	r3, #0
 8003746:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003748:	697b      	ldr	r3, [r7, #20]
	}
 800374a:	4618      	mov	r0, r3
 800374c:	3728      	adds	r7, #40	; 0x28
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}

08003752 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003752:	b580      	push	{r7, lr}
 8003754:	b08c      	sub	sp, #48	; 0x30
 8003756:	af04      	add	r7, sp, #16
 8003758:	60f8      	str	r0, [r7, #12]
 800375a:	60b9      	str	r1, [r7, #8]
 800375c:	603b      	str	r3, [r7, #0]
 800375e:	4613      	mov	r3, r2
 8003760:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003762:	88fb      	ldrh	r3, [r7, #6]
 8003764:	009b      	lsls	r3, r3, #2
 8003766:	4618      	mov	r0, r3
 8003768:	f001 fc5e 	bl	8005028 <pvPortMalloc>
 800376c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d00e      	beq.n	8003792 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003774:	20bc      	movs	r0, #188	; 0xbc
 8003776:	f001 fc57 	bl	8005028 <pvPortMalloc>
 800377a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800377c:	69fb      	ldr	r3, [r7, #28]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d003      	beq.n	800378a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003782:	69fb      	ldr	r3, [r7, #28]
 8003784:	697a      	ldr	r2, [r7, #20]
 8003786:	631a      	str	r2, [r3, #48]	; 0x30
 8003788:	e005      	b.n	8003796 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800378a:	6978      	ldr	r0, [r7, #20]
 800378c:	f001 fd18 	bl	80051c0 <vPortFree>
 8003790:	e001      	b.n	8003796 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003792:	2300      	movs	r3, #0
 8003794:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d017      	beq.n	80037cc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800379c:	69fb      	ldr	r3, [r7, #28]
 800379e:	2200      	movs	r2, #0
 80037a0:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80037a4:	88fa      	ldrh	r2, [r7, #6]
 80037a6:	2300      	movs	r3, #0
 80037a8:	9303      	str	r3, [sp, #12]
 80037aa:	69fb      	ldr	r3, [r7, #28]
 80037ac:	9302      	str	r3, [sp, #8]
 80037ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037b0:	9301      	str	r3, [sp, #4]
 80037b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037b4:	9300      	str	r3, [sp, #0]
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	68b9      	ldr	r1, [r7, #8]
 80037ba:	68f8      	ldr	r0, [r7, #12]
 80037bc:	f000 f80e 	bl	80037dc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80037c0:	69f8      	ldr	r0, [r7, #28]
 80037c2:	f000 f8b1 	bl	8003928 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80037c6:	2301      	movs	r3, #1
 80037c8:	61bb      	str	r3, [r7, #24]
 80037ca:	e002      	b.n	80037d2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80037cc:	f04f 33ff 	mov.w	r3, #4294967295
 80037d0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80037d2:	69bb      	ldr	r3, [r7, #24]
	}
 80037d4:	4618      	mov	r0, r3
 80037d6:	3720      	adds	r7, #32
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}

080037dc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b088      	sub	sp, #32
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	60f8      	str	r0, [r7, #12]
 80037e4:	60b9      	str	r1, [r7, #8]
 80037e6:	607a      	str	r2, [r7, #4]
 80037e8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80037ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ec:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	009b      	lsls	r3, r3, #2
 80037f2:	461a      	mov	r2, r3
 80037f4:	21a5      	movs	r1, #165	; 0xa5
 80037f6:	f001 fe35 	bl	8005464 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80037fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037fe:	6879      	ldr	r1, [r7, #4]
 8003800:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8003804:	440b      	add	r3, r1
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	4413      	add	r3, r2
 800380a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800380c:	69bb      	ldr	r3, [r7, #24]
 800380e:	f023 0307 	bic.w	r3, r3, #7
 8003812:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003814:	69bb      	ldr	r3, [r7, #24]
 8003816:	f003 0307 	and.w	r3, r3, #7
 800381a:	2b00      	cmp	r3, #0
 800381c:	d00a      	beq.n	8003834 <prvInitialiseNewTask+0x58>
	__asm volatile
 800381e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003822:	f383 8811 	msr	BASEPRI, r3
 8003826:	f3bf 8f6f 	isb	sy
 800382a:	f3bf 8f4f 	dsb	sy
 800382e:	617b      	str	r3, [r7, #20]
}
 8003830:	bf00      	nop
 8003832:	e7fe      	b.n	8003832 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d01f      	beq.n	800387a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800383a:	2300      	movs	r3, #0
 800383c:	61fb      	str	r3, [r7, #28]
 800383e:	e012      	b.n	8003866 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003840:	68ba      	ldr	r2, [r7, #8]
 8003842:	69fb      	ldr	r3, [r7, #28]
 8003844:	4413      	add	r3, r2
 8003846:	7819      	ldrb	r1, [r3, #0]
 8003848:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	4413      	add	r3, r2
 800384e:	3334      	adds	r3, #52	; 0x34
 8003850:	460a      	mov	r2, r1
 8003852:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003854:	68ba      	ldr	r2, [r7, #8]
 8003856:	69fb      	ldr	r3, [r7, #28]
 8003858:	4413      	add	r3, r2
 800385a:	781b      	ldrb	r3, [r3, #0]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d006      	beq.n	800386e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003860:	69fb      	ldr	r3, [r7, #28]
 8003862:	3301      	adds	r3, #1
 8003864:	61fb      	str	r3, [r7, #28]
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	2b0f      	cmp	r3, #15
 800386a:	d9e9      	bls.n	8003840 <prvInitialiseNewTask+0x64>
 800386c:	e000      	b.n	8003870 <prvInitialiseNewTask+0x94>
			{
				break;
 800386e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003872:	2200      	movs	r2, #0
 8003874:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003878:	e003      	b.n	8003882 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800387a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800387c:	2200      	movs	r2, #0
 800387e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003884:	2b37      	cmp	r3, #55	; 0x37
 8003886:	d901      	bls.n	800388c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003888:	2337      	movs	r3, #55	; 0x37
 800388a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800388c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800388e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003890:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003894:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003896:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800389a:	2200      	movs	r2, #0
 800389c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800389e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038a0:	3304      	adds	r3, #4
 80038a2:	4618      	mov	r0, r3
 80038a4:	f7ff f978 	bl	8002b98 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80038a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038aa:	3318      	adds	r3, #24
 80038ac:	4618      	mov	r0, r3
 80038ae:	f7ff f973 	bl	8002b98 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80038b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038b6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80038b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038ba:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80038be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038c0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80038c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038c6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80038c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ca:	2200      	movs	r2, #0
 80038cc:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80038d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038d2:	2200      	movs	r2, #0
 80038d4:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80038d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038da:	3354      	adds	r3, #84	; 0x54
 80038dc:	2260      	movs	r2, #96	; 0x60
 80038de:	2100      	movs	r1, #0
 80038e0:	4618      	mov	r0, r3
 80038e2:	f001 fdbf 	bl	8005464 <memset>
 80038e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038e8:	4a0c      	ldr	r2, [pc, #48]	; (800391c <prvInitialiseNewTask+0x140>)
 80038ea:	659a      	str	r2, [r3, #88]	; 0x58
 80038ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ee:	4a0c      	ldr	r2, [pc, #48]	; (8003920 <prvInitialiseNewTask+0x144>)
 80038f0:	65da      	str	r2, [r3, #92]	; 0x5c
 80038f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038f4:	4a0b      	ldr	r2, [pc, #44]	; (8003924 <prvInitialiseNewTask+0x148>)
 80038f6:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80038f8:	683a      	ldr	r2, [r7, #0]
 80038fa:	68f9      	ldr	r1, [r7, #12]
 80038fc:	69b8      	ldr	r0, [r7, #24]
 80038fe:	f001 f941 	bl	8004b84 <pxPortInitialiseStack>
 8003902:	4602      	mov	r2, r0
 8003904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003906:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800390a:	2b00      	cmp	r3, #0
 800390c:	d002      	beq.n	8003914 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800390e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003910:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003912:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003914:	bf00      	nop
 8003916:	3720      	adds	r7, #32
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}
 800391c:	08005714 	.word	0x08005714
 8003920:	08005734 	.word	0x08005734
 8003924:	080056f4 	.word	0x080056f4

08003928 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b082      	sub	sp, #8
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003930:	f001 fa58 	bl	8004de4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003934:	4b2d      	ldr	r3, [pc, #180]	; (80039ec <prvAddNewTaskToReadyList+0xc4>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	3301      	adds	r3, #1
 800393a:	4a2c      	ldr	r2, [pc, #176]	; (80039ec <prvAddNewTaskToReadyList+0xc4>)
 800393c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800393e:	4b2c      	ldr	r3, [pc, #176]	; (80039f0 <prvAddNewTaskToReadyList+0xc8>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d109      	bne.n	800395a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003946:	4a2a      	ldr	r2, [pc, #168]	; (80039f0 <prvAddNewTaskToReadyList+0xc8>)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800394c:	4b27      	ldr	r3, [pc, #156]	; (80039ec <prvAddNewTaskToReadyList+0xc4>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	2b01      	cmp	r3, #1
 8003952:	d110      	bne.n	8003976 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003954:	f000 fc26 	bl	80041a4 <prvInitialiseTaskLists>
 8003958:	e00d      	b.n	8003976 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800395a:	4b26      	ldr	r3, [pc, #152]	; (80039f4 <prvAddNewTaskToReadyList+0xcc>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d109      	bne.n	8003976 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003962:	4b23      	ldr	r3, [pc, #140]	; (80039f0 <prvAddNewTaskToReadyList+0xc8>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800396c:	429a      	cmp	r2, r3
 800396e:	d802      	bhi.n	8003976 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003970:	4a1f      	ldr	r2, [pc, #124]	; (80039f0 <prvAddNewTaskToReadyList+0xc8>)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003976:	4b20      	ldr	r3, [pc, #128]	; (80039f8 <prvAddNewTaskToReadyList+0xd0>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	3301      	adds	r3, #1
 800397c:	4a1e      	ldr	r2, [pc, #120]	; (80039f8 <prvAddNewTaskToReadyList+0xd0>)
 800397e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003980:	4b1d      	ldr	r3, [pc, #116]	; (80039f8 <prvAddNewTaskToReadyList+0xd0>)
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800398c:	4b1b      	ldr	r3, [pc, #108]	; (80039fc <prvAddNewTaskToReadyList+0xd4>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	429a      	cmp	r2, r3
 8003992:	d903      	bls.n	800399c <prvAddNewTaskToReadyList+0x74>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003998:	4a18      	ldr	r2, [pc, #96]	; (80039fc <prvAddNewTaskToReadyList+0xd4>)
 800399a:	6013      	str	r3, [r2, #0]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039a0:	4613      	mov	r3, r2
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	4413      	add	r3, r2
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	4a15      	ldr	r2, [pc, #84]	; (8003a00 <prvAddNewTaskToReadyList+0xd8>)
 80039aa:	441a      	add	r2, r3
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	3304      	adds	r3, #4
 80039b0:	4619      	mov	r1, r3
 80039b2:	4610      	mov	r0, r2
 80039b4:	f7ff f8fd 	bl	8002bb2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80039b8:	f001 fa44 	bl	8004e44 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80039bc:	4b0d      	ldr	r3, [pc, #52]	; (80039f4 <prvAddNewTaskToReadyList+0xcc>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d00e      	beq.n	80039e2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80039c4:	4b0a      	ldr	r3, [pc, #40]	; (80039f0 <prvAddNewTaskToReadyList+0xc8>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ce:	429a      	cmp	r2, r3
 80039d0:	d207      	bcs.n	80039e2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80039d2:	4b0c      	ldr	r3, [pc, #48]	; (8003a04 <prvAddNewTaskToReadyList+0xdc>)
 80039d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039d8:	601a      	str	r2, [r3, #0]
 80039da:	f3bf 8f4f 	dsb	sy
 80039de:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80039e2:	bf00      	nop
 80039e4:	3708      	adds	r7, #8
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}
 80039ea:	bf00      	nop
 80039ec:	24000dd8 	.word	0x24000dd8
 80039f0:	24000904 	.word	0x24000904
 80039f4:	24000de4 	.word	0x24000de4
 80039f8:	24000df4 	.word	0x24000df4
 80039fc:	24000de0 	.word	0x24000de0
 8003a00:	24000908 	.word	0x24000908
 8003a04:	e000ed04 	.word	0xe000ed04

08003a08 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b084      	sub	sp, #16
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003a10:	2300      	movs	r3, #0
 8003a12:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d017      	beq.n	8003a4a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003a1a:	4b13      	ldr	r3, [pc, #76]	; (8003a68 <vTaskDelay+0x60>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d00a      	beq.n	8003a38 <vTaskDelay+0x30>
	__asm volatile
 8003a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a26:	f383 8811 	msr	BASEPRI, r3
 8003a2a:	f3bf 8f6f 	isb	sy
 8003a2e:	f3bf 8f4f 	dsb	sy
 8003a32:	60bb      	str	r3, [r7, #8]
}
 8003a34:	bf00      	nop
 8003a36:	e7fe      	b.n	8003a36 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003a38:	f000 f88a 	bl	8003b50 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003a3c:	2100      	movs	r1, #0
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f000 fcfe 	bl	8004440 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003a44:	f000 f892 	bl	8003b6c <xTaskResumeAll>
 8003a48:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d107      	bne.n	8003a60 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003a50:	4b06      	ldr	r3, [pc, #24]	; (8003a6c <vTaskDelay+0x64>)
 8003a52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a56:	601a      	str	r2, [r3, #0]
 8003a58:	f3bf 8f4f 	dsb	sy
 8003a5c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003a60:	bf00      	nop
 8003a62:	3710      	adds	r7, #16
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}
 8003a68:	24000e00 	.word	0x24000e00
 8003a6c:	e000ed04 	.word	0xe000ed04

08003a70 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b08a      	sub	sp, #40	; 0x28
 8003a74:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003a76:	2300      	movs	r3, #0
 8003a78:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003a7e:	463a      	mov	r2, r7
 8003a80:	1d39      	adds	r1, r7, #4
 8003a82:	f107 0308 	add.w	r3, r7, #8
 8003a86:	4618      	mov	r0, r3
 8003a88:	f7ff f832 	bl	8002af0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003a8c:	6839      	ldr	r1, [r7, #0]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	68ba      	ldr	r2, [r7, #8]
 8003a92:	9202      	str	r2, [sp, #8]
 8003a94:	9301      	str	r3, [sp, #4]
 8003a96:	2300      	movs	r3, #0
 8003a98:	9300      	str	r3, [sp, #0]
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	460a      	mov	r2, r1
 8003a9e:	4924      	ldr	r1, [pc, #144]	; (8003b30 <vTaskStartScheduler+0xc0>)
 8003aa0:	4824      	ldr	r0, [pc, #144]	; (8003b34 <vTaskStartScheduler+0xc4>)
 8003aa2:	f7ff fdf9 	bl	8003698 <xTaskCreateStatic>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	4a23      	ldr	r2, [pc, #140]	; (8003b38 <vTaskStartScheduler+0xc8>)
 8003aaa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003aac:	4b22      	ldr	r3, [pc, #136]	; (8003b38 <vTaskStartScheduler+0xc8>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d002      	beq.n	8003aba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	617b      	str	r3, [r7, #20]
 8003ab8:	e001      	b.n	8003abe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003aba:	2300      	movs	r3, #0
 8003abc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d102      	bne.n	8003aca <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003ac4:	f000 fd10 	bl	80044e8 <xTimerCreateTimerTask>
 8003ac8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	d11b      	bne.n	8003b08 <vTaskStartScheduler+0x98>
	__asm volatile
 8003ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ad4:	f383 8811 	msr	BASEPRI, r3
 8003ad8:	f3bf 8f6f 	isb	sy
 8003adc:	f3bf 8f4f 	dsb	sy
 8003ae0:	613b      	str	r3, [r7, #16]
}
 8003ae2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003ae4:	4b15      	ldr	r3, [pc, #84]	; (8003b3c <vTaskStartScheduler+0xcc>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	3354      	adds	r3, #84	; 0x54
 8003aea:	4a15      	ldr	r2, [pc, #84]	; (8003b40 <vTaskStartScheduler+0xd0>)
 8003aec:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003aee:	4b15      	ldr	r3, [pc, #84]	; (8003b44 <vTaskStartScheduler+0xd4>)
 8003af0:	f04f 32ff 	mov.w	r2, #4294967295
 8003af4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003af6:	4b14      	ldr	r3, [pc, #80]	; (8003b48 <vTaskStartScheduler+0xd8>)
 8003af8:	2201      	movs	r2, #1
 8003afa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003afc:	4b13      	ldr	r3, [pc, #76]	; (8003b4c <vTaskStartScheduler+0xdc>)
 8003afe:	2200      	movs	r2, #0
 8003b00:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003b02:	f001 f8cd 	bl	8004ca0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003b06:	e00e      	b.n	8003b26 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b0e:	d10a      	bne.n	8003b26 <vTaskStartScheduler+0xb6>
	__asm volatile
 8003b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b14:	f383 8811 	msr	BASEPRI, r3
 8003b18:	f3bf 8f6f 	isb	sy
 8003b1c:	f3bf 8f4f 	dsb	sy
 8003b20:	60fb      	str	r3, [r7, #12]
}
 8003b22:	bf00      	nop
 8003b24:	e7fe      	b.n	8003b24 <vTaskStartScheduler+0xb4>
}
 8003b26:	bf00      	nop
 8003b28:	3718      	adds	r7, #24
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}
 8003b2e:	bf00      	nop
 8003b30:	0800563c 	.word	0x0800563c
 8003b34:	08004175 	.word	0x08004175
 8003b38:	24000dfc 	.word	0x24000dfc
 8003b3c:	24000904 	.word	0x24000904
 8003b40:	24000014 	.word	0x24000014
 8003b44:	24000df8 	.word	0x24000df8
 8003b48:	24000de4 	.word	0x24000de4
 8003b4c:	24000ddc 	.word	0x24000ddc

08003b50 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003b50:	b480      	push	{r7}
 8003b52:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003b54:	4b04      	ldr	r3, [pc, #16]	; (8003b68 <vTaskSuspendAll+0x18>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	3301      	adds	r3, #1
 8003b5a:	4a03      	ldr	r2, [pc, #12]	; (8003b68 <vTaskSuspendAll+0x18>)
 8003b5c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003b5e:	bf00      	nop
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr
 8003b68:	24000e00 	.word	0x24000e00

08003b6c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b084      	sub	sp, #16
 8003b70:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003b72:	2300      	movs	r3, #0
 8003b74:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003b76:	2300      	movs	r3, #0
 8003b78:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003b7a:	4b42      	ldr	r3, [pc, #264]	; (8003c84 <xTaskResumeAll+0x118>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d10a      	bne.n	8003b98 <xTaskResumeAll+0x2c>
	__asm volatile
 8003b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b86:	f383 8811 	msr	BASEPRI, r3
 8003b8a:	f3bf 8f6f 	isb	sy
 8003b8e:	f3bf 8f4f 	dsb	sy
 8003b92:	603b      	str	r3, [r7, #0]
}
 8003b94:	bf00      	nop
 8003b96:	e7fe      	b.n	8003b96 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003b98:	f001 f924 	bl	8004de4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003b9c:	4b39      	ldr	r3, [pc, #228]	; (8003c84 <xTaskResumeAll+0x118>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	3b01      	subs	r3, #1
 8003ba2:	4a38      	ldr	r2, [pc, #224]	; (8003c84 <xTaskResumeAll+0x118>)
 8003ba4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ba6:	4b37      	ldr	r3, [pc, #220]	; (8003c84 <xTaskResumeAll+0x118>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d162      	bne.n	8003c74 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003bae:	4b36      	ldr	r3, [pc, #216]	; (8003c88 <xTaskResumeAll+0x11c>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d05e      	beq.n	8003c74 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003bb6:	e02f      	b.n	8003c18 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003bb8:	4b34      	ldr	r3, [pc, #208]	; (8003c8c <xTaskResumeAll+0x120>)
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	68db      	ldr	r3, [r3, #12]
 8003bbe:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	3318      	adds	r3, #24
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f7ff f851 	bl	8002c6c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	3304      	adds	r3, #4
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f7ff f84c 	bl	8002c6c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bd8:	4b2d      	ldr	r3, [pc, #180]	; (8003c90 <xTaskResumeAll+0x124>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d903      	bls.n	8003be8 <xTaskResumeAll+0x7c>
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be4:	4a2a      	ldr	r2, [pc, #168]	; (8003c90 <xTaskResumeAll+0x124>)
 8003be6:	6013      	str	r3, [r2, #0]
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bec:	4613      	mov	r3, r2
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	4413      	add	r3, r2
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	4a27      	ldr	r2, [pc, #156]	; (8003c94 <xTaskResumeAll+0x128>)
 8003bf6:	441a      	add	r2, r3
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	3304      	adds	r3, #4
 8003bfc:	4619      	mov	r1, r3
 8003bfe:	4610      	mov	r0, r2
 8003c00:	f7fe ffd7 	bl	8002bb2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c08:	4b23      	ldr	r3, [pc, #140]	; (8003c98 <xTaskResumeAll+0x12c>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	d302      	bcc.n	8003c18 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003c12:	4b22      	ldr	r3, [pc, #136]	; (8003c9c <xTaskResumeAll+0x130>)
 8003c14:	2201      	movs	r2, #1
 8003c16:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003c18:	4b1c      	ldr	r3, [pc, #112]	; (8003c8c <xTaskResumeAll+0x120>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d1cb      	bne.n	8003bb8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d001      	beq.n	8003c2a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003c26:	f000 fb5f 	bl	80042e8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003c2a:	4b1d      	ldr	r3, [pc, #116]	; (8003ca0 <xTaskResumeAll+0x134>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d010      	beq.n	8003c58 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003c36:	f000 f847 	bl	8003cc8 <xTaskIncrementTick>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d002      	beq.n	8003c46 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003c40:	4b16      	ldr	r3, [pc, #88]	; (8003c9c <xTaskResumeAll+0x130>)
 8003c42:	2201      	movs	r2, #1
 8003c44:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	3b01      	subs	r3, #1
 8003c4a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d1f1      	bne.n	8003c36 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003c52:	4b13      	ldr	r3, [pc, #76]	; (8003ca0 <xTaskResumeAll+0x134>)
 8003c54:	2200      	movs	r2, #0
 8003c56:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003c58:	4b10      	ldr	r3, [pc, #64]	; (8003c9c <xTaskResumeAll+0x130>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d009      	beq.n	8003c74 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003c60:	2301      	movs	r3, #1
 8003c62:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003c64:	4b0f      	ldr	r3, [pc, #60]	; (8003ca4 <xTaskResumeAll+0x138>)
 8003c66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c6a:	601a      	str	r2, [r3, #0]
 8003c6c:	f3bf 8f4f 	dsb	sy
 8003c70:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003c74:	f001 f8e6 	bl	8004e44 <vPortExitCritical>

	return xAlreadyYielded;
 8003c78:	68bb      	ldr	r3, [r7, #8]
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3710      	adds	r7, #16
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	24000e00 	.word	0x24000e00
 8003c88:	24000dd8 	.word	0x24000dd8
 8003c8c:	24000d98 	.word	0x24000d98
 8003c90:	24000de0 	.word	0x24000de0
 8003c94:	24000908 	.word	0x24000908
 8003c98:	24000904 	.word	0x24000904
 8003c9c:	24000dec 	.word	0x24000dec
 8003ca0:	24000de8 	.word	0x24000de8
 8003ca4:	e000ed04 	.word	0xe000ed04

08003ca8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b083      	sub	sp, #12
 8003cac:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003cae:	4b05      	ldr	r3, [pc, #20]	; (8003cc4 <xTaskGetTickCount+0x1c>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003cb4:	687b      	ldr	r3, [r7, #4]
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	370c      	adds	r7, #12
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr
 8003cc2:	bf00      	nop
 8003cc4:	24000ddc 	.word	0x24000ddc

08003cc8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b086      	sub	sp, #24
 8003ccc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003cd2:	4b4f      	ldr	r3, [pc, #316]	; (8003e10 <xTaskIncrementTick+0x148>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	f040 808f 	bne.w	8003dfa <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003cdc:	4b4d      	ldr	r3, [pc, #308]	; (8003e14 <xTaskIncrementTick+0x14c>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	3301      	adds	r3, #1
 8003ce2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003ce4:	4a4b      	ldr	r2, [pc, #300]	; (8003e14 <xTaskIncrementTick+0x14c>)
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d120      	bne.n	8003d32 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003cf0:	4b49      	ldr	r3, [pc, #292]	; (8003e18 <xTaskIncrementTick+0x150>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d00a      	beq.n	8003d10 <xTaskIncrementTick+0x48>
	__asm volatile
 8003cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cfe:	f383 8811 	msr	BASEPRI, r3
 8003d02:	f3bf 8f6f 	isb	sy
 8003d06:	f3bf 8f4f 	dsb	sy
 8003d0a:	603b      	str	r3, [r7, #0]
}
 8003d0c:	bf00      	nop
 8003d0e:	e7fe      	b.n	8003d0e <xTaskIncrementTick+0x46>
 8003d10:	4b41      	ldr	r3, [pc, #260]	; (8003e18 <xTaskIncrementTick+0x150>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	60fb      	str	r3, [r7, #12]
 8003d16:	4b41      	ldr	r3, [pc, #260]	; (8003e1c <xTaskIncrementTick+0x154>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a3f      	ldr	r2, [pc, #252]	; (8003e18 <xTaskIncrementTick+0x150>)
 8003d1c:	6013      	str	r3, [r2, #0]
 8003d1e:	4a3f      	ldr	r2, [pc, #252]	; (8003e1c <xTaskIncrementTick+0x154>)
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	6013      	str	r3, [r2, #0]
 8003d24:	4b3e      	ldr	r3, [pc, #248]	; (8003e20 <xTaskIncrementTick+0x158>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	3301      	adds	r3, #1
 8003d2a:	4a3d      	ldr	r2, [pc, #244]	; (8003e20 <xTaskIncrementTick+0x158>)
 8003d2c:	6013      	str	r3, [r2, #0]
 8003d2e:	f000 fadb 	bl	80042e8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003d32:	4b3c      	ldr	r3, [pc, #240]	; (8003e24 <xTaskIncrementTick+0x15c>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	693a      	ldr	r2, [r7, #16]
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d349      	bcc.n	8003dd0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d3c:	4b36      	ldr	r3, [pc, #216]	; (8003e18 <xTaskIncrementTick+0x150>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d104      	bne.n	8003d50 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d46:	4b37      	ldr	r3, [pc, #220]	; (8003e24 <xTaskIncrementTick+0x15c>)
 8003d48:	f04f 32ff 	mov.w	r2, #4294967295
 8003d4c:	601a      	str	r2, [r3, #0]
					break;
 8003d4e:	e03f      	b.n	8003dd0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d50:	4b31      	ldr	r3, [pc, #196]	; (8003e18 <xTaskIncrementTick+0x150>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	68db      	ldr	r3, [r3, #12]
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003d60:	693a      	ldr	r2, [r7, #16]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d203      	bcs.n	8003d70 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003d68:	4a2e      	ldr	r2, [pc, #184]	; (8003e24 <xTaskIncrementTick+0x15c>)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003d6e:	e02f      	b.n	8003dd0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	3304      	adds	r3, #4
 8003d74:	4618      	mov	r0, r3
 8003d76:	f7fe ff79 	bl	8002c6c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d004      	beq.n	8003d8c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	3318      	adds	r3, #24
 8003d86:	4618      	mov	r0, r3
 8003d88:	f7fe ff70 	bl	8002c6c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d90:	4b25      	ldr	r3, [pc, #148]	; (8003e28 <xTaskIncrementTick+0x160>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d903      	bls.n	8003da0 <xTaskIncrementTick+0xd8>
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d9c:	4a22      	ldr	r2, [pc, #136]	; (8003e28 <xTaskIncrementTick+0x160>)
 8003d9e:	6013      	str	r3, [r2, #0]
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003da4:	4613      	mov	r3, r2
 8003da6:	009b      	lsls	r3, r3, #2
 8003da8:	4413      	add	r3, r2
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	4a1f      	ldr	r2, [pc, #124]	; (8003e2c <xTaskIncrementTick+0x164>)
 8003dae:	441a      	add	r2, r3
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	3304      	adds	r3, #4
 8003db4:	4619      	mov	r1, r3
 8003db6:	4610      	mov	r0, r2
 8003db8:	f7fe fefb 	bl	8002bb2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dc0:	4b1b      	ldr	r3, [pc, #108]	; (8003e30 <xTaskIncrementTick+0x168>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	d3b8      	bcc.n	8003d3c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003dce:	e7b5      	b.n	8003d3c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003dd0:	4b17      	ldr	r3, [pc, #92]	; (8003e30 <xTaskIncrementTick+0x168>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dd6:	4915      	ldr	r1, [pc, #84]	; (8003e2c <xTaskIncrementTick+0x164>)
 8003dd8:	4613      	mov	r3, r2
 8003dda:	009b      	lsls	r3, r3, #2
 8003ddc:	4413      	add	r3, r2
 8003dde:	009b      	lsls	r3, r3, #2
 8003de0:	440b      	add	r3, r1
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d901      	bls.n	8003dec <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003de8:	2301      	movs	r3, #1
 8003dea:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003dec:	4b11      	ldr	r3, [pc, #68]	; (8003e34 <xTaskIncrementTick+0x16c>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d007      	beq.n	8003e04 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003df4:	2301      	movs	r3, #1
 8003df6:	617b      	str	r3, [r7, #20]
 8003df8:	e004      	b.n	8003e04 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003dfa:	4b0f      	ldr	r3, [pc, #60]	; (8003e38 <xTaskIncrementTick+0x170>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	3301      	adds	r3, #1
 8003e00:	4a0d      	ldr	r2, [pc, #52]	; (8003e38 <xTaskIncrementTick+0x170>)
 8003e02:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003e04:	697b      	ldr	r3, [r7, #20]
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3718      	adds	r7, #24
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}
 8003e0e:	bf00      	nop
 8003e10:	24000e00 	.word	0x24000e00
 8003e14:	24000ddc 	.word	0x24000ddc
 8003e18:	24000d90 	.word	0x24000d90
 8003e1c:	24000d94 	.word	0x24000d94
 8003e20:	24000df0 	.word	0x24000df0
 8003e24:	24000df8 	.word	0x24000df8
 8003e28:	24000de0 	.word	0x24000de0
 8003e2c:	24000908 	.word	0x24000908
 8003e30:	24000904 	.word	0x24000904
 8003e34:	24000dec 	.word	0x24000dec
 8003e38:	24000de8 	.word	0x24000de8

08003e3c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b085      	sub	sp, #20
 8003e40:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003e42:	4b2a      	ldr	r3, [pc, #168]	; (8003eec <vTaskSwitchContext+0xb0>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d003      	beq.n	8003e52 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003e4a:	4b29      	ldr	r3, [pc, #164]	; (8003ef0 <vTaskSwitchContext+0xb4>)
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003e50:	e046      	b.n	8003ee0 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8003e52:	4b27      	ldr	r3, [pc, #156]	; (8003ef0 <vTaskSwitchContext+0xb4>)
 8003e54:	2200      	movs	r2, #0
 8003e56:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e58:	4b26      	ldr	r3, [pc, #152]	; (8003ef4 <vTaskSwitchContext+0xb8>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	60fb      	str	r3, [r7, #12]
 8003e5e:	e010      	b.n	8003e82 <vTaskSwitchContext+0x46>
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d10a      	bne.n	8003e7c <vTaskSwitchContext+0x40>
	__asm volatile
 8003e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e6a:	f383 8811 	msr	BASEPRI, r3
 8003e6e:	f3bf 8f6f 	isb	sy
 8003e72:	f3bf 8f4f 	dsb	sy
 8003e76:	607b      	str	r3, [r7, #4]
}
 8003e78:	bf00      	nop
 8003e7a:	e7fe      	b.n	8003e7a <vTaskSwitchContext+0x3e>
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	3b01      	subs	r3, #1
 8003e80:	60fb      	str	r3, [r7, #12]
 8003e82:	491d      	ldr	r1, [pc, #116]	; (8003ef8 <vTaskSwitchContext+0xbc>)
 8003e84:	68fa      	ldr	r2, [r7, #12]
 8003e86:	4613      	mov	r3, r2
 8003e88:	009b      	lsls	r3, r3, #2
 8003e8a:	4413      	add	r3, r2
 8003e8c:	009b      	lsls	r3, r3, #2
 8003e8e:	440b      	add	r3, r1
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d0e4      	beq.n	8003e60 <vTaskSwitchContext+0x24>
 8003e96:	68fa      	ldr	r2, [r7, #12]
 8003e98:	4613      	mov	r3, r2
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	4413      	add	r3, r2
 8003e9e:	009b      	lsls	r3, r3, #2
 8003ea0:	4a15      	ldr	r2, [pc, #84]	; (8003ef8 <vTaskSwitchContext+0xbc>)
 8003ea2:	4413      	add	r3, r2
 8003ea4:	60bb      	str	r3, [r7, #8]
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	685a      	ldr	r2, [r3, #4]
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	605a      	str	r2, [r3, #4]
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	685a      	ldr	r2, [r3, #4]
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	3308      	adds	r3, #8
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d104      	bne.n	8003ec6 <vTaskSwitchContext+0x8a>
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	685a      	ldr	r2, [r3, #4]
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	605a      	str	r2, [r3, #4]
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	4a0b      	ldr	r2, [pc, #44]	; (8003efc <vTaskSwitchContext+0xc0>)
 8003ece:	6013      	str	r3, [r2, #0]
 8003ed0:	4a08      	ldr	r2, [pc, #32]	; (8003ef4 <vTaskSwitchContext+0xb8>)
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003ed6:	4b09      	ldr	r3, [pc, #36]	; (8003efc <vTaskSwitchContext+0xc0>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	3354      	adds	r3, #84	; 0x54
 8003edc:	4a08      	ldr	r2, [pc, #32]	; (8003f00 <vTaskSwitchContext+0xc4>)
 8003ede:	6013      	str	r3, [r2, #0]
}
 8003ee0:	bf00      	nop
 8003ee2:	3714      	adds	r7, #20
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eea:	4770      	bx	lr
 8003eec:	24000e00 	.word	0x24000e00
 8003ef0:	24000dec 	.word	0x24000dec
 8003ef4:	24000de0 	.word	0x24000de0
 8003ef8:	24000908 	.word	0x24000908
 8003efc:	24000904 	.word	0x24000904
 8003f00:	24000014 	.word	0x24000014

08003f04 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b084      	sub	sp, #16
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
 8003f0c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d10a      	bne.n	8003f2a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f18:	f383 8811 	msr	BASEPRI, r3
 8003f1c:	f3bf 8f6f 	isb	sy
 8003f20:	f3bf 8f4f 	dsb	sy
 8003f24:	60fb      	str	r3, [r7, #12]
}
 8003f26:	bf00      	nop
 8003f28:	e7fe      	b.n	8003f28 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003f2a:	4b07      	ldr	r3, [pc, #28]	; (8003f48 <vTaskPlaceOnEventList+0x44>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	3318      	adds	r3, #24
 8003f30:	4619      	mov	r1, r3
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f7fe fe61 	bl	8002bfa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003f38:	2101      	movs	r1, #1
 8003f3a:	6838      	ldr	r0, [r7, #0]
 8003f3c:	f000 fa80 	bl	8004440 <prvAddCurrentTaskToDelayedList>
}
 8003f40:	bf00      	nop
 8003f42:	3710      	adds	r7, #16
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}
 8003f48:	24000904 	.word	0x24000904

08003f4c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b086      	sub	sp, #24
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	60f8      	str	r0, [r7, #12]
 8003f54:	60b9      	str	r1, [r7, #8]
 8003f56:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d10a      	bne.n	8003f74 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f62:	f383 8811 	msr	BASEPRI, r3
 8003f66:	f3bf 8f6f 	isb	sy
 8003f6a:	f3bf 8f4f 	dsb	sy
 8003f6e:	617b      	str	r3, [r7, #20]
}
 8003f70:	bf00      	nop
 8003f72:	e7fe      	b.n	8003f72 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003f74:	4b0a      	ldr	r3, [pc, #40]	; (8003fa0 <vTaskPlaceOnEventListRestricted+0x54>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	3318      	adds	r3, #24
 8003f7a:	4619      	mov	r1, r3
 8003f7c:	68f8      	ldr	r0, [r7, #12]
 8003f7e:	f7fe fe18 	bl	8002bb2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d002      	beq.n	8003f8e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003f88:	f04f 33ff 	mov.w	r3, #4294967295
 8003f8c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003f8e:	6879      	ldr	r1, [r7, #4]
 8003f90:	68b8      	ldr	r0, [r7, #8]
 8003f92:	f000 fa55 	bl	8004440 <prvAddCurrentTaskToDelayedList>
	}
 8003f96:	bf00      	nop
 8003f98:	3718      	adds	r7, #24
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
 8003f9e:	bf00      	nop
 8003fa0:	24000904 	.word	0x24000904

08003fa4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b086      	sub	sp, #24
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	68db      	ldr	r3, [r3, #12]
 8003fb0:	68db      	ldr	r3, [r3, #12]
 8003fb2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d10a      	bne.n	8003fd0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fbe:	f383 8811 	msr	BASEPRI, r3
 8003fc2:	f3bf 8f6f 	isb	sy
 8003fc6:	f3bf 8f4f 	dsb	sy
 8003fca:	60fb      	str	r3, [r7, #12]
}
 8003fcc:	bf00      	nop
 8003fce:	e7fe      	b.n	8003fce <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	3318      	adds	r3, #24
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f7fe fe49 	bl	8002c6c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003fda:	4b1e      	ldr	r3, [pc, #120]	; (8004054 <xTaskRemoveFromEventList+0xb0>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d11d      	bne.n	800401e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	3304      	adds	r3, #4
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f7fe fe40 	bl	8002c6c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ff0:	4b19      	ldr	r3, [pc, #100]	; (8004058 <xTaskRemoveFromEventList+0xb4>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d903      	bls.n	8004000 <xTaskRemoveFromEventList+0x5c>
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ffc:	4a16      	ldr	r2, [pc, #88]	; (8004058 <xTaskRemoveFromEventList+0xb4>)
 8003ffe:	6013      	str	r3, [r2, #0]
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004004:	4613      	mov	r3, r2
 8004006:	009b      	lsls	r3, r3, #2
 8004008:	4413      	add	r3, r2
 800400a:	009b      	lsls	r3, r3, #2
 800400c:	4a13      	ldr	r2, [pc, #76]	; (800405c <xTaskRemoveFromEventList+0xb8>)
 800400e:	441a      	add	r2, r3
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	3304      	adds	r3, #4
 8004014:	4619      	mov	r1, r3
 8004016:	4610      	mov	r0, r2
 8004018:	f7fe fdcb 	bl	8002bb2 <vListInsertEnd>
 800401c:	e005      	b.n	800402a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	3318      	adds	r3, #24
 8004022:	4619      	mov	r1, r3
 8004024:	480e      	ldr	r0, [pc, #56]	; (8004060 <xTaskRemoveFromEventList+0xbc>)
 8004026:	f7fe fdc4 	bl	8002bb2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800402e:	4b0d      	ldr	r3, [pc, #52]	; (8004064 <xTaskRemoveFromEventList+0xc0>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004034:	429a      	cmp	r2, r3
 8004036:	d905      	bls.n	8004044 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004038:	2301      	movs	r3, #1
 800403a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800403c:	4b0a      	ldr	r3, [pc, #40]	; (8004068 <xTaskRemoveFromEventList+0xc4>)
 800403e:	2201      	movs	r2, #1
 8004040:	601a      	str	r2, [r3, #0]
 8004042:	e001      	b.n	8004048 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004044:	2300      	movs	r3, #0
 8004046:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004048:	697b      	ldr	r3, [r7, #20]
}
 800404a:	4618      	mov	r0, r3
 800404c:	3718      	adds	r7, #24
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
 8004052:	bf00      	nop
 8004054:	24000e00 	.word	0x24000e00
 8004058:	24000de0 	.word	0x24000de0
 800405c:	24000908 	.word	0x24000908
 8004060:	24000d98 	.word	0x24000d98
 8004064:	24000904 	.word	0x24000904
 8004068:	24000dec 	.word	0x24000dec

0800406c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800406c:	b480      	push	{r7}
 800406e:	b083      	sub	sp, #12
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004074:	4b06      	ldr	r3, [pc, #24]	; (8004090 <vTaskInternalSetTimeOutState+0x24>)
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800407c:	4b05      	ldr	r3, [pc, #20]	; (8004094 <vTaskInternalSetTimeOutState+0x28>)
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	605a      	str	r2, [r3, #4]
}
 8004084:	bf00      	nop
 8004086:	370c      	adds	r7, #12
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr
 8004090:	24000df0 	.word	0x24000df0
 8004094:	24000ddc 	.word	0x24000ddc

08004098 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b088      	sub	sp, #32
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
 80040a0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d10a      	bne.n	80040be <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80040a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ac:	f383 8811 	msr	BASEPRI, r3
 80040b0:	f3bf 8f6f 	isb	sy
 80040b4:	f3bf 8f4f 	dsb	sy
 80040b8:	613b      	str	r3, [r7, #16]
}
 80040ba:	bf00      	nop
 80040bc:	e7fe      	b.n	80040bc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d10a      	bne.n	80040da <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80040c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040c8:	f383 8811 	msr	BASEPRI, r3
 80040cc:	f3bf 8f6f 	isb	sy
 80040d0:	f3bf 8f4f 	dsb	sy
 80040d4:	60fb      	str	r3, [r7, #12]
}
 80040d6:	bf00      	nop
 80040d8:	e7fe      	b.n	80040d8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80040da:	f000 fe83 	bl	8004de4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80040de:	4b1d      	ldr	r3, [pc, #116]	; (8004154 <xTaskCheckForTimeOut+0xbc>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	69ba      	ldr	r2, [r7, #24]
 80040ea:	1ad3      	subs	r3, r2, r3
 80040ec:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040f6:	d102      	bne.n	80040fe <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80040f8:	2300      	movs	r3, #0
 80040fa:	61fb      	str	r3, [r7, #28]
 80040fc:	e023      	b.n	8004146 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	4b15      	ldr	r3, [pc, #84]	; (8004158 <xTaskCheckForTimeOut+0xc0>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	429a      	cmp	r2, r3
 8004108:	d007      	beq.n	800411a <xTaskCheckForTimeOut+0x82>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	69ba      	ldr	r2, [r7, #24]
 8004110:	429a      	cmp	r2, r3
 8004112:	d302      	bcc.n	800411a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004114:	2301      	movs	r3, #1
 8004116:	61fb      	str	r3, [r7, #28]
 8004118:	e015      	b.n	8004146 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	697a      	ldr	r2, [r7, #20]
 8004120:	429a      	cmp	r2, r3
 8004122:	d20b      	bcs.n	800413c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	1ad2      	subs	r2, r2, r3
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	f7ff ff9b 	bl	800406c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004136:	2300      	movs	r3, #0
 8004138:	61fb      	str	r3, [r7, #28]
 800413a:	e004      	b.n	8004146 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	2200      	movs	r2, #0
 8004140:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004142:	2301      	movs	r3, #1
 8004144:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004146:	f000 fe7d 	bl	8004e44 <vPortExitCritical>

	return xReturn;
 800414a:	69fb      	ldr	r3, [r7, #28]
}
 800414c:	4618      	mov	r0, r3
 800414e:	3720      	adds	r7, #32
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}
 8004154:	24000ddc 	.word	0x24000ddc
 8004158:	24000df0 	.word	0x24000df0

0800415c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800415c:	b480      	push	{r7}
 800415e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004160:	4b03      	ldr	r3, [pc, #12]	; (8004170 <vTaskMissedYield+0x14>)
 8004162:	2201      	movs	r2, #1
 8004164:	601a      	str	r2, [r3, #0]
}
 8004166:	bf00      	nop
 8004168:	46bd      	mov	sp, r7
 800416a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416e:	4770      	bx	lr
 8004170:	24000dec 	.word	0x24000dec

08004174 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b082      	sub	sp, #8
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800417c:	f000 f852 	bl	8004224 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004180:	4b06      	ldr	r3, [pc, #24]	; (800419c <prvIdleTask+0x28>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	2b01      	cmp	r3, #1
 8004186:	d9f9      	bls.n	800417c <prvIdleTask+0x8>
			{
				taskYIELD();
 8004188:	4b05      	ldr	r3, [pc, #20]	; (80041a0 <prvIdleTask+0x2c>)
 800418a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800418e:	601a      	str	r2, [r3, #0]
 8004190:	f3bf 8f4f 	dsb	sy
 8004194:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004198:	e7f0      	b.n	800417c <prvIdleTask+0x8>
 800419a:	bf00      	nop
 800419c:	24000908 	.word	0x24000908
 80041a0:	e000ed04 	.word	0xe000ed04

080041a4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b082      	sub	sp, #8
 80041a8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80041aa:	2300      	movs	r3, #0
 80041ac:	607b      	str	r3, [r7, #4]
 80041ae:	e00c      	b.n	80041ca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80041b0:	687a      	ldr	r2, [r7, #4]
 80041b2:	4613      	mov	r3, r2
 80041b4:	009b      	lsls	r3, r3, #2
 80041b6:	4413      	add	r3, r2
 80041b8:	009b      	lsls	r3, r3, #2
 80041ba:	4a12      	ldr	r2, [pc, #72]	; (8004204 <prvInitialiseTaskLists+0x60>)
 80041bc:	4413      	add	r3, r2
 80041be:	4618      	mov	r0, r3
 80041c0:	f7fe fcca 	bl	8002b58 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	3301      	adds	r3, #1
 80041c8:	607b      	str	r3, [r7, #4]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2b37      	cmp	r3, #55	; 0x37
 80041ce:	d9ef      	bls.n	80041b0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80041d0:	480d      	ldr	r0, [pc, #52]	; (8004208 <prvInitialiseTaskLists+0x64>)
 80041d2:	f7fe fcc1 	bl	8002b58 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80041d6:	480d      	ldr	r0, [pc, #52]	; (800420c <prvInitialiseTaskLists+0x68>)
 80041d8:	f7fe fcbe 	bl	8002b58 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80041dc:	480c      	ldr	r0, [pc, #48]	; (8004210 <prvInitialiseTaskLists+0x6c>)
 80041de:	f7fe fcbb 	bl	8002b58 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80041e2:	480c      	ldr	r0, [pc, #48]	; (8004214 <prvInitialiseTaskLists+0x70>)
 80041e4:	f7fe fcb8 	bl	8002b58 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80041e8:	480b      	ldr	r0, [pc, #44]	; (8004218 <prvInitialiseTaskLists+0x74>)
 80041ea:	f7fe fcb5 	bl	8002b58 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80041ee:	4b0b      	ldr	r3, [pc, #44]	; (800421c <prvInitialiseTaskLists+0x78>)
 80041f0:	4a05      	ldr	r2, [pc, #20]	; (8004208 <prvInitialiseTaskLists+0x64>)
 80041f2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80041f4:	4b0a      	ldr	r3, [pc, #40]	; (8004220 <prvInitialiseTaskLists+0x7c>)
 80041f6:	4a05      	ldr	r2, [pc, #20]	; (800420c <prvInitialiseTaskLists+0x68>)
 80041f8:	601a      	str	r2, [r3, #0]
}
 80041fa:	bf00      	nop
 80041fc:	3708      	adds	r7, #8
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}
 8004202:	bf00      	nop
 8004204:	24000908 	.word	0x24000908
 8004208:	24000d68 	.word	0x24000d68
 800420c:	24000d7c 	.word	0x24000d7c
 8004210:	24000d98 	.word	0x24000d98
 8004214:	24000dac 	.word	0x24000dac
 8004218:	24000dc4 	.word	0x24000dc4
 800421c:	24000d90 	.word	0x24000d90
 8004220:	24000d94 	.word	0x24000d94

08004224 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b082      	sub	sp, #8
 8004228:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800422a:	e019      	b.n	8004260 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800422c:	f000 fdda 	bl	8004de4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004230:	4b10      	ldr	r3, [pc, #64]	; (8004274 <prvCheckTasksWaitingTermination+0x50>)
 8004232:	68db      	ldr	r3, [r3, #12]
 8004234:	68db      	ldr	r3, [r3, #12]
 8004236:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	3304      	adds	r3, #4
 800423c:	4618      	mov	r0, r3
 800423e:	f7fe fd15 	bl	8002c6c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004242:	4b0d      	ldr	r3, [pc, #52]	; (8004278 <prvCheckTasksWaitingTermination+0x54>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	3b01      	subs	r3, #1
 8004248:	4a0b      	ldr	r2, [pc, #44]	; (8004278 <prvCheckTasksWaitingTermination+0x54>)
 800424a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800424c:	4b0b      	ldr	r3, [pc, #44]	; (800427c <prvCheckTasksWaitingTermination+0x58>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	3b01      	subs	r3, #1
 8004252:	4a0a      	ldr	r2, [pc, #40]	; (800427c <prvCheckTasksWaitingTermination+0x58>)
 8004254:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004256:	f000 fdf5 	bl	8004e44 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f000 f810 	bl	8004280 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004260:	4b06      	ldr	r3, [pc, #24]	; (800427c <prvCheckTasksWaitingTermination+0x58>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d1e1      	bne.n	800422c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004268:	bf00      	nop
 800426a:	bf00      	nop
 800426c:	3708      	adds	r7, #8
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}
 8004272:	bf00      	nop
 8004274:	24000dac 	.word	0x24000dac
 8004278:	24000dd8 	.word	0x24000dd8
 800427c:	24000dc0 	.word	0x24000dc0

08004280 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004280:	b580      	push	{r7, lr}
 8004282:	b084      	sub	sp, #16
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	3354      	adds	r3, #84	; 0x54
 800428c:	4618      	mov	r0, r3
 800428e:	f001 f8ff 	bl	8005490 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004298:	2b00      	cmp	r3, #0
 800429a:	d108      	bne.n	80042ae <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a0:	4618      	mov	r0, r3
 80042a2:	f000 ff8d 	bl	80051c0 <vPortFree>
				vPortFree( pxTCB );
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f000 ff8a 	bl	80051c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80042ac:	e018      	b.n	80042e0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d103      	bne.n	80042c0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80042b8:	6878      	ldr	r0, [r7, #4]
 80042ba:	f000 ff81 	bl	80051c0 <vPortFree>
	}
 80042be:	e00f      	b.n	80042e0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80042c6:	2b02      	cmp	r3, #2
 80042c8:	d00a      	beq.n	80042e0 <prvDeleteTCB+0x60>
	__asm volatile
 80042ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ce:	f383 8811 	msr	BASEPRI, r3
 80042d2:	f3bf 8f6f 	isb	sy
 80042d6:	f3bf 8f4f 	dsb	sy
 80042da:	60fb      	str	r3, [r7, #12]
}
 80042dc:	bf00      	nop
 80042de:	e7fe      	b.n	80042de <prvDeleteTCB+0x5e>
	}
 80042e0:	bf00      	nop
 80042e2:	3710      	adds	r7, #16
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}

080042e8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80042e8:	b480      	push	{r7}
 80042ea:	b083      	sub	sp, #12
 80042ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80042ee:	4b0c      	ldr	r3, [pc, #48]	; (8004320 <prvResetNextTaskUnblockTime+0x38>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d104      	bne.n	8004302 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80042f8:	4b0a      	ldr	r3, [pc, #40]	; (8004324 <prvResetNextTaskUnblockTime+0x3c>)
 80042fa:	f04f 32ff 	mov.w	r2, #4294967295
 80042fe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004300:	e008      	b.n	8004314 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004302:	4b07      	ldr	r3, [pc, #28]	; (8004320 <prvResetNextTaskUnblockTime+0x38>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	68db      	ldr	r3, [r3, #12]
 8004308:	68db      	ldr	r3, [r3, #12]
 800430a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	4a04      	ldr	r2, [pc, #16]	; (8004324 <prvResetNextTaskUnblockTime+0x3c>)
 8004312:	6013      	str	r3, [r2, #0]
}
 8004314:	bf00      	nop
 8004316:	370c      	adds	r7, #12
 8004318:	46bd      	mov	sp, r7
 800431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431e:	4770      	bx	lr
 8004320:	24000d90 	.word	0x24000d90
 8004324:	24000df8 	.word	0x24000df8

08004328 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004328:	b480      	push	{r7}
 800432a:	b083      	sub	sp, #12
 800432c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800432e:	4b0b      	ldr	r3, [pc, #44]	; (800435c <xTaskGetSchedulerState+0x34>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d102      	bne.n	800433c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004336:	2301      	movs	r3, #1
 8004338:	607b      	str	r3, [r7, #4]
 800433a:	e008      	b.n	800434e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800433c:	4b08      	ldr	r3, [pc, #32]	; (8004360 <xTaskGetSchedulerState+0x38>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d102      	bne.n	800434a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004344:	2302      	movs	r3, #2
 8004346:	607b      	str	r3, [r7, #4]
 8004348:	e001      	b.n	800434e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800434a:	2300      	movs	r3, #0
 800434c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800434e:	687b      	ldr	r3, [r7, #4]
	}
 8004350:	4618      	mov	r0, r3
 8004352:	370c      	adds	r7, #12
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr
 800435c:	24000de4 	.word	0x24000de4
 8004360:	24000e00 	.word	0x24000e00

08004364 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004364:	b580      	push	{r7, lr}
 8004366:	b086      	sub	sp, #24
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004370:	2300      	movs	r3, #0
 8004372:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d056      	beq.n	8004428 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800437a:	4b2e      	ldr	r3, [pc, #184]	; (8004434 <xTaskPriorityDisinherit+0xd0>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	693a      	ldr	r2, [r7, #16]
 8004380:	429a      	cmp	r2, r3
 8004382:	d00a      	beq.n	800439a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004388:	f383 8811 	msr	BASEPRI, r3
 800438c:	f3bf 8f6f 	isb	sy
 8004390:	f3bf 8f4f 	dsb	sy
 8004394:	60fb      	str	r3, [r7, #12]
}
 8004396:	bf00      	nop
 8004398:	e7fe      	b.n	8004398 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d10a      	bne.n	80043b8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80043a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043a6:	f383 8811 	msr	BASEPRI, r3
 80043aa:	f3bf 8f6f 	isb	sy
 80043ae:	f3bf 8f4f 	dsb	sy
 80043b2:	60bb      	str	r3, [r7, #8]
}
 80043b4:	bf00      	nop
 80043b6:	e7fe      	b.n	80043b6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043bc:	1e5a      	subs	r2, r3, #1
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043ca:	429a      	cmp	r2, r3
 80043cc:	d02c      	beq.n	8004428 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d128      	bne.n	8004428 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	3304      	adds	r3, #4
 80043da:	4618      	mov	r0, r3
 80043dc:	f7fe fc46 	bl	8002c6c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ec:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043f8:	4b0f      	ldr	r3, [pc, #60]	; (8004438 <xTaskPriorityDisinherit+0xd4>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	429a      	cmp	r2, r3
 80043fe:	d903      	bls.n	8004408 <xTaskPriorityDisinherit+0xa4>
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004404:	4a0c      	ldr	r2, [pc, #48]	; (8004438 <xTaskPriorityDisinherit+0xd4>)
 8004406:	6013      	str	r3, [r2, #0]
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800440c:	4613      	mov	r3, r2
 800440e:	009b      	lsls	r3, r3, #2
 8004410:	4413      	add	r3, r2
 8004412:	009b      	lsls	r3, r3, #2
 8004414:	4a09      	ldr	r2, [pc, #36]	; (800443c <xTaskPriorityDisinherit+0xd8>)
 8004416:	441a      	add	r2, r3
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	3304      	adds	r3, #4
 800441c:	4619      	mov	r1, r3
 800441e:	4610      	mov	r0, r2
 8004420:	f7fe fbc7 	bl	8002bb2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004424:	2301      	movs	r3, #1
 8004426:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004428:	697b      	ldr	r3, [r7, #20]
	}
 800442a:	4618      	mov	r0, r3
 800442c:	3718      	adds	r7, #24
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}
 8004432:	bf00      	nop
 8004434:	24000904 	.word	0x24000904
 8004438:	24000de0 	.word	0x24000de0
 800443c:	24000908 	.word	0x24000908

08004440 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b084      	sub	sp, #16
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
 8004448:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800444a:	4b21      	ldr	r3, [pc, #132]	; (80044d0 <prvAddCurrentTaskToDelayedList+0x90>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004450:	4b20      	ldr	r3, [pc, #128]	; (80044d4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	3304      	adds	r3, #4
 8004456:	4618      	mov	r0, r3
 8004458:	f7fe fc08 	bl	8002c6c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004462:	d10a      	bne.n	800447a <prvAddCurrentTaskToDelayedList+0x3a>
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d007      	beq.n	800447a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800446a:	4b1a      	ldr	r3, [pc, #104]	; (80044d4 <prvAddCurrentTaskToDelayedList+0x94>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	3304      	adds	r3, #4
 8004470:	4619      	mov	r1, r3
 8004472:	4819      	ldr	r0, [pc, #100]	; (80044d8 <prvAddCurrentTaskToDelayedList+0x98>)
 8004474:	f7fe fb9d 	bl	8002bb2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004478:	e026      	b.n	80044c8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800447a:	68fa      	ldr	r2, [r7, #12]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	4413      	add	r3, r2
 8004480:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004482:	4b14      	ldr	r3, [pc, #80]	; (80044d4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	68ba      	ldr	r2, [r7, #8]
 8004488:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800448a:	68ba      	ldr	r2, [r7, #8]
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	429a      	cmp	r2, r3
 8004490:	d209      	bcs.n	80044a6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004492:	4b12      	ldr	r3, [pc, #72]	; (80044dc <prvAddCurrentTaskToDelayedList+0x9c>)
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	4b0f      	ldr	r3, [pc, #60]	; (80044d4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	3304      	adds	r3, #4
 800449c:	4619      	mov	r1, r3
 800449e:	4610      	mov	r0, r2
 80044a0:	f7fe fbab 	bl	8002bfa <vListInsert>
}
 80044a4:	e010      	b.n	80044c8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80044a6:	4b0e      	ldr	r3, [pc, #56]	; (80044e0 <prvAddCurrentTaskToDelayedList+0xa0>)
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	4b0a      	ldr	r3, [pc, #40]	; (80044d4 <prvAddCurrentTaskToDelayedList+0x94>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	3304      	adds	r3, #4
 80044b0:	4619      	mov	r1, r3
 80044b2:	4610      	mov	r0, r2
 80044b4:	f7fe fba1 	bl	8002bfa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80044b8:	4b0a      	ldr	r3, [pc, #40]	; (80044e4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	68ba      	ldr	r2, [r7, #8]
 80044be:	429a      	cmp	r2, r3
 80044c0:	d202      	bcs.n	80044c8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80044c2:	4a08      	ldr	r2, [pc, #32]	; (80044e4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	6013      	str	r3, [r2, #0]
}
 80044c8:	bf00      	nop
 80044ca:	3710      	adds	r7, #16
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}
 80044d0:	24000ddc 	.word	0x24000ddc
 80044d4:	24000904 	.word	0x24000904
 80044d8:	24000dc4 	.word	0x24000dc4
 80044dc:	24000d94 	.word	0x24000d94
 80044e0:	24000d90 	.word	0x24000d90
 80044e4:	24000df8 	.word	0x24000df8

080044e8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b08a      	sub	sp, #40	; 0x28
 80044ec:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80044ee:	2300      	movs	r3, #0
 80044f0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80044f2:	f000 fb07 	bl	8004b04 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80044f6:	4b1c      	ldr	r3, [pc, #112]	; (8004568 <xTimerCreateTimerTask+0x80>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d021      	beq.n	8004542 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80044fe:	2300      	movs	r3, #0
 8004500:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004502:	2300      	movs	r3, #0
 8004504:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004506:	1d3a      	adds	r2, r7, #4
 8004508:	f107 0108 	add.w	r1, r7, #8
 800450c:	f107 030c 	add.w	r3, r7, #12
 8004510:	4618      	mov	r0, r3
 8004512:	f7fe fb07 	bl	8002b24 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004516:	6879      	ldr	r1, [r7, #4]
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	68fa      	ldr	r2, [r7, #12]
 800451c:	9202      	str	r2, [sp, #8]
 800451e:	9301      	str	r3, [sp, #4]
 8004520:	2302      	movs	r3, #2
 8004522:	9300      	str	r3, [sp, #0]
 8004524:	2300      	movs	r3, #0
 8004526:	460a      	mov	r2, r1
 8004528:	4910      	ldr	r1, [pc, #64]	; (800456c <xTimerCreateTimerTask+0x84>)
 800452a:	4811      	ldr	r0, [pc, #68]	; (8004570 <xTimerCreateTimerTask+0x88>)
 800452c:	f7ff f8b4 	bl	8003698 <xTaskCreateStatic>
 8004530:	4603      	mov	r3, r0
 8004532:	4a10      	ldr	r2, [pc, #64]	; (8004574 <xTimerCreateTimerTask+0x8c>)
 8004534:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004536:	4b0f      	ldr	r3, [pc, #60]	; (8004574 <xTimerCreateTimerTask+0x8c>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d001      	beq.n	8004542 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800453e:	2301      	movs	r3, #1
 8004540:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d10a      	bne.n	800455e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800454c:	f383 8811 	msr	BASEPRI, r3
 8004550:	f3bf 8f6f 	isb	sy
 8004554:	f3bf 8f4f 	dsb	sy
 8004558:	613b      	str	r3, [r7, #16]
}
 800455a:	bf00      	nop
 800455c:	e7fe      	b.n	800455c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800455e:	697b      	ldr	r3, [r7, #20]
}
 8004560:	4618      	mov	r0, r3
 8004562:	3718      	adds	r7, #24
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}
 8004568:	24000e34 	.word	0x24000e34
 800456c:	08005644 	.word	0x08005644
 8004570:	080046ad 	.word	0x080046ad
 8004574:	24000e38 	.word	0x24000e38

08004578 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b08a      	sub	sp, #40	; 0x28
 800457c:	af00      	add	r7, sp, #0
 800457e:	60f8      	str	r0, [r7, #12]
 8004580:	60b9      	str	r1, [r7, #8]
 8004582:	607a      	str	r2, [r7, #4]
 8004584:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004586:	2300      	movs	r3, #0
 8004588:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d10a      	bne.n	80045a6 <xTimerGenericCommand+0x2e>
	__asm volatile
 8004590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004594:	f383 8811 	msr	BASEPRI, r3
 8004598:	f3bf 8f6f 	isb	sy
 800459c:	f3bf 8f4f 	dsb	sy
 80045a0:	623b      	str	r3, [r7, #32]
}
 80045a2:	bf00      	nop
 80045a4:	e7fe      	b.n	80045a4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80045a6:	4b1a      	ldr	r3, [pc, #104]	; (8004610 <xTimerGenericCommand+0x98>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d02a      	beq.n	8004604 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	2b05      	cmp	r3, #5
 80045be:	dc18      	bgt.n	80045f2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80045c0:	f7ff feb2 	bl	8004328 <xTaskGetSchedulerState>
 80045c4:	4603      	mov	r3, r0
 80045c6:	2b02      	cmp	r3, #2
 80045c8:	d109      	bne.n	80045de <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80045ca:	4b11      	ldr	r3, [pc, #68]	; (8004610 <xTimerGenericCommand+0x98>)
 80045cc:	6818      	ldr	r0, [r3, #0]
 80045ce:	f107 0110 	add.w	r1, r7, #16
 80045d2:	2300      	movs	r3, #0
 80045d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045d6:	f7fe fc77 	bl	8002ec8 <xQueueGenericSend>
 80045da:	6278      	str	r0, [r7, #36]	; 0x24
 80045dc:	e012      	b.n	8004604 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80045de:	4b0c      	ldr	r3, [pc, #48]	; (8004610 <xTimerGenericCommand+0x98>)
 80045e0:	6818      	ldr	r0, [r3, #0]
 80045e2:	f107 0110 	add.w	r1, r7, #16
 80045e6:	2300      	movs	r3, #0
 80045e8:	2200      	movs	r2, #0
 80045ea:	f7fe fc6d 	bl	8002ec8 <xQueueGenericSend>
 80045ee:	6278      	str	r0, [r7, #36]	; 0x24
 80045f0:	e008      	b.n	8004604 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80045f2:	4b07      	ldr	r3, [pc, #28]	; (8004610 <xTimerGenericCommand+0x98>)
 80045f4:	6818      	ldr	r0, [r3, #0]
 80045f6:	f107 0110 	add.w	r1, r7, #16
 80045fa:	2300      	movs	r3, #0
 80045fc:	683a      	ldr	r2, [r7, #0]
 80045fe:	f7fe fd61 	bl	80030c4 <xQueueGenericSendFromISR>
 8004602:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004606:	4618      	mov	r0, r3
 8004608:	3728      	adds	r7, #40	; 0x28
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}
 800460e:	bf00      	nop
 8004610:	24000e34 	.word	0x24000e34

08004614 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b088      	sub	sp, #32
 8004618:	af02      	add	r7, sp, #8
 800461a:	6078      	str	r0, [r7, #4]
 800461c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800461e:	4b22      	ldr	r3, [pc, #136]	; (80046a8 <prvProcessExpiredTimer+0x94>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	68db      	ldr	r3, [r3, #12]
 8004624:	68db      	ldr	r3, [r3, #12]
 8004626:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	3304      	adds	r3, #4
 800462c:	4618      	mov	r0, r3
 800462e:	f7fe fb1d 	bl	8002c6c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004638:	f003 0304 	and.w	r3, r3, #4
 800463c:	2b00      	cmp	r3, #0
 800463e:	d022      	beq.n	8004686 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	699a      	ldr	r2, [r3, #24]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	18d1      	adds	r1, r2, r3
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	683a      	ldr	r2, [r7, #0]
 800464c:	6978      	ldr	r0, [r7, #20]
 800464e:	f000 f8d1 	bl	80047f4 <prvInsertTimerInActiveList>
 8004652:	4603      	mov	r3, r0
 8004654:	2b00      	cmp	r3, #0
 8004656:	d01f      	beq.n	8004698 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004658:	2300      	movs	r3, #0
 800465a:	9300      	str	r3, [sp, #0]
 800465c:	2300      	movs	r3, #0
 800465e:	687a      	ldr	r2, [r7, #4]
 8004660:	2100      	movs	r1, #0
 8004662:	6978      	ldr	r0, [r7, #20]
 8004664:	f7ff ff88 	bl	8004578 <xTimerGenericCommand>
 8004668:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d113      	bne.n	8004698 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004674:	f383 8811 	msr	BASEPRI, r3
 8004678:	f3bf 8f6f 	isb	sy
 800467c:	f3bf 8f4f 	dsb	sy
 8004680:	60fb      	str	r3, [r7, #12]
}
 8004682:	bf00      	nop
 8004684:	e7fe      	b.n	8004684 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800468c:	f023 0301 	bic.w	r3, r3, #1
 8004690:	b2da      	uxtb	r2, r3
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	6a1b      	ldr	r3, [r3, #32]
 800469c:	6978      	ldr	r0, [r7, #20]
 800469e:	4798      	blx	r3
}
 80046a0:	bf00      	nop
 80046a2:	3718      	adds	r7, #24
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}
 80046a8:	24000e2c 	.word	0x24000e2c

080046ac <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b084      	sub	sp, #16
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80046b4:	f107 0308 	add.w	r3, r7, #8
 80046b8:	4618      	mov	r0, r3
 80046ba:	f000 f857 	bl	800476c <prvGetNextExpireTime>
 80046be:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	4619      	mov	r1, r3
 80046c4:	68f8      	ldr	r0, [r7, #12]
 80046c6:	f000 f803 	bl	80046d0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80046ca:	f000 f8d5 	bl	8004878 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80046ce:	e7f1      	b.n	80046b4 <prvTimerTask+0x8>

080046d0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b084      	sub	sp, #16
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
 80046d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80046da:	f7ff fa39 	bl	8003b50 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80046de:	f107 0308 	add.w	r3, r7, #8
 80046e2:	4618      	mov	r0, r3
 80046e4:	f000 f866 	bl	80047b4 <prvSampleTimeNow>
 80046e8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d130      	bne.n	8004752 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d10a      	bne.n	800470c <prvProcessTimerOrBlockTask+0x3c>
 80046f6:	687a      	ldr	r2, [r7, #4]
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	429a      	cmp	r2, r3
 80046fc:	d806      	bhi.n	800470c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80046fe:	f7ff fa35 	bl	8003b6c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004702:	68f9      	ldr	r1, [r7, #12]
 8004704:	6878      	ldr	r0, [r7, #4]
 8004706:	f7ff ff85 	bl	8004614 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800470a:	e024      	b.n	8004756 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d008      	beq.n	8004724 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004712:	4b13      	ldr	r3, [pc, #76]	; (8004760 <prvProcessTimerOrBlockTask+0x90>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d101      	bne.n	8004720 <prvProcessTimerOrBlockTask+0x50>
 800471c:	2301      	movs	r3, #1
 800471e:	e000      	b.n	8004722 <prvProcessTimerOrBlockTask+0x52>
 8004720:	2300      	movs	r3, #0
 8004722:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004724:	4b0f      	ldr	r3, [pc, #60]	; (8004764 <prvProcessTimerOrBlockTask+0x94>)
 8004726:	6818      	ldr	r0, [r3, #0]
 8004728:	687a      	ldr	r2, [r7, #4]
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	1ad3      	subs	r3, r2, r3
 800472e:	683a      	ldr	r2, [r7, #0]
 8004730:	4619      	mov	r1, r3
 8004732:	f7fe ff7d 	bl	8003630 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004736:	f7ff fa19 	bl	8003b6c <xTaskResumeAll>
 800473a:	4603      	mov	r3, r0
 800473c:	2b00      	cmp	r3, #0
 800473e:	d10a      	bne.n	8004756 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004740:	4b09      	ldr	r3, [pc, #36]	; (8004768 <prvProcessTimerOrBlockTask+0x98>)
 8004742:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004746:	601a      	str	r2, [r3, #0]
 8004748:	f3bf 8f4f 	dsb	sy
 800474c:	f3bf 8f6f 	isb	sy
}
 8004750:	e001      	b.n	8004756 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004752:	f7ff fa0b 	bl	8003b6c <xTaskResumeAll>
}
 8004756:	bf00      	nop
 8004758:	3710      	adds	r7, #16
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}
 800475e:	bf00      	nop
 8004760:	24000e30 	.word	0x24000e30
 8004764:	24000e34 	.word	0x24000e34
 8004768:	e000ed04 	.word	0xe000ed04

0800476c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800476c:	b480      	push	{r7}
 800476e:	b085      	sub	sp, #20
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004774:	4b0e      	ldr	r3, [pc, #56]	; (80047b0 <prvGetNextExpireTime+0x44>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d101      	bne.n	8004782 <prvGetNextExpireTime+0x16>
 800477e:	2201      	movs	r2, #1
 8004780:	e000      	b.n	8004784 <prvGetNextExpireTime+0x18>
 8004782:	2200      	movs	r2, #0
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d105      	bne.n	800479c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004790:	4b07      	ldr	r3, [pc, #28]	; (80047b0 <prvGetNextExpireTime+0x44>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	68db      	ldr	r3, [r3, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	60fb      	str	r3, [r7, #12]
 800479a:	e001      	b.n	80047a0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800479c:	2300      	movs	r3, #0
 800479e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80047a0:	68fb      	ldr	r3, [r7, #12]
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3714      	adds	r7, #20
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr
 80047ae:	bf00      	nop
 80047b0:	24000e2c 	.word	0x24000e2c

080047b4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b084      	sub	sp, #16
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80047bc:	f7ff fa74 	bl	8003ca8 <xTaskGetTickCount>
 80047c0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80047c2:	4b0b      	ldr	r3, [pc, #44]	; (80047f0 <prvSampleTimeNow+0x3c>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	68fa      	ldr	r2, [r7, #12]
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d205      	bcs.n	80047d8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80047cc:	f000 f936 	bl	8004a3c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2201      	movs	r2, #1
 80047d4:	601a      	str	r2, [r3, #0]
 80047d6:	e002      	b.n	80047de <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2200      	movs	r2, #0
 80047dc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80047de:	4a04      	ldr	r2, [pc, #16]	; (80047f0 <prvSampleTimeNow+0x3c>)
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80047e4:	68fb      	ldr	r3, [r7, #12]
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	3710      	adds	r7, #16
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}
 80047ee:	bf00      	nop
 80047f0:	24000e3c 	.word	0x24000e3c

080047f4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b086      	sub	sp, #24
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	60f8      	str	r0, [r7, #12]
 80047fc:	60b9      	str	r1, [r7, #8]
 80047fe:	607a      	str	r2, [r7, #4]
 8004800:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004802:	2300      	movs	r3, #0
 8004804:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	68ba      	ldr	r2, [r7, #8]
 800480a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	68fa      	ldr	r2, [r7, #12]
 8004810:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004812:	68ba      	ldr	r2, [r7, #8]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	429a      	cmp	r2, r3
 8004818:	d812      	bhi.n	8004840 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800481a:	687a      	ldr	r2, [r7, #4]
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	1ad2      	subs	r2, r2, r3
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	699b      	ldr	r3, [r3, #24]
 8004824:	429a      	cmp	r2, r3
 8004826:	d302      	bcc.n	800482e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004828:	2301      	movs	r3, #1
 800482a:	617b      	str	r3, [r7, #20]
 800482c:	e01b      	b.n	8004866 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800482e:	4b10      	ldr	r3, [pc, #64]	; (8004870 <prvInsertTimerInActiveList+0x7c>)
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	3304      	adds	r3, #4
 8004836:	4619      	mov	r1, r3
 8004838:	4610      	mov	r0, r2
 800483a:	f7fe f9de 	bl	8002bfa <vListInsert>
 800483e:	e012      	b.n	8004866 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004840:	687a      	ldr	r2, [r7, #4]
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	429a      	cmp	r2, r3
 8004846:	d206      	bcs.n	8004856 <prvInsertTimerInActiveList+0x62>
 8004848:	68ba      	ldr	r2, [r7, #8]
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	429a      	cmp	r2, r3
 800484e:	d302      	bcc.n	8004856 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004850:	2301      	movs	r3, #1
 8004852:	617b      	str	r3, [r7, #20]
 8004854:	e007      	b.n	8004866 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004856:	4b07      	ldr	r3, [pc, #28]	; (8004874 <prvInsertTimerInActiveList+0x80>)
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	3304      	adds	r3, #4
 800485e:	4619      	mov	r1, r3
 8004860:	4610      	mov	r0, r2
 8004862:	f7fe f9ca 	bl	8002bfa <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004866:	697b      	ldr	r3, [r7, #20]
}
 8004868:	4618      	mov	r0, r3
 800486a:	3718      	adds	r7, #24
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}
 8004870:	24000e30 	.word	0x24000e30
 8004874:	24000e2c 	.word	0x24000e2c

08004878 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b08e      	sub	sp, #56	; 0x38
 800487c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800487e:	e0ca      	b.n	8004a16 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2b00      	cmp	r3, #0
 8004884:	da18      	bge.n	80048b8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004886:	1d3b      	adds	r3, r7, #4
 8004888:	3304      	adds	r3, #4
 800488a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800488c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800488e:	2b00      	cmp	r3, #0
 8004890:	d10a      	bne.n	80048a8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8004892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004896:	f383 8811 	msr	BASEPRI, r3
 800489a:	f3bf 8f6f 	isb	sy
 800489e:	f3bf 8f4f 	dsb	sy
 80048a2:	61fb      	str	r3, [r7, #28]
}
 80048a4:	bf00      	nop
 80048a6:	e7fe      	b.n	80048a6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80048a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80048ae:	6850      	ldr	r0, [r2, #4]
 80048b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80048b2:	6892      	ldr	r2, [r2, #8]
 80048b4:	4611      	mov	r1, r2
 80048b6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	f2c0 80aa 	blt.w	8004a14 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80048c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048c6:	695b      	ldr	r3, [r3, #20]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d004      	beq.n	80048d6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80048cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ce:	3304      	adds	r3, #4
 80048d0:	4618      	mov	r0, r3
 80048d2:	f7fe f9cb 	bl	8002c6c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80048d6:	463b      	mov	r3, r7
 80048d8:	4618      	mov	r0, r3
 80048da:	f7ff ff6b 	bl	80047b4 <prvSampleTimeNow>
 80048de:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2b09      	cmp	r3, #9
 80048e4:	f200 8097 	bhi.w	8004a16 <prvProcessReceivedCommands+0x19e>
 80048e8:	a201      	add	r2, pc, #4	; (adr r2, 80048f0 <prvProcessReceivedCommands+0x78>)
 80048ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ee:	bf00      	nop
 80048f0:	08004919 	.word	0x08004919
 80048f4:	08004919 	.word	0x08004919
 80048f8:	08004919 	.word	0x08004919
 80048fc:	0800498d 	.word	0x0800498d
 8004900:	080049a1 	.word	0x080049a1
 8004904:	080049eb 	.word	0x080049eb
 8004908:	08004919 	.word	0x08004919
 800490c:	08004919 	.word	0x08004919
 8004910:	0800498d 	.word	0x0800498d
 8004914:	080049a1 	.word	0x080049a1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800491a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800491e:	f043 0301 	orr.w	r3, r3, #1
 8004922:	b2da      	uxtb	r2, r3
 8004924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004926:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800492a:	68ba      	ldr	r2, [r7, #8]
 800492c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800492e:	699b      	ldr	r3, [r3, #24]
 8004930:	18d1      	adds	r1, r2, r3
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004936:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004938:	f7ff ff5c 	bl	80047f4 <prvInsertTimerInActiveList>
 800493c:	4603      	mov	r3, r0
 800493e:	2b00      	cmp	r3, #0
 8004940:	d069      	beq.n	8004a16 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004944:	6a1b      	ldr	r3, [r3, #32]
 8004946:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004948:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800494a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800494c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004950:	f003 0304 	and.w	r3, r3, #4
 8004954:	2b00      	cmp	r3, #0
 8004956:	d05e      	beq.n	8004a16 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004958:	68ba      	ldr	r2, [r7, #8]
 800495a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800495c:	699b      	ldr	r3, [r3, #24]
 800495e:	441a      	add	r2, r3
 8004960:	2300      	movs	r3, #0
 8004962:	9300      	str	r3, [sp, #0]
 8004964:	2300      	movs	r3, #0
 8004966:	2100      	movs	r1, #0
 8004968:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800496a:	f7ff fe05 	bl	8004578 <xTimerGenericCommand>
 800496e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004970:	6a3b      	ldr	r3, [r7, #32]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d14f      	bne.n	8004a16 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8004976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800497a:	f383 8811 	msr	BASEPRI, r3
 800497e:	f3bf 8f6f 	isb	sy
 8004982:	f3bf 8f4f 	dsb	sy
 8004986:	61bb      	str	r3, [r7, #24]
}
 8004988:	bf00      	nop
 800498a:	e7fe      	b.n	800498a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800498c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800498e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004992:	f023 0301 	bic.w	r3, r3, #1
 8004996:	b2da      	uxtb	r2, r3
 8004998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800499a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800499e:	e03a      	b.n	8004a16 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80049a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80049a6:	f043 0301 	orr.w	r3, r3, #1
 80049aa:	b2da      	uxtb	r2, r3
 80049ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80049b2:	68ba      	ldr	r2, [r7, #8]
 80049b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049b6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80049b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ba:	699b      	ldr	r3, [r3, #24]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d10a      	bne.n	80049d6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80049c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049c4:	f383 8811 	msr	BASEPRI, r3
 80049c8:	f3bf 8f6f 	isb	sy
 80049cc:	f3bf 8f4f 	dsb	sy
 80049d0:	617b      	str	r3, [r7, #20]
}
 80049d2:	bf00      	nop
 80049d4:	e7fe      	b.n	80049d4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80049d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049d8:	699a      	ldr	r2, [r3, #24]
 80049da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049dc:	18d1      	adds	r1, r2, r3
 80049de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049e4:	f7ff ff06 	bl	80047f4 <prvInsertTimerInActiveList>
					break;
 80049e8:	e015      	b.n	8004a16 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80049ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80049f0:	f003 0302 	and.w	r3, r3, #2
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d103      	bne.n	8004a00 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80049f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049fa:	f000 fbe1 	bl	80051c0 <vPortFree>
 80049fe:	e00a      	b.n	8004a16 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a02:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a06:	f023 0301 	bic.w	r3, r3, #1
 8004a0a:	b2da      	uxtb	r2, r3
 8004a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a0e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004a12:	e000      	b.n	8004a16 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004a14:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004a16:	4b08      	ldr	r3, [pc, #32]	; (8004a38 <prvProcessReceivedCommands+0x1c0>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	1d39      	adds	r1, r7, #4
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f7fe fbec 	bl	80031fc <xQueueReceive>
 8004a24:	4603      	mov	r3, r0
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	f47f af2a 	bne.w	8004880 <prvProcessReceivedCommands+0x8>
	}
}
 8004a2c:	bf00      	nop
 8004a2e:	bf00      	nop
 8004a30:	3730      	adds	r7, #48	; 0x30
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}
 8004a36:	bf00      	nop
 8004a38:	24000e34 	.word	0x24000e34

08004a3c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b088      	sub	sp, #32
 8004a40:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004a42:	e048      	b.n	8004ad6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004a44:	4b2d      	ldr	r3, [pc, #180]	; (8004afc <prvSwitchTimerLists+0xc0>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	68db      	ldr	r3, [r3, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a4e:	4b2b      	ldr	r3, [pc, #172]	; (8004afc <prvSwitchTimerLists+0xc0>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	68db      	ldr	r3, [r3, #12]
 8004a54:	68db      	ldr	r3, [r3, #12]
 8004a56:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	3304      	adds	r3, #4
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f7fe f905 	bl	8002c6c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	6a1b      	ldr	r3, [r3, #32]
 8004a66:	68f8      	ldr	r0, [r7, #12]
 8004a68:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a70:	f003 0304 	and.w	r3, r3, #4
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d02e      	beq.n	8004ad6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	699b      	ldr	r3, [r3, #24]
 8004a7c:	693a      	ldr	r2, [r7, #16]
 8004a7e:	4413      	add	r3, r2
 8004a80:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004a82:	68ba      	ldr	r2, [r7, #8]
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	429a      	cmp	r2, r3
 8004a88:	d90e      	bls.n	8004aa8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	68ba      	ldr	r2, [r7, #8]
 8004a8e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	68fa      	ldr	r2, [r7, #12]
 8004a94:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004a96:	4b19      	ldr	r3, [pc, #100]	; (8004afc <prvSwitchTimerLists+0xc0>)
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	3304      	adds	r3, #4
 8004a9e:	4619      	mov	r1, r3
 8004aa0:	4610      	mov	r0, r2
 8004aa2:	f7fe f8aa 	bl	8002bfa <vListInsert>
 8004aa6:	e016      	b.n	8004ad6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	9300      	str	r3, [sp, #0]
 8004aac:	2300      	movs	r3, #0
 8004aae:	693a      	ldr	r2, [r7, #16]
 8004ab0:	2100      	movs	r1, #0
 8004ab2:	68f8      	ldr	r0, [r7, #12]
 8004ab4:	f7ff fd60 	bl	8004578 <xTimerGenericCommand>
 8004ab8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d10a      	bne.n	8004ad6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ac4:	f383 8811 	msr	BASEPRI, r3
 8004ac8:	f3bf 8f6f 	isb	sy
 8004acc:	f3bf 8f4f 	dsb	sy
 8004ad0:	603b      	str	r3, [r7, #0]
}
 8004ad2:	bf00      	nop
 8004ad4:	e7fe      	b.n	8004ad4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004ad6:	4b09      	ldr	r3, [pc, #36]	; (8004afc <prvSwitchTimerLists+0xc0>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d1b1      	bne.n	8004a44 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004ae0:	4b06      	ldr	r3, [pc, #24]	; (8004afc <prvSwitchTimerLists+0xc0>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004ae6:	4b06      	ldr	r3, [pc, #24]	; (8004b00 <prvSwitchTimerLists+0xc4>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a04      	ldr	r2, [pc, #16]	; (8004afc <prvSwitchTimerLists+0xc0>)
 8004aec:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004aee:	4a04      	ldr	r2, [pc, #16]	; (8004b00 <prvSwitchTimerLists+0xc4>)
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	6013      	str	r3, [r2, #0]
}
 8004af4:	bf00      	nop
 8004af6:	3718      	adds	r7, #24
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}
 8004afc:	24000e2c 	.word	0x24000e2c
 8004b00:	24000e30 	.word	0x24000e30

08004b04 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b082      	sub	sp, #8
 8004b08:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004b0a:	f000 f96b 	bl	8004de4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004b0e:	4b15      	ldr	r3, [pc, #84]	; (8004b64 <prvCheckForValidListAndQueue+0x60>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d120      	bne.n	8004b58 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004b16:	4814      	ldr	r0, [pc, #80]	; (8004b68 <prvCheckForValidListAndQueue+0x64>)
 8004b18:	f7fe f81e 	bl	8002b58 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004b1c:	4813      	ldr	r0, [pc, #76]	; (8004b6c <prvCheckForValidListAndQueue+0x68>)
 8004b1e:	f7fe f81b 	bl	8002b58 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004b22:	4b13      	ldr	r3, [pc, #76]	; (8004b70 <prvCheckForValidListAndQueue+0x6c>)
 8004b24:	4a10      	ldr	r2, [pc, #64]	; (8004b68 <prvCheckForValidListAndQueue+0x64>)
 8004b26:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004b28:	4b12      	ldr	r3, [pc, #72]	; (8004b74 <prvCheckForValidListAndQueue+0x70>)
 8004b2a:	4a10      	ldr	r2, [pc, #64]	; (8004b6c <prvCheckForValidListAndQueue+0x68>)
 8004b2c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004b2e:	2300      	movs	r3, #0
 8004b30:	9300      	str	r3, [sp, #0]
 8004b32:	4b11      	ldr	r3, [pc, #68]	; (8004b78 <prvCheckForValidListAndQueue+0x74>)
 8004b34:	4a11      	ldr	r2, [pc, #68]	; (8004b7c <prvCheckForValidListAndQueue+0x78>)
 8004b36:	2110      	movs	r1, #16
 8004b38:	200a      	movs	r0, #10
 8004b3a:	f7fe f929 	bl	8002d90 <xQueueGenericCreateStatic>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	4a08      	ldr	r2, [pc, #32]	; (8004b64 <prvCheckForValidListAndQueue+0x60>)
 8004b42:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004b44:	4b07      	ldr	r3, [pc, #28]	; (8004b64 <prvCheckForValidListAndQueue+0x60>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d005      	beq.n	8004b58 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004b4c:	4b05      	ldr	r3, [pc, #20]	; (8004b64 <prvCheckForValidListAndQueue+0x60>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	490b      	ldr	r1, [pc, #44]	; (8004b80 <prvCheckForValidListAndQueue+0x7c>)
 8004b52:	4618      	mov	r0, r3
 8004b54:	f7fe fd42 	bl	80035dc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004b58:	f000 f974 	bl	8004e44 <vPortExitCritical>
}
 8004b5c:	bf00      	nop
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}
 8004b62:	bf00      	nop
 8004b64:	24000e34 	.word	0x24000e34
 8004b68:	24000e04 	.word	0x24000e04
 8004b6c:	24000e18 	.word	0x24000e18
 8004b70:	24000e2c 	.word	0x24000e2c
 8004b74:	24000e30 	.word	0x24000e30
 8004b78:	24000ee0 	.word	0x24000ee0
 8004b7c:	24000e40 	.word	0x24000e40
 8004b80:	0800564c 	.word	0x0800564c

08004b84 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004b84:	b480      	push	{r7}
 8004b86:	b085      	sub	sp, #20
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	60f8      	str	r0, [r7, #12]
 8004b8c:	60b9      	str	r1, [r7, #8]
 8004b8e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	3b04      	subs	r3, #4
 8004b94:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004b9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	3b04      	subs	r3, #4
 8004ba2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	f023 0201 	bic.w	r2, r3, #1
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	3b04      	subs	r3, #4
 8004bb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004bb4:	4a0c      	ldr	r2, [pc, #48]	; (8004be8 <pxPortInitialiseStack+0x64>)
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	3b14      	subs	r3, #20
 8004bbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004bc0:	687a      	ldr	r2, [r7, #4]
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	3b04      	subs	r3, #4
 8004bca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f06f 0202 	mvn.w	r2, #2
 8004bd2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	3b20      	subs	r3, #32
 8004bd8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004bda:	68fb      	ldr	r3, [r7, #12]
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	3714      	adds	r7, #20
 8004be0:	46bd      	mov	sp, r7
 8004be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be6:	4770      	bx	lr
 8004be8:	08004bed 	.word	0x08004bed

08004bec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004bec:	b480      	push	{r7}
 8004bee:	b085      	sub	sp, #20
 8004bf0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004bf6:	4b12      	ldr	r3, [pc, #72]	; (8004c40 <prvTaskExitError+0x54>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bfe:	d00a      	beq.n	8004c16 <prvTaskExitError+0x2a>
	__asm volatile
 8004c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c04:	f383 8811 	msr	BASEPRI, r3
 8004c08:	f3bf 8f6f 	isb	sy
 8004c0c:	f3bf 8f4f 	dsb	sy
 8004c10:	60fb      	str	r3, [r7, #12]
}
 8004c12:	bf00      	nop
 8004c14:	e7fe      	b.n	8004c14 <prvTaskExitError+0x28>
	__asm volatile
 8004c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c1a:	f383 8811 	msr	BASEPRI, r3
 8004c1e:	f3bf 8f6f 	isb	sy
 8004c22:	f3bf 8f4f 	dsb	sy
 8004c26:	60bb      	str	r3, [r7, #8]
}
 8004c28:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004c2a:	bf00      	nop
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d0fc      	beq.n	8004c2c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004c32:	bf00      	nop
 8004c34:	bf00      	nop
 8004c36:	3714      	adds	r7, #20
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3e:	4770      	bx	lr
 8004c40:	24000010 	.word	0x24000010
	...

08004c50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004c50:	4b07      	ldr	r3, [pc, #28]	; (8004c70 <pxCurrentTCBConst2>)
 8004c52:	6819      	ldr	r1, [r3, #0]
 8004c54:	6808      	ldr	r0, [r1, #0]
 8004c56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c5a:	f380 8809 	msr	PSP, r0
 8004c5e:	f3bf 8f6f 	isb	sy
 8004c62:	f04f 0000 	mov.w	r0, #0
 8004c66:	f380 8811 	msr	BASEPRI, r0
 8004c6a:	4770      	bx	lr
 8004c6c:	f3af 8000 	nop.w

08004c70 <pxCurrentTCBConst2>:
 8004c70:	24000904 	.word	0x24000904
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004c74:	bf00      	nop
 8004c76:	bf00      	nop

08004c78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004c78:	4808      	ldr	r0, [pc, #32]	; (8004c9c <prvPortStartFirstTask+0x24>)
 8004c7a:	6800      	ldr	r0, [r0, #0]
 8004c7c:	6800      	ldr	r0, [r0, #0]
 8004c7e:	f380 8808 	msr	MSP, r0
 8004c82:	f04f 0000 	mov.w	r0, #0
 8004c86:	f380 8814 	msr	CONTROL, r0
 8004c8a:	b662      	cpsie	i
 8004c8c:	b661      	cpsie	f
 8004c8e:	f3bf 8f4f 	dsb	sy
 8004c92:	f3bf 8f6f 	isb	sy
 8004c96:	df00      	svc	0
 8004c98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004c9a:	bf00      	nop
 8004c9c:	e000ed08 	.word	0xe000ed08

08004ca0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b086      	sub	sp, #24
 8004ca4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004ca6:	4b46      	ldr	r3, [pc, #280]	; (8004dc0 <xPortStartScheduler+0x120>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a46      	ldr	r2, [pc, #280]	; (8004dc4 <xPortStartScheduler+0x124>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d10a      	bne.n	8004cc6 <xPortStartScheduler+0x26>
	__asm volatile
 8004cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cb4:	f383 8811 	msr	BASEPRI, r3
 8004cb8:	f3bf 8f6f 	isb	sy
 8004cbc:	f3bf 8f4f 	dsb	sy
 8004cc0:	613b      	str	r3, [r7, #16]
}
 8004cc2:	bf00      	nop
 8004cc4:	e7fe      	b.n	8004cc4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004cc6:	4b3e      	ldr	r3, [pc, #248]	; (8004dc0 <xPortStartScheduler+0x120>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a3f      	ldr	r2, [pc, #252]	; (8004dc8 <xPortStartScheduler+0x128>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d10a      	bne.n	8004ce6 <xPortStartScheduler+0x46>
	__asm volatile
 8004cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cd4:	f383 8811 	msr	BASEPRI, r3
 8004cd8:	f3bf 8f6f 	isb	sy
 8004cdc:	f3bf 8f4f 	dsb	sy
 8004ce0:	60fb      	str	r3, [r7, #12]
}
 8004ce2:	bf00      	nop
 8004ce4:	e7fe      	b.n	8004ce4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004ce6:	4b39      	ldr	r3, [pc, #228]	; (8004dcc <xPortStartScheduler+0x12c>)
 8004ce8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	781b      	ldrb	r3, [r3, #0]
 8004cee:	b2db      	uxtb	r3, r3
 8004cf0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	22ff      	movs	r2, #255	; 0xff
 8004cf6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	781b      	ldrb	r3, [r3, #0]
 8004cfc:	b2db      	uxtb	r3, r3
 8004cfe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004d00:	78fb      	ldrb	r3, [r7, #3]
 8004d02:	b2db      	uxtb	r3, r3
 8004d04:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004d08:	b2da      	uxtb	r2, r3
 8004d0a:	4b31      	ldr	r3, [pc, #196]	; (8004dd0 <xPortStartScheduler+0x130>)
 8004d0c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004d0e:	4b31      	ldr	r3, [pc, #196]	; (8004dd4 <xPortStartScheduler+0x134>)
 8004d10:	2207      	movs	r2, #7
 8004d12:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004d14:	e009      	b.n	8004d2a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004d16:	4b2f      	ldr	r3, [pc, #188]	; (8004dd4 <xPortStartScheduler+0x134>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	3b01      	subs	r3, #1
 8004d1c:	4a2d      	ldr	r2, [pc, #180]	; (8004dd4 <xPortStartScheduler+0x134>)
 8004d1e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004d20:	78fb      	ldrb	r3, [r7, #3]
 8004d22:	b2db      	uxtb	r3, r3
 8004d24:	005b      	lsls	r3, r3, #1
 8004d26:	b2db      	uxtb	r3, r3
 8004d28:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004d2a:	78fb      	ldrb	r3, [r7, #3]
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d32:	2b80      	cmp	r3, #128	; 0x80
 8004d34:	d0ef      	beq.n	8004d16 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004d36:	4b27      	ldr	r3, [pc, #156]	; (8004dd4 <xPortStartScheduler+0x134>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f1c3 0307 	rsb	r3, r3, #7
 8004d3e:	2b04      	cmp	r3, #4
 8004d40:	d00a      	beq.n	8004d58 <xPortStartScheduler+0xb8>
	__asm volatile
 8004d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d46:	f383 8811 	msr	BASEPRI, r3
 8004d4a:	f3bf 8f6f 	isb	sy
 8004d4e:	f3bf 8f4f 	dsb	sy
 8004d52:	60bb      	str	r3, [r7, #8]
}
 8004d54:	bf00      	nop
 8004d56:	e7fe      	b.n	8004d56 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004d58:	4b1e      	ldr	r3, [pc, #120]	; (8004dd4 <xPortStartScheduler+0x134>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	021b      	lsls	r3, r3, #8
 8004d5e:	4a1d      	ldr	r2, [pc, #116]	; (8004dd4 <xPortStartScheduler+0x134>)
 8004d60:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004d62:	4b1c      	ldr	r3, [pc, #112]	; (8004dd4 <xPortStartScheduler+0x134>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004d6a:	4a1a      	ldr	r2, [pc, #104]	; (8004dd4 <xPortStartScheduler+0x134>)
 8004d6c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	b2da      	uxtb	r2, r3
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004d76:	4b18      	ldr	r3, [pc, #96]	; (8004dd8 <xPortStartScheduler+0x138>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a17      	ldr	r2, [pc, #92]	; (8004dd8 <xPortStartScheduler+0x138>)
 8004d7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004d80:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004d82:	4b15      	ldr	r3, [pc, #84]	; (8004dd8 <xPortStartScheduler+0x138>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a14      	ldr	r2, [pc, #80]	; (8004dd8 <xPortStartScheduler+0x138>)
 8004d88:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004d8c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004d8e:	f000 f8dd 	bl	8004f4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004d92:	4b12      	ldr	r3, [pc, #72]	; (8004ddc <xPortStartScheduler+0x13c>)
 8004d94:	2200      	movs	r2, #0
 8004d96:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004d98:	f000 f8fc 	bl	8004f94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004d9c:	4b10      	ldr	r3, [pc, #64]	; (8004de0 <xPortStartScheduler+0x140>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a0f      	ldr	r2, [pc, #60]	; (8004de0 <xPortStartScheduler+0x140>)
 8004da2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004da6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004da8:	f7ff ff66 	bl	8004c78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004dac:	f7ff f846 	bl	8003e3c <vTaskSwitchContext>
	prvTaskExitError();
 8004db0:	f7ff ff1c 	bl	8004bec <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004db4:	2300      	movs	r3, #0
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3718      	adds	r7, #24
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}
 8004dbe:	bf00      	nop
 8004dc0:	e000ed00 	.word	0xe000ed00
 8004dc4:	410fc271 	.word	0x410fc271
 8004dc8:	410fc270 	.word	0x410fc270
 8004dcc:	e000e400 	.word	0xe000e400
 8004dd0:	24000f30 	.word	0x24000f30
 8004dd4:	24000f34 	.word	0x24000f34
 8004dd8:	e000ed20 	.word	0xe000ed20
 8004ddc:	24000010 	.word	0x24000010
 8004de0:	e000ef34 	.word	0xe000ef34

08004de4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004de4:	b480      	push	{r7}
 8004de6:	b083      	sub	sp, #12
 8004de8:	af00      	add	r7, sp, #0
	__asm volatile
 8004dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dee:	f383 8811 	msr	BASEPRI, r3
 8004df2:	f3bf 8f6f 	isb	sy
 8004df6:	f3bf 8f4f 	dsb	sy
 8004dfa:	607b      	str	r3, [r7, #4]
}
 8004dfc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004dfe:	4b0f      	ldr	r3, [pc, #60]	; (8004e3c <vPortEnterCritical+0x58>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	3301      	adds	r3, #1
 8004e04:	4a0d      	ldr	r2, [pc, #52]	; (8004e3c <vPortEnterCritical+0x58>)
 8004e06:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004e08:	4b0c      	ldr	r3, [pc, #48]	; (8004e3c <vPortEnterCritical+0x58>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	d10f      	bne.n	8004e30 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004e10:	4b0b      	ldr	r3, [pc, #44]	; (8004e40 <vPortEnterCritical+0x5c>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	b2db      	uxtb	r3, r3
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d00a      	beq.n	8004e30 <vPortEnterCritical+0x4c>
	__asm volatile
 8004e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e1e:	f383 8811 	msr	BASEPRI, r3
 8004e22:	f3bf 8f6f 	isb	sy
 8004e26:	f3bf 8f4f 	dsb	sy
 8004e2a:	603b      	str	r3, [r7, #0]
}
 8004e2c:	bf00      	nop
 8004e2e:	e7fe      	b.n	8004e2e <vPortEnterCritical+0x4a>
	}
}
 8004e30:	bf00      	nop
 8004e32:	370c      	adds	r7, #12
 8004e34:	46bd      	mov	sp, r7
 8004e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3a:	4770      	bx	lr
 8004e3c:	24000010 	.word	0x24000010
 8004e40:	e000ed04 	.word	0xe000ed04

08004e44 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004e44:	b480      	push	{r7}
 8004e46:	b083      	sub	sp, #12
 8004e48:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004e4a:	4b12      	ldr	r3, [pc, #72]	; (8004e94 <vPortExitCritical+0x50>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d10a      	bne.n	8004e68 <vPortExitCritical+0x24>
	__asm volatile
 8004e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e56:	f383 8811 	msr	BASEPRI, r3
 8004e5a:	f3bf 8f6f 	isb	sy
 8004e5e:	f3bf 8f4f 	dsb	sy
 8004e62:	607b      	str	r3, [r7, #4]
}
 8004e64:	bf00      	nop
 8004e66:	e7fe      	b.n	8004e66 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004e68:	4b0a      	ldr	r3, [pc, #40]	; (8004e94 <vPortExitCritical+0x50>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	3b01      	subs	r3, #1
 8004e6e:	4a09      	ldr	r2, [pc, #36]	; (8004e94 <vPortExitCritical+0x50>)
 8004e70:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004e72:	4b08      	ldr	r3, [pc, #32]	; (8004e94 <vPortExitCritical+0x50>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d105      	bne.n	8004e86 <vPortExitCritical+0x42>
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	f383 8811 	msr	BASEPRI, r3
}
 8004e84:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004e86:	bf00      	nop
 8004e88:	370c      	adds	r7, #12
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e90:	4770      	bx	lr
 8004e92:	bf00      	nop
 8004e94:	24000010 	.word	0x24000010
	...

08004ea0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004ea0:	f3ef 8009 	mrs	r0, PSP
 8004ea4:	f3bf 8f6f 	isb	sy
 8004ea8:	4b15      	ldr	r3, [pc, #84]	; (8004f00 <pxCurrentTCBConst>)
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	f01e 0f10 	tst.w	lr, #16
 8004eb0:	bf08      	it	eq
 8004eb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004eb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004eba:	6010      	str	r0, [r2, #0]
 8004ebc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004ec0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004ec4:	f380 8811 	msr	BASEPRI, r0
 8004ec8:	f3bf 8f4f 	dsb	sy
 8004ecc:	f3bf 8f6f 	isb	sy
 8004ed0:	f7fe ffb4 	bl	8003e3c <vTaskSwitchContext>
 8004ed4:	f04f 0000 	mov.w	r0, #0
 8004ed8:	f380 8811 	msr	BASEPRI, r0
 8004edc:	bc09      	pop	{r0, r3}
 8004ede:	6819      	ldr	r1, [r3, #0]
 8004ee0:	6808      	ldr	r0, [r1, #0]
 8004ee2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ee6:	f01e 0f10 	tst.w	lr, #16
 8004eea:	bf08      	it	eq
 8004eec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004ef0:	f380 8809 	msr	PSP, r0
 8004ef4:	f3bf 8f6f 	isb	sy
 8004ef8:	4770      	bx	lr
 8004efa:	bf00      	nop
 8004efc:	f3af 8000 	nop.w

08004f00 <pxCurrentTCBConst>:
 8004f00:	24000904 	.word	0x24000904
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004f04:	bf00      	nop
 8004f06:	bf00      	nop

08004f08 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b082      	sub	sp, #8
 8004f0c:	af00      	add	r7, sp, #0
	__asm volatile
 8004f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f12:	f383 8811 	msr	BASEPRI, r3
 8004f16:	f3bf 8f6f 	isb	sy
 8004f1a:	f3bf 8f4f 	dsb	sy
 8004f1e:	607b      	str	r3, [r7, #4]
}
 8004f20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004f22:	f7fe fed1 	bl	8003cc8 <xTaskIncrementTick>
 8004f26:	4603      	mov	r3, r0
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d003      	beq.n	8004f34 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004f2c:	4b06      	ldr	r3, [pc, #24]	; (8004f48 <xPortSysTickHandler+0x40>)
 8004f2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f32:	601a      	str	r2, [r3, #0]
 8004f34:	2300      	movs	r3, #0
 8004f36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	f383 8811 	msr	BASEPRI, r3
}
 8004f3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004f40:	bf00      	nop
 8004f42:	3708      	adds	r7, #8
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd80      	pop	{r7, pc}
 8004f48:	e000ed04 	.word	0xe000ed04

08004f4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004f50:	4b0b      	ldr	r3, [pc, #44]	; (8004f80 <vPortSetupTimerInterrupt+0x34>)
 8004f52:	2200      	movs	r2, #0
 8004f54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004f56:	4b0b      	ldr	r3, [pc, #44]	; (8004f84 <vPortSetupTimerInterrupt+0x38>)
 8004f58:	2200      	movs	r2, #0
 8004f5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004f5c:	4b0a      	ldr	r3, [pc, #40]	; (8004f88 <vPortSetupTimerInterrupt+0x3c>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a0a      	ldr	r2, [pc, #40]	; (8004f8c <vPortSetupTimerInterrupt+0x40>)
 8004f62:	fba2 2303 	umull	r2, r3, r2, r3
 8004f66:	099b      	lsrs	r3, r3, #6
 8004f68:	4a09      	ldr	r2, [pc, #36]	; (8004f90 <vPortSetupTimerInterrupt+0x44>)
 8004f6a:	3b01      	subs	r3, #1
 8004f6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004f6e:	4b04      	ldr	r3, [pc, #16]	; (8004f80 <vPortSetupTimerInterrupt+0x34>)
 8004f70:	2207      	movs	r2, #7
 8004f72:	601a      	str	r2, [r3, #0]
}
 8004f74:	bf00      	nop
 8004f76:	46bd      	mov	sp, r7
 8004f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7c:	4770      	bx	lr
 8004f7e:	bf00      	nop
 8004f80:	e000e010 	.word	0xe000e010
 8004f84:	e000e018 	.word	0xe000e018
 8004f88:	24000000 	.word	0x24000000
 8004f8c:	10624dd3 	.word	0x10624dd3
 8004f90:	e000e014 	.word	0xe000e014

08004f94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004f94:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004fa4 <vPortEnableVFP+0x10>
 8004f98:	6801      	ldr	r1, [r0, #0]
 8004f9a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004f9e:	6001      	str	r1, [r0, #0]
 8004fa0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004fa2:	bf00      	nop
 8004fa4:	e000ed88 	.word	0xe000ed88

08004fa8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004fa8:	b480      	push	{r7}
 8004faa:	b085      	sub	sp, #20
 8004fac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004fae:	f3ef 8305 	mrs	r3, IPSR
 8004fb2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2b0f      	cmp	r3, #15
 8004fb8:	d914      	bls.n	8004fe4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004fba:	4a17      	ldr	r2, [pc, #92]	; (8005018 <vPortValidateInterruptPriority+0x70>)
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	4413      	add	r3, r2
 8004fc0:	781b      	ldrb	r3, [r3, #0]
 8004fc2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004fc4:	4b15      	ldr	r3, [pc, #84]	; (800501c <vPortValidateInterruptPriority+0x74>)
 8004fc6:	781b      	ldrb	r3, [r3, #0]
 8004fc8:	7afa      	ldrb	r2, [r7, #11]
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	d20a      	bcs.n	8004fe4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fd2:	f383 8811 	msr	BASEPRI, r3
 8004fd6:	f3bf 8f6f 	isb	sy
 8004fda:	f3bf 8f4f 	dsb	sy
 8004fde:	607b      	str	r3, [r7, #4]
}
 8004fe0:	bf00      	nop
 8004fe2:	e7fe      	b.n	8004fe2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004fe4:	4b0e      	ldr	r3, [pc, #56]	; (8005020 <vPortValidateInterruptPriority+0x78>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004fec:	4b0d      	ldr	r3, [pc, #52]	; (8005024 <vPortValidateInterruptPriority+0x7c>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d90a      	bls.n	800500a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ff8:	f383 8811 	msr	BASEPRI, r3
 8004ffc:	f3bf 8f6f 	isb	sy
 8005000:	f3bf 8f4f 	dsb	sy
 8005004:	603b      	str	r3, [r7, #0]
}
 8005006:	bf00      	nop
 8005008:	e7fe      	b.n	8005008 <vPortValidateInterruptPriority+0x60>
	}
 800500a:	bf00      	nop
 800500c:	3714      	adds	r7, #20
 800500e:	46bd      	mov	sp, r7
 8005010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005014:	4770      	bx	lr
 8005016:	bf00      	nop
 8005018:	e000e3f0 	.word	0xe000e3f0
 800501c:	24000f30 	.word	0x24000f30
 8005020:	e000ed0c 	.word	0xe000ed0c
 8005024:	24000f34 	.word	0x24000f34

08005028 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b08a      	sub	sp, #40	; 0x28
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005030:	2300      	movs	r3, #0
 8005032:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005034:	f7fe fd8c 	bl	8003b50 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005038:	4b5b      	ldr	r3, [pc, #364]	; (80051a8 <pvPortMalloc+0x180>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d101      	bne.n	8005044 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005040:	f000 f920 	bl	8005284 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005044:	4b59      	ldr	r3, [pc, #356]	; (80051ac <pvPortMalloc+0x184>)
 8005046:	681a      	ldr	r2, [r3, #0]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	4013      	ands	r3, r2
 800504c:	2b00      	cmp	r3, #0
 800504e:	f040 8093 	bne.w	8005178 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d01d      	beq.n	8005094 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005058:	2208      	movs	r2, #8
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	4413      	add	r3, r2
 800505e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	f003 0307 	and.w	r3, r3, #7
 8005066:	2b00      	cmp	r3, #0
 8005068:	d014      	beq.n	8005094 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	f023 0307 	bic.w	r3, r3, #7
 8005070:	3308      	adds	r3, #8
 8005072:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	f003 0307 	and.w	r3, r3, #7
 800507a:	2b00      	cmp	r3, #0
 800507c:	d00a      	beq.n	8005094 <pvPortMalloc+0x6c>
	__asm volatile
 800507e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005082:	f383 8811 	msr	BASEPRI, r3
 8005086:	f3bf 8f6f 	isb	sy
 800508a:	f3bf 8f4f 	dsb	sy
 800508e:	617b      	str	r3, [r7, #20]
}
 8005090:	bf00      	nop
 8005092:	e7fe      	b.n	8005092 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d06e      	beq.n	8005178 <pvPortMalloc+0x150>
 800509a:	4b45      	ldr	r3, [pc, #276]	; (80051b0 <pvPortMalloc+0x188>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	687a      	ldr	r2, [r7, #4]
 80050a0:	429a      	cmp	r2, r3
 80050a2:	d869      	bhi.n	8005178 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80050a4:	4b43      	ldr	r3, [pc, #268]	; (80051b4 <pvPortMalloc+0x18c>)
 80050a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80050a8:	4b42      	ldr	r3, [pc, #264]	; (80051b4 <pvPortMalloc+0x18c>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80050ae:	e004      	b.n	80050ba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80050b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80050b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80050ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	687a      	ldr	r2, [r7, #4]
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d903      	bls.n	80050cc <pvPortMalloc+0xa4>
 80050c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d1f1      	bne.n	80050b0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80050cc:	4b36      	ldr	r3, [pc, #216]	; (80051a8 <pvPortMalloc+0x180>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050d2:	429a      	cmp	r2, r3
 80050d4:	d050      	beq.n	8005178 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80050d6:	6a3b      	ldr	r3, [r7, #32]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	2208      	movs	r2, #8
 80050dc:	4413      	add	r3, r2
 80050de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80050e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e2:	681a      	ldr	r2, [r3, #0]
 80050e4:	6a3b      	ldr	r3, [r7, #32]
 80050e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80050e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ea:	685a      	ldr	r2, [r3, #4]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	1ad2      	subs	r2, r2, r3
 80050f0:	2308      	movs	r3, #8
 80050f2:	005b      	lsls	r3, r3, #1
 80050f4:	429a      	cmp	r2, r3
 80050f6:	d91f      	bls.n	8005138 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80050f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	4413      	add	r3, r2
 80050fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005100:	69bb      	ldr	r3, [r7, #24]
 8005102:	f003 0307 	and.w	r3, r3, #7
 8005106:	2b00      	cmp	r3, #0
 8005108:	d00a      	beq.n	8005120 <pvPortMalloc+0xf8>
	__asm volatile
 800510a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800510e:	f383 8811 	msr	BASEPRI, r3
 8005112:	f3bf 8f6f 	isb	sy
 8005116:	f3bf 8f4f 	dsb	sy
 800511a:	613b      	str	r3, [r7, #16]
}
 800511c:	bf00      	nop
 800511e:	e7fe      	b.n	800511e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005122:	685a      	ldr	r2, [r3, #4]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	1ad2      	subs	r2, r2, r3
 8005128:	69bb      	ldr	r3, [r7, #24]
 800512a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800512c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005132:	69b8      	ldr	r0, [r7, #24]
 8005134:	f000 f908 	bl	8005348 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005138:	4b1d      	ldr	r3, [pc, #116]	; (80051b0 <pvPortMalloc+0x188>)
 800513a:	681a      	ldr	r2, [r3, #0]
 800513c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	1ad3      	subs	r3, r2, r3
 8005142:	4a1b      	ldr	r2, [pc, #108]	; (80051b0 <pvPortMalloc+0x188>)
 8005144:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005146:	4b1a      	ldr	r3, [pc, #104]	; (80051b0 <pvPortMalloc+0x188>)
 8005148:	681a      	ldr	r2, [r3, #0]
 800514a:	4b1b      	ldr	r3, [pc, #108]	; (80051b8 <pvPortMalloc+0x190>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	429a      	cmp	r2, r3
 8005150:	d203      	bcs.n	800515a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005152:	4b17      	ldr	r3, [pc, #92]	; (80051b0 <pvPortMalloc+0x188>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a18      	ldr	r2, [pc, #96]	; (80051b8 <pvPortMalloc+0x190>)
 8005158:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800515a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800515c:	685a      	ldr	r2, [r3, #4]
 800515e:	4b13      	ldr	r3, [pc, #76]	; (80051ac <pvPortMalloc+0x184>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	431a      	orrs	r2, r3
 8005164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005166:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800516a:	2200      	movs	r2, #0
 800516c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800516e:	4b13      	ldr	r3, [pc, #76]	; (80051bc <pvPortMalloc+0x194>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	3301      	adds	r3, #1
 8005174:	4a11      	ldr	r2, [pc, #68]	; (80051bc <pvPortMalloc+0x194>)
 8005176:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005178:	f7fe fcf8 	bl	8003b6c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800517c:	69fb      	ldr	r3, [r7, #28]
 800517e:	f003 0307 	and.w	r3, r3, #7
 8005182:	2b00      	cmp	r3, #0
 8005184:	d00a      	beq.n	800519c <pvPortMalloc+0x174>
	__asm volatile
 8005186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800518a:	f383 8811 	msr	BASEPRI, r3
 800518e:	f3bf 8f6f 	isb	sy
 8005192:	f3bf 8f4f 	dsb	sy
 8005196:	60fb      	str	r3, [r7, #12]
}
 8005198:	bf00      	nop
 800519a:	e7fe      	b.n	800519a <pvPortMalloc+0x172>
	return pvReturn;
 800519c:	69fb      	ldr	r3, [r7, #28]
}
 800519e:	4618      	mov	r0, r3
 80051a0:	3728      	adds	r7, #40	; 0x28
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}
 80051a6:	bf00      	nop
 80051a8:	24004b40 	.word	0x24004b40
 80051ac:	24004b54 	.word	0x24004b54
 80051b0:	24004b44 	.word	0x24004b44
 80051b4:	24004b38 	.word	0x24004b38
 80051b8:	24004b48 	.word	0x24004b48
 80051bc:	24004b4c 	.word	0x24004b4c

080051c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b086      	sub	sp, #24
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d04d      	beq.n	800526e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80051d2:	2308      	movs	r3, #8
 80051d4:	425b      	negs	r3, r3
 80051d6:	697a      	ldr	r2, [r7, #20]
 80051d8:	4413      	add	r3, r2
 80051da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	685a      	ldr	r2, [r3, #4]
 80051e4:	4b24      	ldr	r3, [pc, #144]	; (8005278 <vPortFree+0xb8>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4013      	ands	r3, r2
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d10a      	bne.n	8005204 <vPortFree+0x44>
	__asm volatile
 80051ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051f2:	f383 8811 	msr	BASEPRI, r3
 80051f6:	f3bf 8f6f 	isb	sy
 80051fa:	f3bf 8f4f 	dsb	sy
 80051fe:	60fb      	str	r3, [r7, #12]
}
 8005200:	bf00      	nop
 8005202:	e7fe      	b.n	8005202 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d00a      	beq.n	8005222 <vPortFree+0x62>
	__asm volatile
 800520c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005210:	f383 8811 	msr	BASEPRI, r3
 8005214:	f3bf 8f6f 	isb	sy
 8005218:	f3bf 8f4f 	dsb	sy
 800521c:	60bb      	str	r3, [r7, #8]
}
 800521e:	bf00      	nop
 8005220:	e7fe      	b.n	8005220 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	685a      	ldr	r2, [r3, #4]
 8005226:	4b14      	ldr	r3, [pc, #80]	; (8005278 <vPortFree+0xb8>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4013      	ands	r3, r2
 800522c:	2b00      	cmp	r3, #0
 800522e:	d01e      	beq.n	800526e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d11a      	bne.n	800526e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	685a      	ldr	r2, [r3, #4]
 800523c:	4b0e      	ldr	r3, [pc, #56]	; (8005278 <vPortFree+0xb8>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	43db      	mvns	r3, r3
 8005242:	401a      	ands	r2, r3
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005248:	f7fe fc82 	bl	8003b50 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	685a      	ldr	r2, [r3, #4]
 8005250:	4b0a      	ldr	r3, [pc, #40]	; (800527c <vPortFree+0xbc>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4413      	add	r3, r2
 8005256:	4a09      	ldr	r2, [pc, #36]	; (800527c <vPortFree+0xbc>)
 8005258:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800525a:	6938      	ldr	r0, [r7, #16]
 800525c:	f000 f874 	bl	8005348 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005260:	4b07      	ldr	r3, [pc, #28]	; (8005280 <vPortFree+0xc0>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	3301      	adds	r3, #1
 8005266:	4a06      	ldr	r2, [pc, #24]	; (8005280 <vPortFree+0xc0>)
 8005268:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800526a:	f7fe fc7f 	bl	8003b6c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800526e:	bf00      	nop
 8005270:	3718      	adds	r7, #24
 8005272:	46bd      	mov	sp, r7
 8005274:	bd80      	pop	{r7, pc}
 8005276:	bf00      	nop
 8005278:	24004b54 	.word	0x24004b54
 800527c:	24004b44 	.word	0x24004b44
 8005280:	24004b50 	.word	0x24004b50

08005284 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005284:	b480      	push	{r7}
 8005286:	b085      	sub	sp, #20
 8005288:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800528a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800528e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005290:	4b27      	ldr	r3, [pc, #156]	; (8005330 <prvHeapInit+0xac>)
 8005292:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f003 0307 	and.w	r3, r3, #7
 800529a:	2b00      	cmp	r3, #0
 800529c:	d00c      	beq.n	80052b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	3307      	adds	r3, #7
 80052a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f023 0307 	bic.w	r3, r3, #7
 80052aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80052ac:	68ba      	ldr	r2, [r7, #8]
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	1ad3      	subs	r3, r2, r3
 80052b2:	4a1f      	ldr	r2, [pc, #124]	; (8005330 <prvHeapInit+0xac>)
 80052b4:	4413      	add	r3, r2
 80052b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80052bc:	4a1d      	ldr	r2, [pc, #116]	; (8005334 <prvHeapInit+0xb0>)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80052c2:	4b1c      	ldr	r3, [pc, #112]	; (8005334 <prvHeapInit+0xb0>)
 80052c4:	2200      	movs	r2, #0
 80052c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	68ba      	ldr	r2, [r7, #8]
 80052cc:	4413      	add	r3, r2
 80052ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80052d0:	2208      	movs	r2, #8
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	1a9b      	subs	r3, r3, r2
 80052d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	f023 0307 	bic.w	r3, r3, #7
 80052de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	4a15      	ldr	r2, [pc, #84]	; (8005338 <prvHeapInit+0xb4>)
 80052e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80052e6:	4b14      	ldr	r3, [pc, #80]	; (8005338 <prvHeapInit+0xb4>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	2200      	movs	r2, #0
 80052ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80052ee:	4b12      	ldr	r3, [pc, #72]	; (8005338 <prvHeapInit+0xb4>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	2200      	movs	r2, #0
 80052f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	68fa      	ldr	r2, [r7, #12]
 80052fe:	1ad2      	subs	r2, r2, r3
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005304:	4b0c      	ldr	r3, [pc, #48]	; (8005338 <prvHeapInit+0xb4>)
 8005306:	681a      	ldr	r2, [r3, #0]
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	4a0a      	ldr	r2, [pc, #40]	; (800533c <prvHeapInit+0xb8>)
 8005312:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	4a09      	ldr	r2, [pc, #36]	; (8005340 <prvHeapInit+0xbc>)
 800531a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800531c:	4b09      	ldr	r3, [pc, #36]	; (8005344 <prvHeapInit+0xc0>)
 800531e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005322:	601a      	str	r2, [r3, #0]
}
 8005324:	bf00      	nop
 8005326:	3714      	adds	r7, #20
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr
 8005330:	24000f38 	.word	0x24000f38
 8005334:	24004b38 	.word	0x24004b38
 8005338:	24004b40 	.word	0x24004b40
 800533c:	24004b48 	.word	0x24004b48
 8005340:	24004b44 	.word	0x24004b44
 8005344:	24004b54 	.word	0x24004b54

08005348 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005348:	b480      	push	{r7}
 800534a:	b085      	sub	sp, #20
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005350:	4b28      	ldr	r3, [pc, #160]	; (80053f4 <prvInsertBlockIntoFreeList+0xac>)
 8005352:	60fb      	str	r3, [r7, #12]
 8005354:	e002      	b.n	800535c <prvInsertBlockIntoFreeList+0x14>
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	60fb      	str	r3, [r7, #12]
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	687a      	ldr	r2, [r7, #4]
 8005362:	429a      	cmp	r2, r3
 8005364:	d8f7      	bhi.n	8005356 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	68ba      	ldr	r2, [r7, #8]
 8005370:	4413      	add	r3, r2
 8005372:	687a      	ldr	r2, [r7, #4]
 8005374:	429a      	cmp	r2, r3
 8005376:	d108      	bne.n	800538a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	685a      	ldr	r2, [r3, #4]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	441a      	add	r2, r3
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	68ba      	ldr	r2, [r7, #8]
 8005394:	441a      	add	r2, r3
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	429a      	cmp	r2, r3
 800539c:	d118      	bne.n	80053d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681a      	ldr	r2, [r3, #0]
 80053a2:	4b15      	ldr	r3, [pc, #84]	; (80053f8 <prvInsertBlockIntoFreeList+0xb0>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	429a      	cmp	r2, r3
 80053a8:	d00d      	beq.n	80053c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	685a      	ldr	r2, [r3, #4]
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	441a      	add	r2, r3
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	681a      	ldr	r2, [r3, #0]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	601a      	str	r2, [r3, #0]
 80053c4:	e008      	b.n	80053d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80053c6:	4b0c      	ldr	r3, [pc, #48]	; (80053f8 <prvInsertBlockIntoFreeList+0xb0>)
 80053c8:	681a      	ldr	r2, [r3, #0]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	601a      	str	r2, [r3, #0]
 80053ce:	e003      	b.n	80053d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681a      	ldr	r2, [r3, #0]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80053d8:	68fa      	ldr	r2, [r7, #12]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	429a      	cmp	r2, r3
 80053de:	d002      	beq.n	80053e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	687a      	ldr	r2, [r7, #4]
 80053e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80053e6:	bf00      	nop
 80053e8:	3714      	adds	r7, #20
 80053ea:	46bd      	mov	sp, r7
 80053ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f0:	4770      	bx	lr
 80053f2:	bf00      	nop
 80053f4:	24004b38 	.word	0x24004b38
 80053f8:	24004b40 	.word	0x24004b40

080053fc <__libc_init_array>:
 80053fc:	b570      	push	{r4, r5, r6, lr}
 80053fe:	4d0d      	ldr	r5, [pc, #52]	; (8005434 <__libc_init_array+0x38>)
 8005400:	4c0d      	ldr	r4, [pc, #52]	; (8005438 <__libc_init_array+0x3c>)
 8005402:	1b64      	subs	r4, r4, r5
 8005404:	10a4      	asrs	r4, r4, #2
 8005406:	2600      	movs	r6, #0
 8005408:	42a6      	cmp	r6, r4
 800540a:	d109      	bne.n	8005420 <__libc_init_array+0x24>
 800540c:	4d0b      	ldr	r5, [pc, #44]	; (800543c <__libc_init_array+0x40>)
 800540e:	4c0c      	ldr	r4, [pc, #48]	; (8005440 <__libc_init_array+0x44>)
 8005410:	f000 f8f2 	bl	80055f8 <_init>
 8005414:	1b64      	subs	r4, r4, r5
 8005416:	10a4      	asrs	r4, r4, #2
 8005418:	2600      	movs	r6, #0
 800541a:	42a6      	cmp	r6, r4
 800541c:	d105      	bne.n	800542a <__libc_init_array+0x2e>
 800541e:	bd70      	pop	{r4, r5, r6, pc}
 8005420:	f855 3b04 	ldr.w	r3, [r5], #4
 8005424:	4798      	blx	r3
 8005426:	3601      	adds	r6, #1
 8005428:	e7ee      	b.n	8005408 <__libc_init_array+0xc>
 800542a:	f855 3b04 	ldr.w	r3, [r5], #4
 800542e:	4798      	blx	r3
 8005430:	3601      	adds	r6, #1
 8005432:	e7f2      	b.n	800541a <__libc_init_array+0x1e>
 8005434:	08005754 	.word	0x08005754
 8005438:	08005754 	.word	0x08005754
 800543c:	08005754 	.word	0x08005754
 8005440:	08005758 	.word	0x08005758

08005444 <__retarget_lock_acquire_recursive>:
 8005444:	4770      	bx	lr

08005446 <__retarget_lock_release_recursive>:
 8005446:	4770      	bx	lr

08005448 <memcpy>:
 8005448:	440a      	add	r2, r1
 800544a:	4291      	cmp	r1, r2
 800544c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005450:	d100      	bne.n	8005454 <memcpy+0xc>
 8005452:	4770      	bx	lr
 8005454:	b510      	push	{r4, lr}
 8005456:	f811 4b01 	ldrb.w	r4, [r1], #1
 800545a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800545e:	4291      	cmp	r1, r2
 8005460:	d1f9      	bne.n	8005456 <memcpy+0xe>
 8005462:	bd10      	pop	{r4, pc}

08005464 <memset>:
 8005464:	4402      	add	r2, r0
 8005466:	4603      	mov	r3, r0
 8005468:	4293      	cmp	r3, r2
 800546a:	d100      	bne.n	800546e <memset+0xa>
 800546c:	4770      	bx	lr
 800546e:	f803 1b01 	strb.w	r1, [r3], #1
 8005472:	e7f9      	b.n	8005468 <memset+0x4>

08005474 <cleanup_glue>:
 8005474:	b538      	push	{r3, r4, r5, lr}
 8005476:	460c      	mov	r4, r1
 8005478:	6809      	ldr	r1, [r1, #0]
 800547a:	4605      	mov	r5, r0
 800547c:	b109      	cbz	r1, 8005482 <cleanup_glue+0xe>
 800547e:	f7ff fff9 	bl	8005474 <cleanup_glue>
 8005482:	4621      	mov	r1, r4
 8005484:	4628      	mov	r0, r5
 8005486:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800548a:	f000 b869 	b.w	8005560 <_free_r>
	...

08005490 <_reclaim_reent>:
 8005490:	4b2c      	ldr	r3, [pc, #176]	; (8005544 <_reclaim_reent+0xb4>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4283      	cmp	r3, r0
 8005496:	b570      	push	{r4, r5, r6, lr}
 8005498:	4604      	mov	r4, r0
 800549a:	d051      	beq.n	8005540 <_reclaim_reent+0xb0>
 800549c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800549e:	b143      	cbz	r3, 80054b2 <_reclaim_reent+0x22>
 80054a0:	68db      	ldr	r3, [r3, #12]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d14a      	bne.n	800553c <_reclaim_reent+0xac>
 80054a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80054a8:	6819      	ldr	r1, [r3, #0]
 80054aa:	b111      	cbz	r1, 80054b2 <_reclaim_reent+0x22>
 80054ac:	4620      	mov	r0, r4
 80054ae:	f000 f857 	bl	8005560 <_free_r>
 80054b2:	6961      	ldr	r1, [r4, #20]
 80054b4:	b111      	cbz	r1, 80054bc <_reclaim_reent+0x2c>
 80054b6:	4620      	mov	r0, r4
 80054b8:	f000 f852 	bl	8005560 <_free_r>
 80054bc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80054be:	b111      	cbz	r1, 80054c6 <_reclaim_reent+0x36>
 80054c0:	4620      	mov	r0, r4
 80054c2:	f000 f84d 	bl	8005560 <_free_r>
 80054c6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80054c8:	b111      	cbz	r1, 80054d0 <_reclaim_reent+0x40>
 80054ca:	4620      	mov	r0, r4
 80054cc:	f000 f848 	bl	8005560 <_free_r>
 80054d0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80054d2:	b111      	cbz	r1, 80054da <_reclaim_reent+0x4a>
 80054d4:	4620      	mov	r0, r4
 80054d6:	f000 f843 	bl	8005560 <_free_r>
 80054da:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80054dc:	b111      	cbz	r1, 80054e4 <_reclaim_reent+0x54>
 80054de:	4620      	mov	r0, r4
 80054e0:	f000 f83e 	bl	8005560 <_free_r>
 80054e4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80054e6:	b111      	cbz	r1, 80054ee <_reclaim_reent+0x5e>
 80054e8:	4620      	mov	r0, r4
 80054ea:	f000 f839 	bl	8005560 <_free_r>
 80054ee:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80054f0:	b111      	cbz	r1, 80054f8 <_reclaim_reent+0x68>
 80054f2:	4620      	mov	r0, r4
 80054f4:	f000 f834 	bl	8005560 <_free_r>
 80054f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80054fa:	b111      	cbz	r1, 8005502 <_reclaim_reent+0x72>
 80054fc:	4620      	mov	r0, r4
 80054fe:	f000 f82f 	bl	8005560 <_free_r>
 8005502:	69a3      	ldr	r3, [r4, #24]
 8005504:	b1e3      	cbz	r3, 8005540 <_reclaim_reent+0xb0>
 8005506:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005508:	4620      	mov	r0, r4
 800550a:	4798      	blx	r3
 800550c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800550e:	b1b9      	cbz	r1, 8005540 <_reclaim_reent+0xb0>
 8005510:	4620      	mov	r0, r4
 8005512:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005516:	f7ff bfad 	b.w	8005474 <cleanup_glue>
 800551a:	5949      	ldr	r1, [r1, r5]
 800551c:	b941      	cbnz	r1, 8005530 <_reclaim_reent+0xa0>
 800551e:	3504      	adds	r5, #4
 8005520:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005522:	2d80      	cmp	r5, #128	; 0x80
 8005524:	68d9      	ldr	r1, [r3, #12]
 8005526:	d1f8      	bne.n	800551a <_reclaim_reent+0x8a>
 8005528:	4620      	mov	r0, r4
 800552a:	f000 f819 	bl	8005560 <_free_r>
 800552e:	e7ba      	b.n	80054a6 <_reclaim_reent+0x16>
 8005530:	680e      	ldr	r6, [r1, #0]
 8005532:	4620      	mov	r0, r4
 8005534:	f000 f814 	bl	8005560 <_free_r>
 8005538:	4631      	mov	r1, r6
 800553a:	e7ef      	b.n	800551c <_reclaim_reent+0x8c>
 800553c:	2500      	movs	r5, #0
 800553e:	e7ef      	b.n	8005520 <_reclaim_reent+0x90>
 8005540:	bd70      	pop	{r4, r5, r6, pc}
 8005542:	bf00      	nop
 8005544:	24000014 	.word	0x24000014

08005548 <__malloc_lock>:
 8005548:	4801      	ldr	r0, [pc, #4]	; (8005550 <__malloc_lock+0x8>)
 800554a:	f7ff bf7b 	b.w	8005444 <__retarget_lock_acquire_recursive>
 800554e:	bf00      	nop
 8005550:	24004b58 	.word	0x24004b58

08005554 <__malloc_unlock>:
 8005554:	4801      	ldr	r0, [pc, #4]	; (800555c <__malloc_unlock+0x8>)
 8005556:	f7ff bf76 	b.w	8005446 <__retarget_lock_release_recursive>
 800555a:	bf00      	nop
 800555c:	24004b58 	.word	0x24004b58

08005560 <_free_r>:
 8005560:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005562:	2900      	cmp	r1, #0
 8005564:	d044      	beq.n	80055f0 <_free_r+0x90>
 8005566:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800556a:	9001      	str	r0, [sp, #4]
 800556c:	2b00      	cmp	r3, #0
 800556e:	f1a1 0404 	sub.w	r4, r1, #4
 8005572:	bfb8      	it	lt
 8005574:	18e4      	addlt	r4, r4, r3
 8005576:	f7ff ffe7 	bl	8005548 <__malloc_lock>
 800557a:	4a1e      	ldr	r2, [pc, #120]	; (80055f4 <_free_r+0x94>)
 800557c:	9801      	ldr	r0, [sp, #4]
 800557e:	6813      	ldr	r3, [r2, #0]
 8005580:	b933      	cbnz	r3, 8005590 <_free_r+0x30>
 8005582:	6063      	str	r3, [r4, #4]
 8005584:	6014      	str	r4, [r2, #0]
 8005586:	b003      	add	sp, #12
 8005588:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800558c:	f7ff bfe2 	b.w	8005554 <__malloc_unlock>
 8005590:	42a3      	cmp	r3, r4
 8005592:	d908      	bls.n	80055a6 <_free_r+0x46>
 8005594:	6825      	ldr	r5, [r4, #0]
 8005596:	1961      	adds	r1, r4, r5
 8005598:	428b      	cmp	r3, r1
 800559a:	bf01      	itttt	eq
 800559c:	6819      	ldreq	r1, [r3, #0]
 800559e:	685b      	ldreq	r3, [r3, #4]
 80055a0:	1949      	addeq	r1, r1, r5
 80055a2:	6021      	streq	r1, [r4, #0]
 80055a4:	e7ed      	b.n	8005582 <_free_r+0x22>
 80055a6:	461a      	mov	r2, r3
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	b10b      	cbz	r3, 80055b0 <_free_r+0x50>
 80055ac:	42a3      	cmp	r3, r4
 80055ae:	d9fa      	bls.n	80055a6 <_free_r+0x46>
 80055b0:	6811      	ldr	r1, [r2, #0]
 80055b2:	1855      	adds	r5, r2, r1
 80055b4:	42a5      	cmp	r5, r4
 80055b6:	d10b      	bne.n	80055d0 <_free_r+0x70>
 80055b8:	6824      	ldr	r4, [r4, #0]
 80055ba:	4421      	add	r1, r4
 80055bc:	1854      	adds	r4, r2, r1
 80055be:	42a3      	cmp	r3, r4
 80055c0:	6011      	str	r1, [r2, #0]
 80055c2:	d1e0      	bne.n	8005586 <_free_r+0x26>
 80055c4:	681c      	ldr	r4, [r3, #0]
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	6053      	str	r3, [r2, #4]
 80055ca:	4421      	add	r1, r4
 80055cc:	6011      	str	r1, [r2, #0]
 80055ce:	e7da      	b.n	8005586 <_free_r+0x26>
 80055d0:	d902      	bls.n	80055d8 <_free_r+0x78>
 80055d2:	230c      	movs	r3, #12
 80055d4:	6003      	str	r3, [r0, #0]
 80055d6:	e7d6      	b.n	8005586 <_free_r+0x26>
 80055d8:	6825      	ldr	r5, [r4, #0]
 80055da:	1961      	adds	r1, r4, r5
 80055dc:	428b      	cmp	r3, r1
 80055de:	bf04      	itt	eq
 80055e0:	6819      	ldreq	r1, [r3, #0]
 80055e2:	685b      	ldreq	r3, [r3, #4]
 80055e4:	6063      	str	r3, [r4, #4]
 80055e6:	bf04      	itt	eq
 80055e8:	1949      	addeq	r1, r1, r5
 80055ea:	6021      	streq	r1, [r4, #0]
 80055ec:	6054      	str	r4, [r2, #4]
 80055ee:	e7ca      	b.n	8005586 <_free_r+0x26>
 80055f0:	b003      	add	sp, #12
 80055f2:	bd30      	pop	{r4, r5, pc}
 80055f4:	24004b5c 	.word	0x24004b5c

080055f8 <_init>:
 80055f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055fa:	bf00      	nop
 80055fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055fe:	bc08      	pop	{r3}
 8005600:	469e      	mov	lr, r3
 8005602:	4770      	bx	lr

08005604 <_fini>:
 8005604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005606:	bf00      	nop
 8005608:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800560a:	bc08      	pop	{r3}
 800560c:	469e      	mov	lr, r3
 800560e:	4770      	bx	lr
